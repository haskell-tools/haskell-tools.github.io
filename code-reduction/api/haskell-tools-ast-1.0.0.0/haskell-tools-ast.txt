-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell AST for efficient tooling
--   
--   A representation of a Haskell Syntax tree that contain source-related
--   and semantic annotations. These annotations help developer tools to
--   work with the defined program. The source information enables
--   refactoring and program transformation tools to change the source code
--   without losing the original format (layout, comments) of the source.
--   Semantic information helps analyzing the program. The representation
--   is different from the GHC's syntax tree. It contains information from
--   all representations in GHC (different version of syntax trees, lexical
--   and module-level information). The module is split up to put the
--   representation of different language elements into different modules.
--   Additionally, it contains the representation of semantic and source
--   annotations, helper functions and generated instances for the
--   representation of language elements. Because langauge elements may
--   refer each other (there can be a pattern inside an expression in case
--   of a pattern match and an expression inside a pattern if view patterns
--   are enabled), we use hs-boot files to break up dependency cycles.
@package haskell-tools-ast
@version 1.0.0.0

module Language.Haskell.Tools.AST.SemaInfoTypes

-- | Semantic info type for any node not carrying additional semantic
--   information
data NoSemanticInfo

-- | Info for expressions that tells which definitions are in scope
data ScopeInfo

-- | Info corresponding to a name
data NameInfo n

-- | Info corresponding to a name that is correctly identified
data CNameInfo

-- | Info for the module element
data ModuleInfo n

-- | Info corresponding to an import declaration
data ImportInfo n

-- | Info corresponding to an record-wildcard
data ImplicitFieldInfo
type Scope = [[(Name, Maybe [UsageSpec], Maybe Name)]]
data UsageSpec
UsageSpec :: Bool -> String -> String -> UsageSpec
[usageQualified] :: UsageSpec -> Bool
[usageQualifier] :: UsageSpec -> String
[usageAs] :: UsageSpec -> String
data LiteralInfo
LiteralInfo :: Type -> LiteralInfo
[_literalType] :: LiteralInfo -> Type
data PreLiteralInfo
RealLiteralInfo :: Type -> PreLiteralInfo
[_realLiteralType] :: PreLiteralInfo -> Type
PreLiteralInfo :: SrcSpan -> PreLiteralInfo
[_preLiteralLoc] :: PreLiteralInfo -> SrcSpan
exprScopedLocals :: Lens ScopeInfo ScopeInfo Scope Scope
nameScopedLocals :: forall n_alOv. Lens (NameInfo n_alOv) (NameInfo n_alOv) Scope Scope
nameIsDefined :: forall n_alOv. Lens (NameInfo n_alOv) (NameInfo n_alOv) Bool Bool
nameInfo :: forall n_alOv n'_ar5n. Partial (NameInfo n_alOv) (NameInfo n'_ar5n) n_alOv n'_ar5n
ambiguousName :: forall n_alOv. Partial (NameInfo n_alOv) (NameInfo n_alOv) RdrName RdrName
nameLocation :: forall n_alOv. Partial (NameInfo n_alOv) (NameInfo n_alOv) SrcSpan SrcSpan
implicitName :: forall n_alOv. Partial (NameInfo n_alOv) (NameInfo n_alOv) String String
cnameScopedLocals :: Lens CNameInfo CNameInfo Scope Scope
cnameIsDefined :: Lens CNameInfo CNameInfo Bool Bool
cnameInfo :: Lens CNameInfo CNameInfo Id Id
cnameFixity :: Lens CNameInfo CNameInfo (Maybe Fixity) (Maybe Fixity)
defModuleName :: forall n_alGH. Lens (ModuleInfo n_alGH) (ModuleInfo n_alGH) Module Module
defDynFlags :: forall n_alGH. Lens (ModuleInfo n_alGH) (ModuleInfo n_alGH) DynFlags DynFlags
defIsBootModule :: forall n_alGH. Lens (ModuleInfo n_alGH) (ModuleInfo n_alGH) Bool Bool
implicitNames :: forall n_alGH n'_aryB. Lens (ModuleInfo n_alGH) (ModuleInfo n'_aryB) [PName n_alGH] [PName n'_aryB]
importedModule :: forall n_alGG. Lens (ImportInfo n_alGG) (ImportInfo n_alGG) Module Module
availableNames :: forall n_alGG. Lens (ImportInfo n_alGG) (ImportInfo n_alGG) [n_alGG] [n_alGG]
importedNames :: forall n_alGG. Lens (ImportInfo n_alGG) (ImportInfo n_alGG) [PName n_alGG] [PName n_alGG]
implicitFieldBindings :: Lens ImplicitFieldInfo ImplicitFieldInfo [(Name, Name)] [(Name, Name)]
importedOrphanInsts :: forall n_alGG. Lens (ImportInfo n_alGG) (ImportInfo n_alGG) [ClsInst] [ClsInst]
importedFamInsts :: forall n_alGG. Lens (ImportInfo n_alGG) (ImportInfo n_alGG) [FamInst] [FamInst]
prelOrphanInsts :: forall n_alGH. Lens (ModuleInfo n_alGH) (ModuleInfo n_alGH) [ClsInst] [ClsInst]
prelFamInsts :: forall n_alGH. Lens (ModuleInfo n_alGH) (ModuleInfo n_alGH) [FamInst] [FamInst]
literalType :: Lens LiteralInfo LiteralInfo Type Type
mkNoSemanticInfo :: NoSemanticInfo

-- | Creates the information about the definitions in scope
mkScopeInfo :: Scope -> ScopeInfo

-- | Creates semantic information for an unambiguous name
mkNameInfo :: Scope -> Bool -> n -> NameInfo n

-- | Creates semantic information for a name that is ambiguous because the
--   lack of type info
mkAmbiguousNameInfo :: Scope -> Bool -> RdrName -> SrcSpan -> NameInfo n

-- | Creates semantic information for an implicit name
mkImplicitNameInfo :: Scope -> Bool -> String -> SrcSpan -> NameInfo n

-- | Create a typed name semantic information
mkCNameInfo :: Scope -> Bool -> Id -> Maybe Fixity -> CNameInfo

-- | Creates semantic information for the module element. Strict in the
--   list of implicitely imported, orphan and family instances.
mkModuleInfo :: Module -> DynFlags -> Bool -> [PName n] -> [ClsInst] -> [FamInst] -> ModuleInfo n

-- | Creates semantic information for an import declaration Strict in the
--   list of the used and imported declarations, orphan and family
--   instances.
mkImportInfo :: Module -> [n] -> [PName n] -> [ClsInst] -> [FamInst] -> ImportInfo n

-- | Creates semantic information for a wildcard field binding
mkImplicitFieldInfo :: [(Name, Name)] -> ImplicitFieldInfo
data PName n
PName :: n -> Maybe n -> PName n
[_pName] :: PName n -> n
[_pNameParent] :: PName n -> Maybe n
pName :: forall n_alGI. Lens (PName n_alGI) (PName n_alGI) n_alGI n_alGI
pNameParent :: forall n_alGI. Lens (PName n_alGI) (PName n_alGI) (Maybe n_alGI) (Maybe n_alGI)
instance GHC.Base.Functor Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo
instance GHC.Base.Functor Language.Haskell.Tools.AST.SemaInfoTypes.PName
instance GHC.Base.Functor Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
instance GHC.Base.Functor Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
instance Data.Foldable.Foldable Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo
instance Data.Foldable.Foldable Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
instance Data.Foldable.Foldable Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
instance Data.Foldable.Foldable Language.Haskell.Tools.AST.SemaInfoTypes.PName
instance Data.Traversable.Traversable Language.Haskell.Tools.AST.SemaInfoTypes.PName
instance Data.Traversable.Traversable Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo
instance Data.Traversable.Traversable Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
instance Data.Traversable.Traversable Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.ImplicitFieldInfo
instance Data.Data.Data n => Data.Data.Data (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo n)
instance Data.Data.Data n => Data.Data.Data (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo n)
instance Data.Data.Data n => Data.Data.Data (Language.Haskell.Tools.AST.SemaInfoTypes.PName n)
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo
instance Data.Data.Data n => Data.Data.Data (Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo n)
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.LiteralInfo
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.PreLiteralInfo
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.ScopeInfo
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
instance Data.Data.Data Language.Haskell.Tools.AST.SemaInfoTypes.UsageSpec
instance Data.Data.Data FamInstEnv.FamInst
instance Data.Data.Data FamInstEnv.FamFlavor
instance GHC.Show.Show Language.Haskell.Tools.AST.SemaInfoTypes.UsageSpec
instance Data.Data.Data DynFlags.DynFlags


-- | Parts of AST representation for keeping extra data
module Language.Haskell.Tools.AST.Ann

-- | A stage in which the nodes are marked with the ranges in the source
--   files which contain the source code of the given AST element.
data RangeStage

-- | A stage in which the nodes are still marked with ranges, but these
--   ranges are normalized. Optional and list elements also have ranges in
--   that state.
data NormRangeStage

-- | A stage in which AST elements are marked with templates. These
--   templates are hierarchical, and contain the places of the children
--   elements of the node.
data RngTemplateStage

-- | A stage where the annotation controls how the original source code can
--   be retrieved from the AST. A source template is assigned to each node.
--   It has holes where the content of an other node should be printed and
--   ranges for the source code of the node.
data SrcTemplateStage

-- | With this domain, semantic information can be parameterized. In
--   practice it is only used if the compilation cannot proceed past the
--   type checking phase.
data Dom name
data IdDom
type SemanticInfo (domain :: *) (node :: * -> * -> *) = SemanticInfo' domain (SemaInfoClassify node)
data SameInfoNameCls
data SameInfoLitCls
data SameInfoExprCls
data SameInfoImportCls
data SameInfoModuleCls
data SameInfoDefaultCls
data SameInfoWildcardCls

-- | A semantic domain for the AST. The semantic domain maps semantic
--   information for the different types of nodes in the AST. The kind of
--   semantic domain for an AST depends on which stages of the compilation
--   did it pass. However after transforming the GHC representation to our
--   AST, the domain keeps the same. The domain is not applied to the AST
--   elements that are generated while refactoring.
type Domain d = (Typeable d, Data d, SemanticInfo' d SameInfoDefaultCls ~ NoSemanticInfo, Data (SemanticInfo' d SameInfoNameCls), Data (SemanticInfo' d SameInfoLitCls), Data (SemanticInfo' d SameInfoExprCls), Data (SemanticInfo' d SameInfoImportCls), Data (SemanticInfo' d SameInfoModuleCls), Data (SemanticInfo' d SameInfoWildcardCls))
type DomainWith e d = (Data (SemanticInfo' d (SemaInfoClassify e)), Domain d)

-- | Extracts or modifies the concrete range corresponding to a given
--   source info. In case of lists and optional elements, it may not
--   contain the elements inside.
class HasRange a
getRange :: HasRange a => a -> SrcSpan
setRange :: HasRange a => SrcSpan -> a -> a

-- | Class for source information stages
class (Typeable stage, Data stage, Data (SpanInfo stage), Data (ListInfo stage), Data (OptionalInfo stage), HasRange (SpanInfo stage), HasRange (ListInfo stage), HasRange (OptionalInfo stage)) => SourceInfo stage where {
    data family SpanInfo stage :: *;
    data family ListInfo stage :: *;
    data family OptionalInfo stage :: *;
}

-- | A short form of showing a range, without file name, for debugging
--   purposes.
shortShowSpan :: SrcSpan -> String
shortShowSpanWithFile :: SrcSpan -> String

-- | A short form of showing a range, without file name, for debugging
--   purposes.
shortShowLoc :: SrcLoc -> String

-- | A class for marking a source information stage. All programs,
--   regardless of correct Haskell programs or not, must go through these
--   stages to be refactored.
class SourceInfo stage => RangeInfo stage
nodeSpan :: RangeInfo stage => Simple Lens (SpanInfo stage) SrcSpan
listPos :: RangeInfo stage => Simple Lens (ListInfo stage) SrcLoc
optionalPos :: RangeInfo stage => Simple Lens (OptionalInfo stage) SrcLoc

-- | Semantic and source code related information for an AST node.
data NodeInfo sema src
NodeInfo :: sema -> src -> NodeInfo sema src
[_semanticInfo] :: NodeInfo sema src -> sema
[_sourceInfo] :: NodeInfo sema src -> src
sourceInfo :: forall sema_aCvd src_aCve src'_aEHd. Lens (NodeInfo sema_aCvd src_aCve) (NodeInfo sema_aCvd src'_aEHd) src_aCve src'_aEHd
semanticInfo :: forall sema_aCvd src_aCve sema'_aEHa. Lens (NodeInfo sema_aCvd src_aCve) (NodeInfo sema'_aEHa src_aCve) sema_aCvd sema'_aEHa

-- | An element of the AST keeping extra information.
data Ann elem dom stage
Ann :: NodeInfo (SemanticInfo dom elem) (SpanInfo stage) -> elem dom stage -> Ann elem dom stage

-- | The extra information for the AST part
[_annotation] :: Ann elem dom stage -> NodeInfo (SemanticInfo dom elem) (SpanInfo stage)

-- | The original AST part
[_element] :: Ann elem dom stage -> elem dom stage
element :: forall elem_aEHm dom_aEHn stage_aEHo. Lens (Ann elem_aEHm dom_aEHn stage_aEHo) (Ann elem_aEHm dom_aEHn stage_aEHo) (elem_aEHm dom_aEHn stage_aEHo) (elem_aEHm dom_aEHn stage_aEHo)
annotation :: forall elem_aEHm dom_aEHn stage_aEHo. Lens (Ann elem_aEHm dom_aEHn stage_aEHo) (Ann elem_aEHm dom_aEHn stage_aEHo) (NodeInfo (SemanticInfo dom_aEHn elem_aEHm) (SpanInfo stage_aEHo)) (NodeInfo (SemanticInfo dom_aEHn elem_aEHm) (SpanInfo stage_aEHo))

-- | A list of AST elements
data AnnListG elem dom stage
AnnListG :: NodeInfo (SemanticInfo dom (AnnListG elem)) (ListInfo stage) -> [Ann elem dom stage] -> AnnListG elem dom stage
[_annListAnnot] :: AnnListG elem dom stage -> NodeInfo (SemanticInfo dom (AnnListG elem)) (ListInfo stage)
[_annListElems] :: AnnListG elem dom stage -> [Ann elem dom stage]
annListElems :: forall elem_aEL1 dom_aEL2 stage_aEL3. Lens (AnnListG elem_aEL1 dom_aEL2 stage_aEL3) (AnnListG elem_aEL1 dom_aEL2 stage_aEL3) [Ann elem_aEL1 dom_aEL2 stage_aEL3] [Ann elem_aEL1 dom_aEL2 stage_aEL3]
annListAnnot :: forall elem_aEL1 dom_aEL2 stage_aEL3. Lens (AnnListG elem_aEL1 dom_aEL2 stage_aEL3) (AnnListG elem_aEL1 dom_aEL2 stage_aEL3) (NodeInfo (SemanticInfo dom_aEL2 (AnnListG elem_aEL1)) (ListInfo stage_aEL3)) (NodeInfo (SemanticInfo dom_aEL2 (AnnListG elem_aEL1)) (ListInfo stage_aEL3))
annList :: Traversal (AnnListG e d s) (AnnListG e d s) (Ann e d s) (Ann e d s)

-- | An optional AST element
data AnnMaybeG elem dom stage
AnnMaybeG :: NodeInfo (SemanticInfo dom (AnnMaybeG elem)) (OptionalInfo stage) -> Maybe (Ann elem dom stage) -> AnnMaybeG elem dom stage
[_annMaybeAnnot] :: AnnMaybeG elem dom stage -> NodeInfo (SemanticInfo dom (AnnMaybeG elem)) (OptionalInfo stage)
[_annMaybe] :: AnnMaybeG elem dom stage -> Maybe (Ann elem dom stage)
annMaybeAnnot :: forall elem_aENR dom_aENS stage_aENT. Lens (AnnMaybeG elem_aENR dom_aENS stage_aENT) (AnnMaybeG elem_aENR dom_aENS stage_aENT) (NodeInfo (SemanticInfo dom_aENS (AnnMaybeG elem_aENR)) (OptionalInfo stage_aENT)) (NodeInfo (SemanticInfo dom_aENS (AnnMaybeG elem_aENR)) (OptionalInfo stage_aENT))
annMaybe :: forall elem_aENR dom_aENS stage_aENT. Lens (AnnMaybeG elem_aENR dom_aENS stage_aENT) (AnnMaybeG elem_aENR dom_aENS stage_aENT) (Maybe (Ann elem_aENR dom_aENS stage_aENT)) (Maybe (Ann elem_aENR dom_aENS stage_aENT))
class HasSourceInfo e where {
    type family SourceInfoType e :: *;
}
srcInfo :: HasSourceInfo e => Simple Lens e (SourceInfoType e)
annJust :: Partial (AnnMaybeG e d s) (AnnMaybeG e d s) (Ann e d s) (Ann e d s)

-- | An empty list of AST elements
annNil :: NodeInfo (SemanticInfo d (AnnListG e)) (ListInfo s) -> AnnListG e d s
isAnnNothing :: AnnMaybeG e d s -> Bool
isAnnJust :: AnnMaybeG e d s -> Bool
annLength :: AnnListG e d s -> Int

-- | A non-existing AST part
annNothing :: NodeInfo (SemanticInfo d (AnnMaybeG e)) (OptionalInfo s) -> AnnMaybeG e d s

-- | A class for changing semantic information throught the AST.
class ApplySemaChange cls
appSemaChange :: ApplySemaChange cls => SemaTrf f dom1 dom2 -> SemanticInfo' dom1 cls -> f (SemanticInfo' dom2 cls)

-- | A class for traversing semantic information in an AST
class ApplySemaChange (SemaInfoClassify a) => SemanticTraversal a
semaTraverse :: (SemanticTraversal a, Monad f) => SemaTrf f dom1 dom2 -> a dom1 st -> f (a dom2 st)

-- | A transformation on the possible semantic informations for a given
--   domain
data SemaTrf f dom1 dom2
SemaTrf :: (SemanticInfo' dom1 SameInfoNameCls -> f (SemanticInfo' dom2 SameInfoNameCls)) -> (SemanticInfo' dom1 SameInfoExprCls -> f (SemanticInfo' dom2 SameInfoExprCls)) -> (SemanticInfo' dom1 SameInfoLitCls -> f (SemanticInfo' dom2 SameInfoLitCls)) -> (SemanticInfo' dom1 SameInfoImportCls -> f (SemanticInfo' dom2 SameInfoImportCls)) -> (SemanticInfo' dom1 SameInfoModuleCls -> f (SemanticInfo' dom2 SameInfoModuleCls)) -> (SemanticInfo' dom1 SameInfoWildcardCls -> f (SemanticInfo' dom2 SameInfoWildcardCls)) -> (SemanticInfo' dom1 SameInfoDefaultCls -> f (SemanticInfo' dom2 SameInfoDefaultCls)) -> SemaTrf f dom1 dom2
[trfSemaNameCls] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoNameCls -> f (SemanticInfo' dom2 SameInfoNameCls)
[trfSemaExprCls] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoExprCls -> f (SemanticInfo' dom2 SameInfoExprCls)
[trfSemaLitCls] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoLitCls -> f (SemanticInfo' dom2 SameInfoLitCls)
[trfSemaImportCls] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoImportCls -> f (SemanticInfo' dom2 SameInfoImportCls)
[trfSemaModuleCls] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoModuleCls -> f (SemanticInfo' dom2 SameInfoModuleCls)
[trfSemaWildcardCls] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoWildcardCls -> f (SemanticInfo' dom2 SameInfoWildcardCls)
[trfSemaDefault] :: SemaTrf f dom1 dom2 -> SemanticInfo' dom1 SameInfoDefaultCls -> f (SemanticInfo' dom2 SameInfoDefaultCls)

-- | A class for traversing source information in an AST
class SourceInfoTraversal a
sourceInfoTraverseUp :: (SourceInfoTraversal a, Monad f) => SourceInfoTrf f st1 st2 -> f () -> f () -> a dom st1 -> f (a dom st2)
sourceInfoTraverseDown :: (SourceInfoTraversal a, Monad f) => SourceInfoTrf f st1 st2 -> f () -> f () -> a dom st1 -> f (a dom st2)
sourceInfoTraverse :: (SourceInfoTraversal a, Monad f) => SourceInfoTrf f st1 st2 -> a dom st1 -> f (a dom st2)

-- | A transformation on the possible source informations
data SourceInfoTrf f st1 st2
SourceInfoTrf :: (SpanInfo st1 -> f (SpanInfo st2)) -> (ListInfo st1 -> f (ListInfo st2)) -> (OptionalInfo st1 -> f (OptionalInfo st2)) -> SourceInfoTrf f st1 st2
[trfSpanInfo] :: SourceInfoTrf f st1 st2 -> SpanInfo st1 -> f (SpanInfo st2)
[trfListInfo] :: SourceInfoTrf f st1 st2 -> ListInfo st1 -> f (ListInfo st2)
[trfOptionalInfo] :: SourceInfoTrf f st1 st2 -> OptionalInfo st1 -> f (OptionalInfo st2)
instance Language.Haskell.Tools.AST.Ann.SourceInfoTraversal e => Language.Haskell.Tools.AST.Ann.SourceInfoTraversal (Language.Haskell.Tools.AST.Ann.Ann e)
instance Language.Haskell.Tools.AST.Ann.SourceInfoTraversal e => Language.Haskell.Tools.AST.Ann.SourceInfoTraversal (Language.Haskell.Tools.AST.Ann.AnnListG e)
instance Language.Haskell.Tools.AST.Ann.SourceInfoTraversal e => Language.Haskell.Tools.AST.Ann.SourceInfoTraversal (Language.Haskell.Tools.AST.Ann.AnnMaybeG e)
instance (Language.Haskell.Tools.AST.Ann.ApplySemaChange (Language.Haskell.Tools.AST.Ann.SemaInfoClassify e), Language.Haskell.Tools.AST.Ann.SemanticTraversal e) => Language.Haskell.Tools.AST.Ann.SemanticTraversal (Language.Haskell.Tools.AST.Ann.Ann e)
instance (Language.Haskell.Tools.AST.Ann.ApplySemaChange (Language.Haskell.Tools.AST.Ann.SemaInfoClassify e), Language.Haskell.Tools.AST.Ann.SemanticTraversal e) => Language.Haskell.Tools.AST.Ann.SemanticTraversal (Language.Haskell.Tools.AST.Ann.AnnListG e)
instance (Language.Haskell.Tools.AST.Ann.ApplySemaChange (Language.Haskell.Tools.AST.Ann.SemaInfoClassify e), Language.Haskell.Tools.AST.Ann.SemanticTraversal e) => Language.Haskell.Tools.AST.Ann.SemanticTraversal (Language.Haskell.Tools.AST.Ann.AnnMaybeG e)
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoNameCls
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoLitCls
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoExprCls
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoImportCls
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoModuleCls
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls
instance Language.Haskell.Tools.AST.Ann.ApplySemaChange Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
instance Language.Haskell.Tools.AST.Ann.HasSourceInfo (Language.Haskell.Tools.AST.Ann.Ann elem dom stage)
instance Language.Haskell.Tools.AST.Ann.HasSourceInfo (Language.Haskell.Tools.AST.Ann.AnnListG elem dom stage)
instance Language.Haskell.Tools.AST.Ann.HasSourceInfo (Language.Haskell.Tools.AST.Ann.AnnMaybeG elem dom stage)
instance Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.SpanInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.ListInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.OptionalInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.SpanInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.ListInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.OptionalInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance Language.Haskell.Tools.AST.Ann.SourceInfo stage => Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.Ann elem dom stage)
instance Language.Haskell.Tools.AST.Ann.SourceInfo stage => Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.AnnListG elem dom stage)
instance Language.Haskell.Tools.AST.Ann.SourceInfo stage => Language.Haskell.Tools.AST.Ann.HasRange (Language.Haskell.Tools.AST.Ann.AnnMaybeG elem dom stage)
instance Language.Haskell.Tools.AST.Ann.SourceInfo src => GHC.Classes.Eq (Language.Haskell.Tools.AST.Ann.Ann elem dom src)
instance (Data.Data.Data src, Data.Data.Data sema) => Data.Data.Data (Language.Haskell.Tools.AST.Ann.NodeInfo sema src)
instance (GHC.Show.Show src, GHC.Show.Show sema) => GHC.Show.Show (Language.Haskell.Tools.AST.Ann.NodeInfo sema src)
instance (GHC.Classes.Eq src, GHC.Classes.Eq sema) => GHC.Classes.Eq (Language.Haskell.Tools.AST.Ann.NodeInfo sema src)
instance Data.Data.Data (Language.Haskell.Tools.AST.Ann.OptionalInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Data.Data.Data (Language.Haskell.Tools.AST.Ann.ListInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Data.Data.Data (Language.Haskell.Tools.AST.Ann.SpanInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Data.Data.Data (Language.Haskell.Tools.AST.Ann.OptionalInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance Data.Data.Data (Language.Haskell.Tools.AST.Ann.ListInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance Data.Data.Data (Language.Haskell.Tools.AST.Ann.SpanInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance Data.Data.Data Language.Haskell.Tools.AST.Ann.RangeStage
instance Data.Data.Data Language.Haskell.Tools.AST.Ann.NormRangeStage
instance Data.Data.Data Language.Haskell.Tools.AST.Ann.RngTemplateStage
instance Data.Data.Data Language.Haskell.Tools.AST.Ann.SrcTemplateStage
instance (Data.Data.Data name, Data.Typeable.Internal.Typeable name) => Data.Data.Data (Language.Haskell.Tools.AST.Ann.Dom name)
instance Data.Data.Data Language.Haskell.Tools.AST.Ann.IdDom
instance Language.Haskell.Tools.AST.Ann.RangeInfo Language.Haskell.Tools.AST.Ann.RangeStage
instance Language.Haskell.Tools.AST.Ann.SourceInfo Language.Haskell.Tools.AST.Ann.RangeStage
instance GHC.Show.Show (Language.Haskell.Tools.AST.Ann.SpanInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance GHC.Show.Show (Language.Haskell.Tools.AST.Ann.ListInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance GHC.Show.Show (Language.Haskell.Tools.AST.Ann.OptionalInfo Language.Haskell.Tools.AST.Ann.RangeStage)
instance Language.Haskell.Tools.AST.Ann.SourceInfo Language.Haskell.Tools.AST.Ann.NormRangeStage
instance GHC.Show.Show (Language.Haskell.Tools.AST.Ann.SpanInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance GHC.Show.Show (Language.Haskell.Tools.AST.Ann.ListInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)
instance GHC.Show.Show (Language.Haskell.Tools.AST.Ann.OptionalInfo Language.Haskell.Tools.AST.Ann.NormRangeStage)

module Language.Haskell.Tools.AST.SemaInfoClasses
semanticsLitType :: Ann ULiteral IdDom st -> Type

-- | Domains that have semantic information for names
type HasNameInfo dom = (Domain dom, HasNameInfo' (SemanticInfo dom UQualifiedName))

-- | Infos that may have a name that can be extracted
class HasNameInfo' si
semanticsName :: HasNameInfo' si => si -> Maybe Name
type HasIdInfo dom = (Domain dom, HasIdInfo' (SemanticInfo dom UQualifiedName))

-- | Infos that may have a typed name that can be extracted
class HasNameInfo' si => HasIdInfo' si
semanticsId :: HasIdInfo' si => si -> Id
type HasFixityInfo dom = (Domain dom, HasFixityInfo' (SemanticInfo dom UQualifiedName))

-- | Infos that may have a fixity information
class HasFixityInfo' si
semanticsFixity :: HasFixityInfo' si => si -> Maybe Fixity
type HasScopeInfo dom = (Domain dom, HasScopeInfo' (SemanticInfo dom UQualifiedName), HasScopeInfo' (SemanticInfo dom UExpr))

-- | Infos that contain the names that are available in theirs scope
class HasScopeInfo' si
semanticsScope :: HasScopeInfo' si => si -> Scope
type HasDefiningInfo dom = (Domain dom, HasDefiningInfo' (SemanticInfo dom UQualifiedName))

-- | Infos that store if they were used to define a name
class HasDefiningInfo' si
semanticsDefining :: HasDefiningInfo' si => si -> Bool
class HasSourceInfoInSema' si
semanticsSourceInfo :: HasSourceInfoInSema' si => si -> Maybe SrcSpan
type HasModuleInfo dom = (Domain dom, HasModuleInfo' (SemanticInfo dom UModule))
class HasModuleInfo' si
semanticsModule :: HasModuleInfo' si => si -> Module
semanticsDynFlags :: HasModuleInfo' si => si -> DynFlags
isBootModule :: HasModuleInfo' si => si -> Bool
semanticsImplicitImports :: HasModuleInfo' si => si -> [Name]
semanticsPrelInsts :: HasModuleInfo' si => si -> [ClsInst]
semanticsPrelFamInsts :: HasModuleInfo' si => si -> [FamInst]
type HasImportInfo dom = (Domain dom, HasImportInfo' (SemanticInfo dom UImportDecl))
class HasImportInfo' si
semanticsImportedModule :: HasImportInfo' si => si -> Module
semanticsAvailable :: HasImportInfo' si => si -> [Name]
semanticsImported :: HasImportInfo' si => si -> [Name]
semanticsInsts :: HasImportInfo' si => si -> [ClsInst]
semanticsFamInsts :: HasImportInfo' si => si -> [FamInst]
type HasImplicitFieldsInfo dom = (Domain dom, HasImplicitFieldsInfo' (SemanticInfo dom UFieldWildcard))
class HasImplicitFieldsInfo' si
semanticsImplicitFlds :: HasImplicitFieldsInfo' si => si -> [(Name, Name)]
type HasNoSemanticInfo dom si = SemanticInfo dom si ~ NoSemanticInfo
data UsageSpec
UsageSpec :: Bool -> String -> String -> UsageSpec
[usageQualified] :: UsageSpec -> Bool
[usageQualifier] :: UsageSpec -> String
[usageAs] :: UsageSpec -> String
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasImplicitFieldsInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasImplicitFieldsInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Exprs.UFieldWildcard dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasImplicitFieldsInfo' Language.Haskell.Tools.AST.SemaInfoTypes.ImplicitFieldInfo
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasImportInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasImportInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Modules.UImportDecl dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasImportInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Name.Name)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasImportInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Id)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasModuleInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasModuleInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Modules.UModule dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasModuleInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Name.Name)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasModuleInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Id)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasSourceInfoInSema' (Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo n)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasDefiningInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasDefiningInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Names.UQualifiedName dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasDefiningInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo n)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasDefiningInfo' Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Exprs.UExpr dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Names.UQualifiedName dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo n)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo' Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasScopeInfo' Language.Haskell.Tools.AST.SemaInfoTypes.ScopeInfo
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasFixityInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasFixityInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Names.UQualifiedName dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasFixityInfo' Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasIdInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasIdInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Names.UQualifiedName dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasIdInfo' Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom => Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo' (Language.Haskell.Tools.AST.Ann.Ann Language.Haskell.Tools.AST.Representation.Names.UQualifiedName dom st)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo' (Language.Haskell.Tools.AST.SemaInfoTypes.NameInfo Name.Name)
instance Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo' Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo


-- | Generated references for AST elements.
module Language.Haskell.Tools.AST.References
modImports :: forall dom_a15CZ stage_a15D0. Lens (Ann UModule dom_a15CZ stage_a15D0) (Ann UModule dom_a15CZ stage_a15D0) (AnnListG UImportDecl dom_a15CZ stage_a15D0) (AnnListG UImportDecl dom_a15CZ stage_a15D0)
modHead :: forall dom_a15CZ stage_a15D0. Lens (Ann UModule dom_a15CZ stage_a15D0) (Ann UModule dom_a15CZ stage_a15D0) (AnnMaybeG UModuleHead dom_a15CZ stage_a15D0) (AnnMaybeG UModuleHead dom_a15CZ stage_a15D0)
modDecl :: forall dom_a15CZ stage_a15D0. Lens (Ann UModule dom_a15CZ stage_a15D0) (Ann UModule dom_a15CZ stage_a15D0) (AnnListG UDecl dom_a15CZ stage_a15D0) (AnnListG UDecl dom_a15CZ stage_a15D0)
filePragmas :: forall dom_a15CZ stage_a15D0. Lens (Ann UModule dom_a15CZ stage_a15D0) (Ann UModule dom_a15CZ stage_a15D0) (AnnListG UFilePragma dom_a15CZ stage_a15D0) (AnnListG UFilePragma dom_a15CZ stage_a15D0)
mhPragma :: forall dom_a15CX stage_a15CY. Lens (Ann UModuleHead dom_a15CX stage_a15CY) (Ann UModuleHead dom_a15CX stage_a15CY) (AnnMaybeG UModulePragma dom_a15CX stage_a15CY) (AnnMaybeG UModulePragma dom_a15CX stage_a15CY)
mhName :: forall dom_a15CX stage_a15CY. Lens (Ann UModuleHead dom_a15CX stage_a15CY) (Ann UModuleHead dom_a15CX stage_a15CY) (Ann UModuleName dom_a15CX stage_a15CY) (Ann UModuleName dom_a15CX stage_a15CY)
mhExports :: forall dom_a15CX stage_a15CY. Lens (Ann UModuleHead dom_a15CX stage_a15CY) (Ann UModuleHead dom_a15CX stage_a15CY) (AnnMaybeG UExportSpecs dom_a15CX stage_a15CY) (AnnMaybeG UExportSpecs dom_a15CX stage_a15CY)
espExports :: forall dom_a15CV stage_a15CW dom'_a28kg stage'_a28kh. Lens (Ann UExportSpecs dom_a15CV stage_a15CW) (Ann UExportSpecs dom_a15CV stage_a15CW) (AnnListG UExportSpec dom_a15CV stage_a15CW) (AnnListG UExportSpec dom_a15CV stage_a15CW)
exportModuleName :: forall dom_a15CT stage_a15CU. Partial (Ann UExportSpec dom_a15CT stage_a15CU) (Ann UExportSpec dom_a15CT stage_a15CU) (Ann UModuleName dom_a15CT stage_a15CU) (Ann UModuleName dom_a15CT stage_a15CU)
exportDecl :: forall dom_a15CT stage_a15CU. Partial (Ann UExportSpec dom_a15CT stage_a15CU) (Ann UExportSpec dom_a15CT stage_a15CU) (Ann UIESpec dom_a15CT stage_a15CU) (Ann UIESpec dom_a15CT stage_a15CU)
ieSubspec :: forall dom_a15CR stage_a15CS. Lens (Ann UIESpec dom_a15CR stage_a15CS) (Ann UIESpec dom_a15CR stage_a15CS) (AnnMaybeG USubSpec dom_a15CR stage_a15CS) (AnnMaybeG USubSpec dom_a15CR stage_a15CS)
ieName :: forall dom_a15CR stage_a15CS. Lens (Ann UIESpec dom_a15CR stage_a15CS) (Ann UIESpec dom_a15CR stage_a15CS) (Ann UName dom_a15CR stage_a15CS) (Ann UName dom_a15CR stage_a15CS)
ieModifier :: forall dom_a15CR stage_a15CS. Lens (Ann UIESpec dom_a15CR stage_a15CS) (Ann UIESpec dom_a15CR stage_a15CS) (AnnMaybeG UImportModifier dom_a15CR stage_a15CS) (AnnMaybeG UImportModifier dom_a15CR stage_a15CS)
essList :: forall dom_a15CN stage_a15CO dom'_a28tr stage'_a28ts. Partial (Ann USubSpec dom_a15CN stage_a15CO) (Ann USubSpec dom_a15CN stage_a15CO) (AnnListG UName dom_a15CN stage_a15CO) (AnnListG UName dom_a15CN stage_a15CO)
modWarningStr :: forall dom_a15CJ stage_a15CK. Partial (Ann UModulePragma dom_a15CJ stage_a15CK) (Ann UModulePragma dom_a15CJ stage_a15CK) (AnnListG UStringNode dom_a15CJ stage_a15CK) (AnnListG UStringNode dom_a15CJ stage_a15CK)
modDeprecatedPragma :: forall dom_a15CJ stage_a15CK. Partial (Ann UModulePragma dom_a15CJ stage_a15CK) (Ann UModulePragma dom_a15CJ stage_a15CK) (AnnListG UStringNode dom_a15CJ stage_a15CK) (AnnListG UStringNode dom_a15CJ stage_a15CK)
opStr :: forall dom_a15CL stage_a15CM. Partial (Ann UFilePragma dom_a15CL stage_a15CM) (Ann UFilePragma dom_a15CL stage_a15CM) (Ann UStringNode dom_a15CL stage_a15CM) (Ann UStringNode dom_a15CL stage_a15CM)
lpPragmas :: forall dom_a15CL stage_a15CM. Partial (Ann UFilePragma dom_a15CL stage_a15CM) (Ann UFilePragma dom_a15CL stage_a15CM) (AnnListG ULanguageExtension dom_a15CL stage_a15CM) (AnnListG ULanguageExtension dom_a15CL stage_a15CM)
importSpec :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (AnnMaybeG UImportSpec dom_a15CF stage_a15CG) (AnnMaybeG UImportSpec dom_a15CF stage_a15CG)
importSource :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (AnnMaybeG UImportSource dom_a15CF stage_a15CG) (AnnMaybeG UImportSource dom_a15CF stage_a15CG)
importSafe :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (AnnMaybeG UImportSafe dom_a15CF stage_a15CG) (AnnMaybeG UImportSafe dom_a15CF stage_a15CG)
importQualified :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (AnnMaybeG UImportQualified dom_a15CF stage_a15CG) (AnnMaybeG UImportQualified dom_a15CF stage_a15CG)
importPkg :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (AnnMaybeG UStringNode dom_a15CF stage_a15CG) (AnnMaybeG UStringNode dom_a15CF stage_a15CG)
importModule :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UModuleName dom_a15CF stage_a15CG) (Ann UModuleName dom_a15CF stage_a15CG)
importAs :: forall dom_a15CF stage_a15CG. Lens (Ann UImportDecl dom_a15CF stage_a15CG) (Ann UImportDecl dom_a15CF stage_a15CG) (AnnMaybeG UImportRenaming dom_a15CF stage_a15CG) (AnnMaybeG UImportRenaming dom_a15CF stage_a15CG)
importSpecList :: forall dom_a15CD stage_a15CE. Partial (Ann UImportSpec dom_a15CD stage_a15CE) (Ann UImportSpec dom_a15CD stage_a15CE) (AnnListG UIESpec dom_a15CD stage_a15CE) (AnnListG UIESpec dom_a15CD stage_a15CE)
importSpecHiding :: forall dom_a15CD stage_a15CE. Partial (Ann UImportSpec dom_a15CD stage_a15CE) (Ann UImportSpec dom_a15CD stage_a15CE) (AnnListG UIESpec dom_a15CD stage_a15CE) (AnnListG UIESpec dom_a15CD stage_a15CE)
importRename :: forall dom_a15Ct stage_a15Cu dom'_a28QE stage'_a28QF. Lens (Ann UImportRenaming dom_a15Ct stage_a15Cu) (Ann UImportRenaming dom_a15Ct stage_a15Cu) (Ann UModuleName dom_a15Ct stage_a15Cu) (Ann UModuleName dom_a15Ct stage_a15Cu)
moduleNameString :: forall dom_a15Cr stage_a15Cs. Lens (Ann UModuleName dom_a15Cr stage_a15Cs) (Ann UModuleName dom_a15Cr stage_a15Cs) String String
langExt :: forall dom_a15CH stage_a15CI. Lens (Ann ULanguageExtension dom_a15CH stage_a15CI) (Ann ULanguageExtension dom_a15CH stage_a15CI) String String
declValBind :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UValueBind dom_aZD2 stage_aZD3) (Ann UValueBind dom_aZD2 stage_aZD3)
declTypes :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnListG UType dom_aZD2 stage_aZD3) (AnnListG UType dom_aZD2 stage_aZD3)
declTypeSig :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UTypeSignature dom_aZD2 stage_aZD3) (Ann UTypeSignature dom_aZD2 stage_aZD3)
declTypeFamily :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UTypeFamily dom_aZD2 stage_aZD3) (Ann UTypeFamily dom_aZD2 stage_aZD3)
declType :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UType dom_aZD2 stage_aZD3) (Ann UType dom_aZD2 stage_aZD3)
declSplice :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann USplice dom_aZD2 stage_aZD3) (Ann USplice dom_aZD2 stage_aZD3)
declSpec :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UTypeFamilySpec dom_aZD2 stage_aZD3) (AnnMaybeG UTypeFamilySpec dom_aZD2 stage_aZD3)
declSafety :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG USafety dom_aZD2 stage_aZD3) (AnnMaybeG USafety dom_aZD2 stage_aZD3)
declRoles :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnListG URole dom_aZD2 stage_aZD3) (AnnListG URole dom_aZD2 stage_aZD3)
declRoleType :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UQualifiedName dom_aZD2 stage_aZD3) (Ann UQualifiedName dom_aZD2 stage_aZD3)
declPragma :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UTopLevelPragma dom_aZD2 stage_aZD3) (Ann UTopLevelPragma dom_aZD2 stage_aZD3)
declPatTypeSig :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UPatternTypeSignature dom_aZD2 stage_aZD3) (Ann UPatternTypeSignature dom_aZD2 stage_aZD3)
declPatSyn :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UPatternSynonym dom_aZD2 stage_aZD3) (Ann UPatternSynonym dom_aZD2 stage_aZD3)
declOverlap :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UOverlapPragma dom_aZD2 stage_aZD3) (AnnMaybeG UOverlapPragma dom_aZD2 stage_aZD3)
declNewtype :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDataOrNewtypeKeyword dom_aZD2 stage_aZD3) (Ann UDataOrNewtypeKeyword dom_aZD2 stage_aZD3)
declName :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UName dom_aZD2 stage_aZD3) (Ann UName dom_aZD2 stage_aZD3)
declKind :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UKindConstraint dom_aZD2 stage_aZD3) (AnnMaybeG UKindConstraint dom_aZD2 stage_aZD3)
declInstance :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UInstanceRule dom_aZD2 stage_aZD3) (Ann UInstanceRule dom_aZD2 stage_aZD3)
declInstRule :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UInstanceRule dom_aZD2 stage_aZD3) (Ann UInstanceRule dom_aZD2 stage_aZD3)
declInstDecl :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UInstBody dom_aZD2 stage_aZD3) (AnnMaybeG UInstBody dom_aZD2 stage_aZD3)
declHead :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDeclHead dom_aZD2 stage_aZD3) (Ann UDeclHead dom_aZD2 stage_aZD3)
declGadt :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnListG UGadtConDecl dom_aZD2 stage_aZD3) (AnnListG UGadtConDecl dom_aZD2 stage_aZD3)
declFunDeps :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UFunDeps dom_aZD2 stage_aZD3) (AnnMaybeG UFunDeps dom_aZD2 stage_aZD3)
declForeignType :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UType dom_aZD2 stage_aZD3) (Ann UType dom_aZD2 stage_aZD3)
declFixity :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UFixitySignature dom_aZD2 stage_aZD3) (Ann UFixitySignature dom_aZD2 stage_aZD3)
declDeriving :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnListG UDeriving dom_aZD2 stage_aZD3) (AnnListG UDeriving dom_aZD2 stage_aZD3)
declDerivStrat :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UDeriveStrategy dom_aZD2 stage_aZD3) (AnnMaybeG UDeriveStrategy dom_aZD2 stage_aZD3)
declDecl :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnListG UTypeEqn dom_aZD2 stage_aZD3) (AnnListG UTypeEqn dom_aZD2 stage_aZD3)
declCtx :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UContext dom_aZD2 stage_aZD3) (AnnMaybeG UContext dom_aZD2 stage_aZD3)
declCons :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnListG UConDecl dom_aZD2 stage_aZD3) (AnnListG UConDecl dom_aZD2 stage_aZD3)
declCallConv :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UCallConv dom_aZD2 stage_aZD3) (Ann UCallConv dom_aZD2 stage_aZD3)
declBody :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (AnnMaybeG UClassBody dom_aZD2 stage_aZD3) (AnnMaybeG UClassBody dom_aZD2 stage_aZD3)
declAssignedType :: forall dom_aZD2 stage_aZD3. Partial (Ann UDecl dom_aZD2 stage_aZD3) (Ann UDecl dom_aZD2 stage_aZD3) (Ann UType dom_aZD2 stage_aZD3) (Ann UType dom_aZD2 stage_aZD3)
cbElements :: forall dom_aZCY stage_aZCZ dom'_a2b8W stage'_a2b8X. Lens (Ann UClassBody dom_aZCY stage_aZCZ) (Ann UClassBody dom_aZCY stage_aZCZ) (AnnListG UClassElement dom_aZCY stage_aZCZ) (AnnListG UClassElement dom_aZCY stage_aZCZ)
pragmaFormula :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UMinimalFormula dom_aZCW stage_aZCX) (Ann UMinimalFormula dom_aZCW stage_aZCX)
clsInline :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UInlinePragma dom_aZCW stage_aZCX) (Ann UInlinePragma dom_aZCW stage_aZCX)
clsFixity :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UFixitySignature dom_aZCW stage_aZCX) (Ann UFixitySignature dom_aZCW stage_aZCX)
ceTypeSig :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UTypeSignature dom_aZCW stage_aZCX) (Ann UTypeSignature dom_aZCW stage_aZCX)
ceTypeFam :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UTypeFamily dom_aZCW stage_aZCX) (Ann UTypeFamily dom_aZCW stage_aZCX)
ceType :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UType dom_aZCW stage_aZCX) (Ann UType dom_aZCW stage_aZCX)
ceName :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UName dom_aZCW stage_aZCX) (Ann UName dom_aZCW stage_aZCX)
ceKind :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UType dom_aZCW stage_aZCX) (Ann UType dom_aZCW stage_aZCX)
ceHead :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UDeclHead dom_aZCW stage_aZCX) (Ann UDeclHead dom_aZCW stage_aZCX)
ceBind :: forall dom_aZCW stage_aZCX. Partial (Ann UClassElement dom_aZCW stage_aZCX) (Ann UClassElement dom_aZCW stage_aZCX) (Ann UValueBind dom_aZCW stage_aZCX) (Ann UValueBind dom_aZCW stage_aZCX)
dhRight :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UTyVar dom_aZD0 stage_aZD1) (Ann UTyVar dom_aZD0 stage_aZD1)
dhOperator :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UOperator dom_aZD0 stage_aZD1) (Ann UOperator dom_aZD0 stage_aZD1)
dhName :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UName dom_aZD0 stage_aZD1) (Ann UName dom_aZD0 stage_aZD1)
dhLeft :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UTyVar dom_aZD0 stage_aZD1) (Ann UTyVar dom_aZD0 stage_aZD1)
dhBody :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1)
dhAppOperand :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UTyVar dom_aZD0 stage_aZD1) (Ann UTyVar dom_aZD0 stage_aZD1)
dhAppFun :: forall dom_aZD0 stage_aZD1. Partial (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1) (Ann UDeclHead dom_aZD0 stage_aZD1)
instBodyDecls :: forall dom_aZCQ stage_aZCR dom'_a2bOL stage'_a2bOM. Lens (Ann UInstBody dom_aZCQ stage_aZCR) (Ann UInstBody dom_aZCQ stage_aZCR) (AnnListG UInstBodyDecl dom_aZCQ stage_aZCR) (AnnListG UInstBodyDecl dom_aZCQ stage_aZCR)
specializeInstanceType :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UType dom_aZCO stage_aZCP) (Ann UType dom_aZCO stage_aZCP)
specializeInstance :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann USpecializePragma dom_aZCO stage_aZCP) (Ann USpecializePragma dom_aZCO stage_aZCP)
instanceInline :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInlinePragma dom_aZCO stage_aZCP) (Ann UInlinePragma dom_aZCO stage_aZCP)
instBodyTypeSig :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UTypeSignature dom_aZCO stage_aZCP) (Ann UTypeSignature dom_aZCO stage_aZCP)
instBodyTypeEqn :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UTypeEqn dom_aZCO stage_aZCP) (Ann UTypeEqn dom_aZCO stage_aZCP)
instBodyLhsType :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstanceRule dom_aZCO stage_aZCP) (Ann UInstanceRule dom_aZCO stage_aZCP)
instBodyGadtCons :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (AnnListG UGadtConDecl dom_aZCO stage_aZCP) (AnnListG UGadtConDecl dom_aZCO stage_aZCP)
instBodyDerivings :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (AnnListG UDeriving dom_aZCO stage_aZCP) (AnnListG UDeriving dom_aZCO stage_aZCP)
instBodyDeclFunbind :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UValueBind dom_aZCO stage_aZCP) (Ann UValueBind dom_aZCO stage_aZCP)
instBodyDataNew :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UDataOrNewtypeKeyword dom_aZCO stage_aZCP) (Ann UDataOrNewtypeKeyword dom_aZCO stage_aZCP)
instBodyDataKind :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (AnnMaybeG UKindConstraint dom_aZCO stage_aZCP) (AnnMaybeG UKindConstraint dom_aZCO stage_aZCP)
instBodyDataCons :: forall dom_aZCO stage_aZCP. Partial (Ann UInstBodyDecl dom_aZCO stage_aZCP) (Ann UInstBodyDecl dom_aZCO stage_aZCP) (AnnListG UConDecl dom_aZCO stage_aZCP) (AnnListG UConDecl dom_aZCO stage_aZCP)
tfSpec :: forall dom_aZCK stage_aZCL. Partial (Ann UTypeFamily dom_aZCK stage_aZCL) (Ann UTypeFamily dom_aZCK stage_aZCL) (AnnMaybeG UTypeFamilySpec dom_aZCK stage_aZCL) (AnnMaybeG UTypeFamilySpec dom_aZCK stage_aZCL)
tfKind :: forall dom_aZCK stage_aZCL. Partial (Ann UTypeFamily dom_aZCK stage_aZCL) (Ann UTypeFamily dom_aZCK stage_aZCL) (AnnMaybeG UKindConstraint dom_aZCK stage_aZCL) (AnnMaybeG UKindConstraint dom_aZCK stage_aZCL)
tfHead :: forall dom_aZCK stage_aZCL. Lens (Ann UTypeFamily dom_aZCK stage_aZCL) (Ann UTypeFamily dom_aZCK stage_aZCL) (Ann UDeclHead dom_aZCK stage_aZCL) (Ann UDeclHead dom_aZCK stage_aZCL)
tfTypeVar :: forall dom_aZCI stage_aZCJ. Partial (Ann UTypeFamilySpec dom_aZCI stage_aZCJ) (Ann UTypeFamilySpec dom_aZCI stage_aZCJ) (Ann UTyVar dom_aZCI stage_aZCJ) (Ann UTyVar dom_aZCI stage_aZCJ)
tfSpecKind :: forall dom_aZCI stage_aZCJ. Partial (Ann UTypeFamilySpec dom_aZCI stage_aZCJ) (Ann UTypeFamilySpec dom_aZCI stage_aZCJ) (Ann UKindConstraint dom_aZCI stage_aZCJ) (Ann UKindConstraint dom_aZCI stage_aZCJ)
tfInjectivity :: forall dom_aZCI stage_aZCJ. Partial (Ann UTypeFamilySpec dom_aZCI stage_aZCJ) (Ann UTypeFamilySpec dom_aZCI stage_aZCJ) (Ann UInjectivityAnn dom_aZCI stage_aZCJ) (Ann UInjectivityAnn dom_aZCI stage_aZCJ)
injAnnRes :: forall dom_aZCG stage_aZCH. Lens (Ann UInjectivityAnn dom_aZCG stage_aZCH) (Ann UInjectivityAnn dom_aZCG stage_aZCH) (Ann UTyVar dom_aZCG stage_aZCH) (Ann UTyVar dom_aZCG stage_aZCH)
injAnnDeps :: forall dom_aZCG stage_aZCH. Lens (Ann UInjectivityAnn dom_aZCG stage_aZCH) (Ann UInjectivityAnn dom_aZCG stage_aZCH) (AnnListG UName dom_aZCG stage_aZCH) (AnnListG UName dom_aZCG stage_aZCH)
gadtConTypeCtx :: forall dom_aZCC stage_aZCD. Lens (Ann UGadtConDecl dom_aZCC stage_aZCD) (Ann UGadtConDecl dom_aZCC stage_aZCD) (AnnMaybeG UContext dom_aZCC stage_aZCD) (AnnMaybeG UContext dom_aZCC stage_aZCD)
gadtConTypeArgs :: forall dom_aZCC stage_aZCD. Lens (Ann UGadtConDecl dom_aZCC stage_aZCD) (Ann UGadtConDecl dom_aZCC stage_aZCD) (AnnListG UTyVar dom_aZCC stage_aZCD) (AnnListG UTyVar dom_aZCC stage_aZCD)
gadtConType :: forall dom_aZCC stage_aZCD. Lens (Ann UGadtConDecl dom_aZCC stage_aZCD) (Ann UGadtConDecl dom_aZCC stage_aZCD) (Ann UGadtConType dom_aZCC stage_aZCD) (Ann UGadtConType dom_aZCC stage_aZCD)
gadtConNames :: forall dom_aZCC stage_aZCD. Lens (Ann UGadtConDecl dom_aZCC stage_aZCD) (Ann UGadtConDecl dom_aZCC stage_aZCD) (AnnListG UName dom_aZCC stage_aZCD) (AnnListG UName dom_aZCC stage_aZCD)
gadtConResultType :: forall dom_aZCy stage_aZCz. Partial (Ann UGadtConType dom_aZCy stage_aZCz) (Ann UGadtConType dom_aZCy stage_aZCz) (Ann UType dom_aZCy stage_aZCz) (Ann UType dom_aZCy stage_aZCz)
gadtConRecordFields :: forall dom_aZCy stage_aZCz. Partial (Ann UGadtConType dom_aZCy stage_aZCz) (Ann UGadtConType dom_aZCy stage_aZCz) (AnnListG UFieldDecl dom_aZCy stage_aZCz) (AnnListG UFieldDecl dom_aZCy stage_aZCz)
gadtConNormalType :: forall dom_aZCy stage_aZCz. Partial (Ann UGadtConType dom_aZCy stage_aZCz) (Ann UGadtConType dom_aZCy stage_aZCz) (Ann UType dom_aZCy stage_aZCz) (Ann UType dom_aZCy stage_aZCz)
patRhs :: forall dom_aZCi stage_aZCj. Lens (Ann UPatternSynonym dom_aZCi stage_aZCj) (Ann UPatternSynonym dom_aZCi stage_aZCj) (Ann UPatSynRhs dom_aZCi stage_aZCj) (Ann UPatSynRhs dom_aZCi stage_aZCj)
patLhs :: forall dom_aZCi stage_aZCj. Lens (Ann UPatternSynonym dom_aZCi stage_aZCj) (Ann UPatternSynonym dom_aZCi stage_aZCj) (Ann UPatSynLhs dom_aZCi stage_aZCj) (Ann UPatSynLhs dom_aZCi stage_aZCj)
patRhsOpposite :: forall dom_aZCe stage_aZCf. Partial (Ann UPatSynRhs dom_aZCe stage_aZCf) (Ann UPatSynRhs dom_aZCe stage_aZCf) (AnnMaybeG UPatSynWhere dom_aZCe stage_aZCf) (AnnMaybeG UPatSynWhere dom_aZCe stage_aZCf)
patRhsPat :: forall dom_aZCe stage_aZCf. Lens (Ann UPatSynRhs dom_aZCe stage_aZCf) (Ann UPatSynRhs dom_aZCe stage_aZCf) (Ann UPattern dom_aZCe stage_aZCf) (Ann UPattern dom_aZCe stage_aZCf)
patSynRhs :: forall dom_aZCg stage_aZCh. Partial (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UName dom_aZCg stage_aZCh) (Ann UName dom_aZCg stage_aZCh)
patSynOp :: forall dom_aZCg stage_aZCh. Partial (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UOperator dom_aZCg stage_aZCh) (Ann UOperator dom_aZCg stage_aZCh)
patSynLhs :: forall dom_aZCg stage_aZCh. Partial (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UName dom_aZCg stage_aZCh) (Ann UName dom_aZCg stage_aZCh)
patName :: forall dom_aZCg stage_aZCh. Partial (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UName dom_aZCg stage_aZCh) (Ann UName dom_aZCg stage_aZCh)
patArgs :: forall dom_aZCg stage_aZCh. Partial (Ann UPatSynLhs dom_aZCg stage_aZCh) (Ann UPatSynLhs dom_aZCg stage_aZCh) (AnnListG UName dom_aZCg stage_aZCh) (AnnListG UName dom_aZCg stage_aZCh)
patOpposite :: forall dom_aZCc stage_aZCd dom'_a2d1d stage'_a2d1e. Lens (Ann UPatSynWhere dom_aZCc stage_aZCd) (Ann UPatSynWhere dom_aZCc stage_aZCd) (AnnListG UMatch dom_aZCc stage_aZCd) (AnnListG UMatch dom_aZCc stage_aZCd)
patSigType :: forall dom_aZCk stage_aZCl. Lens (Ann UPatternTypeSignature dom_aZCk stage_aZCl) (Ann UPatternTypeSignature dom_aZCk stage_aZCl) (Ann UType dom_aZCk stage_aZCl) (Ann UType dom_aZCk stage_aZCl)
patSigName :: forall dom_aZCk stage_aZCl. Lens (Ann UPatternTypeSignature dom_aZCk stage_aZCl) (Ann UPatternTypeSignature dom_aZCk stage_aZCl) (AnnListG UName dom_aZCk stage_aZCl) (AnnListG UName dom_aZCk stage_aZCl)
funDeps :: forall dom_aZCw stage_aZCx dom'_a2d5h stage'_a2d5i. Lens (Ann UFunDeps dom_aZCw stage_aZCx) (Ann UFunDeps dom_aZCw stage_aZCx) (AnnListG UFunDep dom_aZCw stage_aZCx) (AnnListG UFunDep dom_aZCw stage_aZCx)
funDepRhs :: forall dom_aZCu stage_aZCv. Lens (Ann UFunDep dom_aZCu stage_aZCv) (Ann UFunDep dom_aZCu stage_aZCv) (AnnListG UName dom_aZCu stage_aZCv) (AnnListG UName dom_aZCu stage_aZCv)
funDepLhs :: forall dom_aZCu stage_aZCv. Lens (Ann UFunDep dom_aZCu stage_aZCv) (Ann UFunDep dom_aZCu stage_aZCv) (AnnListG UName dom_aZCu stage_aZCv) (AnnListG UName dom_aZCu stage_aZCv)
conDeclRhs :: forall dom_aZCs stage_aZCt. Partial (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (Ann UType dom_aZCs stage_aZCt) (Ann UType dom_aZCs stage_aZCt)
conDeclOp :: forall dom_aZCs stage_aZCt. Partial (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (Ann UOperator dom_aZCs stage_aZCt) (Ann UOperator dom_aZCs stage_aZCt)
conDeclName :: forall dom_aZCs stage_aZCt. Partial (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (Ann UName dom_aZCs stage_aZCt) (Ann UName dom_aZCs stage_aZCt)
conDeclLhs :: forall dom_aZCs stage_aZCt. Partial (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (Ann UType dom_aZCs stage_aZCt) (Ann UType dom_aZCs stage_aZCt)
conDeclFields :: forall dom_aZCs stage_aZCt. Partial (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (AnnListG UFieldDecl dom_aZCs stage_aZCt) (AnnListG UFieldDecl dom_aZCs stage_aZCt)
conDeclArgs :: forall dom_aZCs stage_aZCt. Partial (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (AnnListG UType dom_aZCs stage_aZCt) (AnnListG UType dom_aZCs stage_aZCt)
conTypeCtx :: forall dom_aZCs stage_aZCt. Lens (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (AnnMaybeG UContext dom_aZCs stage_aZCt) (AnnMaybeG UContext dom_aZCs stage_aZCt)
conTypeArgs :: forall dom_aZCs stage_aZCt. Lens (Ann UConDecl dom_aZCs stage_aZCt) (Ann UConDecl dom_aZCs stage_aZCt) (AnnListG UTyVar dom_aZCs stage_aZCt) (AnnListG UTyVar dom_aZCs stage_aZCt)
fieldType :: forall dom_aZCq stage_aZCr. Lens (Ann UFieldDecl dom_aZCq stage_aZCr) (Ann UFieldDecl dom_aZCq stage_aZCr) (Ann UType dom_aZCq stage_aZCr) (Ann UType dom_aZCq stage_aZCr)
fieldNames :: forall dom_aZCq stage_aZCr. Lens (Ann UFieldDecl dom_aZCq stage_aZCr) (Ann UFieldDecl dom_aZCq stage_aZCr) (AnnListG UName dom_aZCq stage_aZCr) (AnnListG UName dom_aZCq stage_aZCr)
oneDerived :: forall dom_aZCo stage_aZCp. Partial (Ann UDeriving dom_aZCo stage_aZCp) (Ann UDeriving dom_aZCo stage_aZCp) (Ann UInstanceHead dom_aZCo stage_aZCp) (Ann UInstanceHead dom_aZCo stage_aZCp)
allDerived :: forall dom_aZCo stage_aZCp. Partial (Ann UDeriving dom_aZCo stage_aZCp) (Ann UDeriving dom_aZCo stage_aZCp) (AnnListG UInstanceHead dom_aZCo stage_aZCp) (AnnListG UInstanceHead dom_aZCo stage_aZCp)
deriveStrategy :: forall dom_aZCo stage_aZCp. Lens (Ann UDeriving dom_aZCo stage_aZCp) (Ann UDeriving dom_aZCo stage_aZCp) (AnnMaybeG UDeriveStrategy dom_aZCo stage_aZCp) (AnnMaybeG UDeriveStrategy dom_aZCo stage_aZCp)
irVars :: forall dom_aZCU stage_aZCV. Lens (Ann UInstanceRule dom_aZCU stage_aZCV) (Ann UInstanceRule dom_aZCU stage_aZCV) (AnnMaybeG (AnnListG UTyVar) dom_aZCU stage_aZCV) (AnnMaybeG (AnnListG UTyVar) dom_aZCU stage_aZCV)
irHead :: forall dom_aZCU stage_aZCV. Lens (Ann UInstanceRule dom_aZCU stage_aZCV) (Ann UInstanceRule dom_aZCU stage_aZCV) (Ann UInstanceHead dom_aZCU stage_aZCV) (Ann UInstanceHead dom_aZCU stage_aZCV)
irCtx :: forall dom_aZCU stage_aZCV. Lens (Ann UInstanceRule dom_aZCU stage_aZCV) (Ann UInstanceRule dom_aZCU stage_aZCV) (AnnMaybeG UContext dom_aZCU stage_aZCV) (AnnMaybeG UContext dom_aZCU stage_aZCV)
ihType :: forall dom_aZCS stage_aZCT. Partial (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UType dom_aZCS stage_aZCT) (Ann UType dom_aZCS stage_aZCT)
ihOperator :: forall dom_aZCS stage_aZCT. Partial (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UOperator dom_aZCS stage_aZCT) (Ann UOperator dom_aZCS stage_aZCT)
ihLeftOp :: forall dom_aZCS stage_aZCT. Partial (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UType dom_aZCS stage_aZCT) (Ann UType dom_aZCS stage_aZCT)
ihHead :: forall dom_aZCS stage_aZCT. Partial (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT)
ihFun :: forall dom_aZCS stage_aZCT. Partial (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT)
ihConName :: forall dom_aZCS stage_aZCT. Partial (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UInstanceHead dom_aZCS stage_aZCT) (Ann UName dom_aZCS stage_aZCT) (Ann UName dom_aZCS stage_aZCT)
teRhs :: forall dom_aZCE stage_aZCF. Lens (Ann UTypeEqn dom_aZCE stage_aZCF) (Ann UTypeEqn dom_aZCE stage_aZCF) (Ann UType dom_aZCE stage_aZCF) (Ann UType dom_aZCE stage_aZCF)
teLhs :: forall dom_aZCE stage_aZCF. Lens (Ann UTypeEqn dom_aZCE stage_aZCF) (Ann UTypeEqn dom_aZCE stage_aZCF) (Ann UType dom_aZCE stage_aZCF) (Ann UType dom_aZCE stage_aZCF)
ruleRhs :: forall dom_aZC0 stage_aZC1. Lens (Ann URule dom_aZC0 stage_aZC1) (Ann URule dom_aZC0 stage_aZC1) (Ann UExpr dom_aZC0 stage_aZC1) (Ann UExpr dom_aZC0 stage_aZC1)
rulePhase :: forall dom_aZC0 stage_aZC1. Lens (Ann URule dom_aZC0 stage_aZC1) (Ann URule dom_aZC0 stage_aZC1) (AnnMaybeG UPhaseControl dom_aZC0 stage_aZC1) (AnnMaybeG UPhaseControl dom_aZC0 stage_aZC1)
ruleName :: forall dom_aZC0 stage_aZC1. Lens (Ann URule dom_aZC0 stage_aZC1) (Ann URule dom_aZC0 stage_aZC1) (Ann UStringNode dom_aZC0 stage_aZC1) (Ann UStringNode dom_aZC0 stage_aZC1)
ruleLhs :: forall dom_aZC0 stage_aZC1. Lens (Ann URule dom_aZC0 stage_aZC1) (Ann URule dom_aZC0 stage_aZC1) (Ann UExpr dom_aZC0 stage_aZC1) (Ann UExpr dom_aZC0 stage_aZC1)
ruleBounded :: forall dom_aZC0 stage_aZC1. Lens (Ann URule dom_aZC0 stage_aZC1) (Ann URule dom_aZC0 stage_aZC1) (AnnListG URuleVar dom_aZC0 stage_aZC1) (AnnListG URuleVar dom_aZC0 stage_aZC1)
ruleVarType :: forall dom_aZBY stage_aZBZ. Partial (Ann URuleVar dom_aZBY stage_aZBZ) (Ann URuleVar dom_aZBY stage_aZBZ) (Ann UType dom_aZBY stage_aZBZ) (Ann UType dom_aZBY stage_aZBZ)
ruleVarName :: forall dom_aZBY stage_aZBZ. Lens (Ann URuleVar dom_aZBY stage_aZBZ) (Ann URuleVar dom_aZBY stage_aZBZ) (Ann UName dom_aZBY stage_aZBZ) (Ann UName dom_aZBY stage_aZBZ)
phaseUntil :: forall dom_aY3W stage_aY3X. Lens (Ann UPhaseControl dom_aY3W stage_aY3X) (Ann UPhaseControl dom_aY3W stage_aY3X) (AnnMaybeG PhaseInvert dom_aY3W stage_aY3X) (AnnMaybeG PhaseInvert dom_aY3W stage_aY3X)
phaseNumber :: forall dom_aY3W stage_aY3X. Lens (Ann UPhaseControl dom_aY3W stage_aY3X) (Ann UPhaseControl dom_aY3W stage_aY3X) (AnnMaybeG PhaseNumber dom_aY3W stage_aY3X) (AnnMaybeG PhaseNumber dom_aY3W stage_aY3X)
phaseNum :: forall dom_aY3U stage_aY3V. Lens (Ann PhaseNumber dom_aY3U stage_aY3V) (Ann PhaseNumber dom_aY3U stage_aY3V) Integer Integer
warnMessage :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (AnnListG UStringNode dom_aZC4 stage_aZC5) (AnnListG UStringNode dom_aZC4 stage_aZC5)
specializePragma :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann USpecializePragma dom_aZC4 stage_aZC5) (Ann USpecializePragma dom_aZC4 stage_aZC5)
pragmaSignature :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (AnnMaybeG UName dom_aZC4 stage_aZC5) (AnnMaybeG UName dom_aZC4 stage_aZC5)
pragmaRule :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (AnnListG URule dom_aZC4 stage_aZC5) (AnnListG URule dom_aZC4 stage_aZC5)
pragmaObjects :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (AnnListG UName dom_aZC4 stage_aZC5) (AnnListG UName dom_aZC4 stage_aZC5)
pragmaLineNum :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann LineNumber dom_aZC4 stage_aZC5) (Ann LineNumber dom_aZC4 stage_aZC5)
pragmaInline :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UInlinePragma dom_aZC4 stage_aZC5) (Ann UInlinePragma dom_aZC4 stage_aZC5)
pragmaFileName :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (AnnMaybeG UStringNode dom_aZC4 stage_aZC5) (AnnMaybeG UStringNode dom_aZC4 stage_aZC5)
deprMessage :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (AnnListG UStringNode dom_aZC4 stage_aZC5) (AnnListG UStringNode dom_aZC4 stage_aZC5)
annotationSubject :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UAnnotationSubject dom_aZC4 stage_aZC5) (Ann UAnnotationSubject dom_aZC4 stage_aZC5)
annotateExpr :: forall dom_aZC4 stage_aZC5. Partial (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UTopLevelPragma dom_aZC4 stage_aZC5) (Ann UExpr dom_aZC4 stage_aZC5) (Ann UExpr dom_aZC4 stage_aZC5)
annotateName :: forall dom_aZBW stage_aZBX dom'_a2evP stage'_a2evQ. Partial (Ann UAnnotationSubject dom_aZBW stage_aZBX) (Ann UAnnotationSubject dom_aZBW stage_aZBX) (Ann UName dom_aZBW stage_aZBX) (Ann UName dom_aZBW stage_aZBX)
minimalOrs :: forall dom_aZBU stage_aZBV. Partial (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UMinimalFormula dom_aZBU stage_aZBV) (AnnListG UMinimalFormula dom_aZBU stage_aZBV) (AnnListG UMinimalFormula dom_aZBU stage_aZBV)
minimalName :: forall dom_aZBU stage_aZBV. Partial (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UName dom_aZBU stage_aZBV) (Ann UName dom_aZBU stage_aZBV)
minimalInner :: forall dom_aZBU stage_aZBV. Partial (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UMinimalFormula dom_aZBU stage_aZBV)
minimalAnds :: forall dom_aZBU stage_aZBV. Partial (Ann UMinimalFormula dom_aZBU stage_aZBV) (Ann UMinimalFormula dom_aZBU stage_aZBV) (AnnListG UMinimalFormula dom_aZBU stage_aZBV) (AnnListG UMinimalFormula dom_aZBU stage_aZBV)
srToLine :: forall dom_aUR9 stage_aURa. Lens (Ann USourceRange dom_aUR9 stage_aURa) (Ann USourceRange dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa)
srToCol :: forall dom_aUR9 stage_aURa. Lens (Ann USourceRange dom_aUR9 stage_aURa) (Ann USourceRange dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa)
srFromLine :: forall dom_aUR9 stage_aURa. Lens (Ann USourceRange dom_aUR9 stage_aURa) (Ann USourceRange dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa)
srFromCol :: forall dom_aUR9 stage_aURa. Lens (Ann USourceRange dom_aUR9 stage_aURa) (Ann USourceRange dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa) (Ann Number dom_aUR9 stage_aURa)
srFileName :: forall dom_aUR9 stage_aURa. Lens (Ann USourceRange dom_aUR9 stage_aURa) (Ann USourceRange dom_aUR9 stage_aURa) (Ann UStringNode dom_aUR9 stage_aURa) (Ann UStringNode dom_aUR9 stage_aURa)
numberInteger :: forall dom_aUR7 stage_aUR8. Lens (Ann Number dom_aUR7 stage_aUR8) (Ann Number dom_aUR7 stage_aUR8) Integer Integer
specializeType :: forall dom_aZC2 stage_aZC3. Lens (Ann USpecializePragma dom_aZC2 stage_aZC3) (Ann USpecializePragma dom_aZC2 stage_aZC3) (AnnListG UType dom_aZC2 stage_aZC3) (AnnListG UType dom_aZC2 stage_aZC3)
specializeDef :: forall dom_aZC2 stage_aZC3. Lens (Ann USpecializePragma dom_aZC2 stage_aZC3) (Ann USpecializePragma dom_aZC2 stage_aZC3) (Ann UName dom_aZC2 stage_aZC3) (Ann UName dom_aZC2 stage_aZC3)
pragmaPhase :: forall dom_aZC2 stage_aZC3. Lens (Ann USpecializePragma dom_aZC2 stage_aZC3) (Ann USpecializePragma dom_aZC2 stage_aZC3) (AnnMaybeG UPhaseControl dom_aZC2 stage_aZC3) (AnnMaybeG UPhaseControl dom_aZC2 stage_aZC3)
matchRhs :: forall dom_aY4m stage_aY4n. Lens (Ann UMatch dom_aY4m stage_aY4n) (Ann UMatch dom_aY4m stage_aY4n) (Ann URhs dom_aY4m stage_aY4n) (Ann URhs dom_aY4m stage_aY4n)
matchLhs :: forall dom_aY4m stage_aY4n. Lens (Ann UMatch dom_aY4m stage_aY4n) (Ann UMatch dom_aY4m stage_aY4n) (Ann UMatchLhs dom_aY4m stage_aY4n) (Ann UMatchLhs dom_aY4m stage_aY4n)
matchBinds :: forall dom_aY4m stage_aY4n. Lens (Ann UMatch dom_aY4m stage_aY4n) (Ann UMatch dom_aY4m stage_aY4n) (AnnMaybeG ULocalBinds dom_aY4m stage_aY4n) (AnnMaybeG ULocalBinds dom_aY4m stage_aY4n)
rhsGuards :: forall dom_aY46 stage_aY47. Partial (Ann URhs dom_aY46 stage_aY47) (Ann URhs dom_aY46 stage_aY47) (AnnListG UGuardedRhs dom_aY46 stage_aY47) (AnnListG UGuardedRhs dom_aY46 stage_aY47)
rhsExpr :: forall dom_aY46 stage_aY47. Partial (Ann URhs dom_aY46 stage_aY47) (Ann URhs dom_aY46 stage_aY47) (Ann UExpr dom_aY46 stage_aY47) (Ann UExpr dom_aY46 stage_aY47)
guardStmts :: forall dom_aY44 stage_aY45. Lens (Ann UGuardedRhs dom_aY44 stage_aY45) (Ann UGuardedRhs dom_aY44 stage_aY45) (AnnListG URhsGuard dom_aY44 stage_aY45) (AnnListG URhsGuard dom_aY44 stage_aY45)
guardExpr :: forall dom_aY44 stage_aY45. Lens (Ann UGuardedRhs dom_aY44 stage_aY45) (Ann UGuardedRhs dom_aY44 stage_aY45) (Ann UExpr dom_aY44 stage_aY45) (Ann UExpr dom_aY44 stage_aY45)
guardRhs :: forall dom_aY42 stage_aY43. Partial (Ann URhsGuard dom_aY42 stage_aY43) (Ann URhsGuard dom_aY42 stage_aY43) (Ann UExpr dom_aY42 stage_aY43) (Ann UExpr dom_aY42 stage_aY43)
guardPat :: forall dom_aY42 stage_aY43. Partial (Ann URhsGuard dom_aY42 stage_aY43) (Ann URhsGuard dom_aY42 stage_aY43) (Ann UPattern dom_aY42 stage_aY43) (Ann UPattern dom_aY42 stage_aY43)
guardCheck :: forall dom_aY42 stage_aY43. Partial (Ann URhsGuard dom_aY42 stage_aY43) (Ann URhsGuard dom_aY42 stage_aY43) (Ann UExpr dom_aY42 stage_aY43) (Ann UExpr dom_aY42 stage_aY43)
guardBinds :: forall dom_aY42 stage_aY43. Partial (Ann URhsGuard dom_aY42 stage_aY43) (Ann URhsGuard dom_aY42 stage_aY43) (AnnListG ULocalBind dom_aY42 stage_aY43) (AnnListG ULocalBind dom_aY42 stage_aY43)
localVal :: forall dom_aY4g stage_aY4h. Partial (Ann ULocalBind dom_aY4g stage_aY4h) (Ann ULocalBind dom_aY4g stage_aY4h) (Ann UValueBind dom_aY4g stage_aY4h) (Ann UValueBind dom_aY4g stage_aY4h)
localSig :: forall dom_aY4g stage_aY4h. Partial (Ann ULocalBind dom_aY4g stage_aY4h) (Ann ULocalBind dom_aY4g stage_aY4h) (Ann UTypeSignature dom_aY4g stage_aY4h) (Ann UTypeSignature dom_aY4g stage_aY4h)
localInline :: forall dom_aY4g stage_aY4h. Partial (Ann ULocalBind dom_aY4g stage_aY4h) (Ann ULocalBind dom_aY4g stage_aY4h) (Ann UInlinePragma dom_aY4g stage_aY4h) (Ann UInlinePragma dom_aY4g stage_aY4h)
localFixity :: forall dom_aY4g stage_aY4h. Partial (Ann ULocalBind dom_aY4g stage_aY4h) (Ann ULocalBind dom_aY4g stage_aY4h) (Ann UFixitySignature dom_aY4g stage_aY4h) (Ann UFixitySignature dom_aY4g stage_aY4h)
localBinds :: forall dom_aY4i stage_aY4j dom'_a2fj5 stage'_a2fj6. Lens (Ann ULocalBinds dom_aY4i stage_aY4j) (Ann ULocalBinds dom_aY4i stage_aY4j) (AnnListG ULocalBind dom_aY4i stage_aY4j) (AnnListG ULocalBind dom_aY4i stage_aY4j)
fixityPrecedence :: forall dom_aY4c stage_aY4d. Lens (Ann UFixitySignature dom_aY4c stage_aY4d) (Ann UFixitySignature dom_aY4c stage_aY4d) (AnnMaybeG Precedence dom_aY4c stage_aY4d) (AnnMaybeG Precedence dom_aY4c stage_aY4d)
fixityOperators :: forall dom_aY4c stage_aY4d. Lens (Ann UFixitySignature dom_aY4c stage_aY4d) (Ann UFixitySignature dom_aY4c stage_aY4d) (AnnListG UOperator dom_aY4c stage_aY4d) (AnnListG UOperator dom_aY4c stage_aY4d)
fixityAssoc :: forall dom_aY4c stage_aY4d. Lens (Ann UFixitySignature dom_aY4c stage_aY4d) (Ann UFixitySignature dom_aY4c stage_aY4d) (Ann Assoc dom_aY4c stage_aY4d) (Ann Assoc dom_aY4c stage_aY4d)
precedenceValue :: forall dom_aY48 stage_aY49. Lens (Ann Precedence dom_aY48 stage_aY49) (Ann Precedence dom_aY48 stage_aY49) Int Int
tsType :: forall dom_aY4e stage_aY4f. Lens (Ann UTypeSignature dom_aY4e stage_aY4f) (Ann UTypeSignature dom_aY4e stage_aY4f) (Ann UType dom_aY4e stage_aY4f) (Ann UType dom_aY4e stage_aY4f)
tsName :: forall dom_aY4e stage_aY4f. Lens (Ann UTypeSignature dom_aY4e stage_aY4f) (Ann UTypeSignature dom_aY4e stage_aY4f) (AnnListG UName dom_aY4e stage_aY4f) (AnnListG UName dom_aY4e stage_aY4f)
matchLhsRhs :: forall dom_aY4k stage_aY4l. Partial (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UPattern dom_aY4k stage_aY4l) (Ann UPattern dom_aY4k stage_aY4l)
matchLhsOperator :: forall dom_aY4k stage_aY4l. Partial (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UOperator dom_aY4k stage_aY4l) (Ann UOperator dom_aY4k stage_aY4l)
matchLhsName :: forall dom_aY4k stage_aY4l. Partial (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UName dom_aY4k stage_aY4l) (Ann UName dom_aY4k stage_aY4l)
matchLhsLhs :: forall dom_aY4k stage_aY4l. Partial (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UPattern dom_aY4k stage_aY4l) (Ann UPattern dom_aY4k stage_aY4l)
matchLhsArgs :: forall dom_aY4k stage_aY4l. Lens (Ann UMatchLhs dom_aY4k stage_aY4l) (Ann UMatchLhs dom_aY4k stage_aY4l) (AnnListG UPattern dom_aY4k stage_aY4l) (AnnListG UPattern dom_aY4k stage_aY4l)
kindConstr :: forall dom_aRul stage_aRum dom'_a2fBv stage'_a2fBw. Lens (Ann UKindConstraint dom_aRul stage_aRum) (Ann UKindConstraint dom_aRul stage_aRum) (Ann UKind dom_aRul stage_aRum) (Ann UKind dom_aRul stage_aRum)
valBindRhs :: forall dom_aY4o stage_aY4p. Partial (Ann UValueBind dom_aY4o stage_aY4p) (Ann UValueBind dom_aY4o stage_aY4p) (Ann URhs dom_aY4o stage_aY4p) (Ann URhs dom_aY4o stage_aY4p)
valBindPat :: forall dom_aY4o stage_aY4p. Partial (Ann UValueBind dom_aY4o stage_aY4p) (Ann UValueBind dom_aY4o stage_aY4p) (Ann UPattern dom_aY4o stage_aY4p) (Ann UPattern dom_aY4o stage_aY4p)
valBindLocals :: forall dom_aY4o stage_aY4p. Partial (Ann UValueBind dom_aY4o stage_aY4p) (Ann UValueBind dom_aY4o stage_aY4p) (AnnMaybeG ULocalBinds dom_aY4o stage_aY4p) (AnnMaybeG ULocalBinds dom_aY4o stage_aY4p)
funBindMatches :: forall dom_aY4o stage_aY4p. Partial (Ann UValueBind dom_aY4o stage_aY4p) (Ann UValueBind dom_aY4o stage_aY4p) (AnnListG UMatch dom_aY4o stage_aY4p) (AnnListG UMatch dom_aY4o stage_aY4p)
tyVarName :: forall dom_aSei stage_aSej. Lens (Ann UTyVar dom_aSei stage_aSej) (Ann UTyVar dom_aSei stage_aSej) (Ann UName dom_aSei stage_aSej) (Ann UName dom_aSei stage_aSej)
tyVarKind :: forall dom_aSei stage_aSej. Lens (Ann UTyVar dom_aSei stage_aSej) (Ann UTyVar dom_aSei stage_aSej) (AnnMaybeG UKindConstraint dom_aSei stage_aSej) (AnnMaybeG UKindConstraint dom_aSei stage_aSej)
typeWildcardName :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UName dom_aSeg stage_aSeh) (Ann UName dom_aSeg stage_aSeh)
typeType :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeRight :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeResult :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeQQ :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UQuasiQuote dom_aSeg stage_aSeh) (Ann UQuasiQuote dom_aSeg stage_aSeh)
typeParam :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeOperator :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UOperator dom_aSeg stage_aSeh) (Ann UOperator dom_aSeg stage_aSeh)
typeName :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UName dom_aSeg stage_aSeh) (Ann UName dom_aSeg stage_aSeh)
typeLeft :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeKind :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UKind dom_aSeg stage_aSeh) (Ann UKind dom_aSeg stage_aSeh)
typeInner :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeElements :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (AnnListG UType dom_aSeg stage_aSeh) (AnnListG UType dom_aSeg stage_aSeh)
typeElement :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeCtx :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UContext dom_aSeg stage_aSeh) (Ann UContext dom_aSeg stage_aSeh)
typeCon :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
typeBounded :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (AnnListG UTyVar dom_aSeg stage_aSeh) (AnnListG UTyVar dom_aSeg stage_aSeh)
typeArg :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh)
tsSplice :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann USplice dom_aSeg stage_aSeh) (Ann USplice dom_aSeg stage_aSeh)
tpPromoted :: forall dom_aSeg stage_aSeh. Partial (Ann UType dom_aSeg stage_aSeh) (Ann UType dom_aSeg stage_aSeh) (Ann (UPromoted UType) dom_aSeg stage_aSeh) (Ann (UPromoted UType) dom_aSeg stage_aSeh)
kindVar :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UName dom_aRuj stage_aRuk) (Ann UName dom_aRuj stage_aRuk)
kindType :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UType dom_aRuj stage_aRuk) (Ann UType dom_aRuj stage_aRuk)
kindRight :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindRhs :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindPromoted :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann (UPromoted UKind) dom_aRuj stage_aRuk) (Ann (UPromoted UKind) dom_aRuj stage_aRuk)
kindParen :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindLhs :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindLeft :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindElems :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (AnnListG UKind dom_aRuj stage_aRuk) (AnnListG UKind dom_aRuj stage_aRuk)
kindElem :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindAppOp :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UOperator dom_aRuj stage_aRuk) (Ann UOperator dom_aRuj stage_aRuk)
kindAppFun :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
kindAppArg :: forall dom_aRuj stage_aRuk. Partial (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk) (Ann UKind dom_aRuj stage_aRuk)
contextAssertion :: forall dom_aSee stage_aSef dom'_a2hwi stage'_a2hwj. Lens (Ann UContext dom_aSee stage_aSef) (Ann UContext dom_aSee stage_aSef) (Ann UAssertion dom_aSee stage_aSef) (Ann UAssertion dom_aSee stage_aSef)
innerAsserts :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (AnnListG UAssertion dom_aSec stage_aSed) (AnnListG UAssertion dom_aSec stage_aSed)
assertTypes :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (AnnListG UType dom_aSec stage_aSed) (AnnListG UType dom_aSec stage_aSed)
assertRhs :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (Ann UType dom_aSec stage_aSed) (Ann UType dom_aSec stage_aSed)
assertOp :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (Ann UOperator dom_aSec stage_aSed) (Ann UOperator dom_aSec stage_aSed)
assertLhs :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (Ann UType dom_aSec stage_aSed) (Ann UType dom_aSec stage_aSed)
assertImplVar :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (Ann UName dom_aSec stage_aSed) (Ann UName dom_aSec stage_aSed)
assertImplType :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (Ann UType dom_aSec stage_aSed) (Ann UType dom_aSec stage_aSed)
assertClsName :: forall dom_aSec stage_aSed. Partial (Ann UAssertion dom_aSec stage_aSed) (Ann UAssertion dom_aSec stage_aSed) (Ann UName dom_aSec stage_aSed) (Ann UName dom_aSec stage_aSed)
tupleSectionElems :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UTupSecElem dom_aURs stage_aURt) (AnnListG UTupSecElem dom_aURs stage_aURt)
tupleElems :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UExpr dom_aURs stage_aURt) (AnnListG UExpr dom_aURs stage_aURt)
quotedName :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UName dom_aURs stage_aURt) (Ann UName dom_aURs stage_aURt)
procPattern :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UPattern dom_aURs stage_aURt) (Ann UPattern dom_aURs stage_aURt)
procExpr :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UCmd dom_aURs stage_aURt) (Ann UCmd dom_aURs stage_aURt)
listElems :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UExpr dom_aURs stage_aURt) (AnnListG UExpr dom_aURs stage_aURt)
innerExpr :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprType :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UType dom_aURs stage_aURt) (Ann UType dom_aURs stage_aURt)
exprThen :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprSumPlaceholdersBefore :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UUnboxedSumPlaceHolder dom_aURs stage_aURt) (AnnListG UUnboxedSumPlaceHolder dom_aURs stage_aURt)
exprSumPlaceholdersAfter :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UUnboxedSumPlaceHolder dom_aURs stage_aURt) (AnnListG UUnboxedSumPlaceHolder dom_aURs stage_aURt)
exprStmts :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UStmt dom_aURs stage_aURt) (AnnListG UStmt dom_aURs stage_aURt)
exprSplice :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann USplice dom_aURs stage_aURt) (Ann USplice dom_aURs stage_aURt)
exprSig :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UType dom_aURs stage_aURt) (Ann UType dom_aURs stage_aURt)
exprRhs :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprRecName :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UName dom_aURs stage_aURt) (Ann UName dom_aURs stage_aURt)
exprRecFields :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UFieldUpdate dom_aURs stage_aURt) (AnnListG UFieldUpdate dom_aURs stage_aURt)
exprQQ :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UQuasiQuote dom_aURs stage_aURt) (Ann UQuasiQuote dom_aURs stage_aURt)
exprPragma :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExprPragma dom_aURs stage_aURt) (Ann UExprPragma dom_aURs stage_aURt)
exprOperator :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UOperator dom_aURs stage_aURt) (Ann UOperator dom_aURs stage_aURt)
exprName :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UName dom_aURs stage_aURt) (Ann UName dom_aURs stage_aURt)
exprLit :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann ULiteral dom_aURs stage_aURt) (Ann ULiteral dom_aURs stage_aURt)
exprLhs :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprInner :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprIfAlts :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UGuardedCaseRhs dom_aURs stage_aURt) (AnnListG UGuardedCaseRhs dom_aURs stage_aURt)
exprFunBind :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG ULocalBind dom_aURs stage_aURt) (AnnListG ULocalBind dom_aURs stage_aURt)
exprFun :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprElse :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprCond :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprCase :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprBracket :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UBracket dom_aURs stage_aURt) (Ann UBracket dom_aURs stage_aURt)
exprBindings :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UPattern dom_aURs stage_aURt) (AnnListG UPattern dom_aURs stage_aURt)
exprArg :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
exprAlts :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UAlt dom_aURs stage_aURt) (AnnListG UAlt dom_aURs stage_aURt)
enumToFix :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
enumTo :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnMaybeG UExpr dom_aURs stage_aURt) (AnnMaybeG UExpr dom_aURs stage_aURt)
enumThen :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnMaybeG UExpr dom_aURs stage_aURt) (AnnMaybeG UExpr dom_aURs stage_aURt)
enumFrom :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
doKind :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UDoKind dom_aURs stage_aURt) (Ann UDoKind dom_aURs stage_aURt)
compExpr :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt)
compBody :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (AnnListG UListCompBody dom_aURs stage_aURt) (AnnListG UListCompBody dom_aURs stage_aURt)
arrowAppl :: forall dom_aURs stage_aURt. Partial (Ann UExpr dom_aURs stage_aURt) (Ann UExpr dom_aURs stage_aURt) (Ann UArrowAppl dom_aURs stage_aURt) (Ann UArrowAppl dom_aURs stage_aURt)
altRhs :: forall expr_aURj dom_aURk stage_aURl expr'_a2lB2. Lens (Ann (UAlt' expr_aURj) dom_aURk stage_aURl) (Ann (UAlt' expr_aURj) dom_aURk stage_aURl) (Ann (UCaseRhs' expr_aURj) dom_aURk stage_aURl) (Ann (UCaseRhs' expr_aURj) dom_aURk stage_aURl)
altPattern :: forall expr_aURj dom_aURk stage_aURl. Lens (Ann (UAlt' expr_aURj) dom_aURk stage_aURl) (Ann (UAlt' expr_aURj) dom_aURk stage_aURl) (Ann UPattern dom_aURk stage_aURl) (Ann UPattern dom_aURk stage_aURl)
altBinds :: forall expr_aURj dom_aURk stage_aURl. Lens (Ann (UAlt' expr_aURj) dom_aURk stage_aURl) (Ann (UAlt' expr_aURj) dom_aURk stage_aURl) (AnnMaybeG ULocalBinds dom_aURk stage_aURl) (AnnMaybeG ULocalBinds dom_aURk stage_aURl)
fieldWildcard :: forall dom_aURq stage_aURr. Partial (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UFieldWildcard dom_aURq stage_aURr) (Ann UFieldWildcard dom_aURq stage_aURr)
fieldValue :: forall dom_aURq stage_aURr. Partial (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UExpr dom_aURq stage_aURr) (Ann UExpr dom_aURq stage_aURr)
fieldUpdateName :: forall dom_aURq stage_aURr. Partial (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UName dom_aURq stage_aURr) (Ann UName dom_aURq stage_aURr)
fieldName :: forall dom_aURq stage_aURr. Partial (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UFieldUpdate dom_aURq stage_aURr) (Ann UName dom_aURq stage_aURr) (Ann UName dom_aURq stage_aURr)
tupSecExpr :: forall dom_aURm stage_aURn dom'_a2lNm stage'_a2lNn. Partial (Ann UTupSecElem dom_aURm stage_aURn) (Ann UTupSecElem dom_aURm stage_aURn) (Ann UExpr dom_aURm stage_aURn) (Ann UExpr dom_aURm stage_aURn)
pragmaStr :: forall dom_aURb stage_aURc. Partial (Ann UExprPragma dom_aURb stage_aURc) (Ann UExprPragma dom_aURb stage_aURc) (Ann UStringNode dom_aURb stage_aURc) (Ann UStringNode dom_aURb stage_aURc)
pragmaSrcRange :: forall dom_aURb stage_aURc. Partial (Ann UExprPragma dom_aURb stage_aURc) (Ann UExprPragma dom_aURb stage_aURc) (Ann USourceRange dom_aURb stage_aURc) (Ann USourceRange dom_aURb stage_aURc)
rhsCaseGuards :: forall expr_aURg dom_aURh stage_aURi. Partial (Ann (UCaseRhs' expr_aURg) dom_aURh stage_aURi) (Ann (UCaseRhs' expr_aURg) dom_aURh stage_aURi) (AnnListG (UGuardedCaseRhs' expr_aURg) dom_aURh stage_aURi) (AnnListG (UGuardedCaseRhs' expr_aURg) dom_aURh stage_aURi)
rhsCaseExpr :: forall expr_aURg dom_aURh stage_aURi. Partial (Ann (UCaseRhs' expr_aURg) dom_aURh stage_aURi) (Ann (UCaseRhs' expr_aURg) dom_aURh stage_aURi) (Ann expr_aURg dom_aURh stage_aURi) (Ann expr_aURg dom_aURh stage_aURi)
caseGuardStmts :: forall expr_aURd dom_aURe stage_aURf. Lens (Ann (UGuardedCaseRhs' expr_aURd) dom_aURe stage_aURf) (Ann (UGuardedCaseRhs' expr_aURd) dom_aURe stage_aURf) (AnnListG URhsGuard dom_aURe stage_aURf) (AnnListG URhsGuard dom_aURe stage_aURf)
caseGuardExpr :: forall expr_aURd dom_aURe stage_aURf expr'_a2lYf. Lens (Ann (UGuardedCaseRhs' expr_aURd) dom_aURe stage_aURf) (Ann (UGuardedCaseRhs' expr_aURd) dom_aURe stage_aURf) (Ann expr_aURd dom_aURe stage_aURf) (Ann expr_aURd dom_aURe stage_aURf)
stmtPattern :: forall expr_aUnx dom_aUny stage_aUnz. Partial (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (Ann UPattern dom_aUny stage_aUnz) (Ann UPattern dom_aUny stage_aUnz)
stmtExpr :: forall expr_aUnx dom_aUny stage_aUnz. Partial (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (Ann expr_aUnx dom_aUny stage_aUnz) (Ann expr_aUnx dom_aUny stage_aUnz)
stmtBinds :: forall expr_aUnx dom_aUny stage_aUnz. Partial (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (AnnListG ULocalBind dom_aUny stage_aUnz) (AnnListG ULocalBind dom_aUny stage_aUnz)
cmdStmtBinds :: forall expr_aUnx dom_aUny stage_aUnz. Partial (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (Ann (UStmt' expr_aUnx) dom_aUny stage_aUnz) (AnnListG (UStmt' expr_aUnx) dom_aUny stage_aUnz) (AnnListG (UStmt' expr_aUnx) dom_aUny stage_aUnz)
usingExpr :: forall dom_aUnt stage_aUnu. Partial (Ann UCompStmt dom_aUnt stage_aUnu) (Ann UCompStmt dom_aUnt stage_aUnu) (AnnMaybeG UExpr dom_aUnt stage_aUnu) (AnnMaybeG UExpr dom_aUnt stage_aUnu)
thenExpr :: forall dom_aUnt stage_aUnu. Partial (Ann UCompStmt dom_aUnt stage_aUnu) (Ann UCompStmt dom_aUnt stage_aUnu) (Ann UExpr dom_aUnt stage_aUnu) (Ann UExpr dom_aUnt stage_aUnu)
compStmt :: forall dom_aUnt stage_aUnu. Partial (Ann UCompStmt dom_aUnt stage_aUnu) (Ann UCompStmt dom_aUnt stage_aUnu) (Ann UStmt dom_aUnt stage_aUnu) (Ann UStmt dom_aUnt stage_aUnu)
byExpr :: forall dom_aUnt stage_aUnu. Partial (Ann UCompStmt dom_aUnt stage_aUnu) (Ann UCompStmt dom_aUnt stage_aUnu) (AnnMaybeG UExpr dom_aUnt stage_aUnu) (AnnMaybeG UExpr dom_aUnt stage_aUnu)
compStmts :: forall dom_aUnv stage_aUnw dom'_a2mj7 stage'_a2mj8. Lens (Ann UListCompBody dom_aUnv stage_aUnw) (Ann UListCompBody dom_aUnv stage_aUnw) (AnnListG UCompStmt dom_aUnv stage_aUnw) (AnnListG UCompStmt dom_aUnv stage_aUnw)
cmdThen :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6)
cmdStmts :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (AnnListG UCmdStmt dom_aUR5 stage_aUR6) (AnnListG UCmdStmt dom_aUR5 stage_aUR6)
cmdRightCmd :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6)
cmdRhs :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6)
cmdOperator :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UName dom_aUR5 stage_aUR6) (Ann UName dom_aUR5 stage_aUR6)
cmdLhs :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6)
cmdLeftCmd :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6)
cmdInnerCmds :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (AnnListG UCmd dom_aUR5 stage_aUR6) (AnnListG UCmd dom_aUR5 stage_aUR6)
cmdInnerCmd :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6)
cmdInner :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6)
cmdExpr :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6)
cmdElse :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6)
cmdBinds :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (AnnListG ULocalBind dom_aUR5 stage_aUR6) (AnnListG ULocalBind dom_aUR5 stage_aUR6)
cmdBindings :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (AnnListG UPattern dom_aUR5 stage_aUR6) (AnnListG UPattern dom_aUR5 stage_aUR6)
cmdArrowOp :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UArrowAppl dom_aUR5 stage_aUR6) (Ann UArrowAppl dom_aUR5 stage_aUR6)
cmdApplied :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6) (Ann UExpr dom_aUR5 stage_aUR6)
cmdAlts :: forall dom_aUR5 stage_aUR6. Partial (Ann UCmd dom_aUR5 stage_aUR6) (Ann UCmd dom_aUR5 stage_aUR6) (AnnListG UCmdAlt dom_aUR5 stage_aUR6) (AnnListG UCmdAlt dom_aUR5 stage_aUR6)
patternType :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UType dom_aTrR stage_aTrS) (Ann UType dom_aTrR stage_aTrS)
patternSumPlaceholdersBefore :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (AnnListG UUnboxedSumPlaceHolder dom_aTrR stage_aTrS) (AnnListG UUnboxedSumPlaceHolder dom_aTrR stage_aTrS)
patternSumPlaceholdersAfter :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (AnnListG UUnboxedSumPlaceHolder dom_aTrR stage_aTrS) (AnnListG UUnboxedSumPlaceHolder dom_aTrR stage_aTrS)
patternSplice :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann USplice dom_aTrR stage_aTrS) (Ann USplice dom_aTrR stage_aTrS)
patternRhs :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS)
patternOperator :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UOperator dom_aTrR stage_aTrS) (Ann UOperator dom_aTrR stage_aTrS)
patternName :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UName dom_aTrR stage_aTrS) (Ann UName dom_aTrR stage_aTrS)
patternLiteral :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann ULiteral dom_aTrR stage_aTrS) (Ann ULiteral dom_aTrR stage_aTrS)
patternLit :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann ULiteral dom_aTrR stage_aTrS) (Ann ULiteral dom_aTrR stage_aTrS)
patternLhs :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS)
patternInner :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS)
patternFields :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (AnnListG UPatternField dom_aTrR stage_aTrS) (AnnListG UPatternField dom_aTrR stage_aTrS)
patternExpr :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UExpr dom_aTrR stage_aTrS) (Ann UExpr dom_aTrR stage_aTrS)
patternElems :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (AnnListG UPattern dom_aTrR stage_aTrS) (AnnListG UPattern dom_aTrR stage_aTrS)
patternArgs :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (AnnListG UPattern dom_aTrR stage_aTrS) (AnnListG UPattern dom_aTrR stage_aTrS)
patQQ :: forall dom_aTrR stage_aTrS. Partial (Ann UPattern dom_aTrR stage_aTrS) (Ann UPattern dom_aTrR stage_aTrS) (Ann UQuasiQuote dom_aTrR stage_aTrS) (Ann UQuasiQuote dom_aTrR stage_aTrS)
fieldPatternWildcard :: forall dom_aTrP stage_aTrQ. Partial (Ann UPatternField dom_aTrP stage_aTrQ) (Ann UPatternField dom_aTrP stage_aTrQ) (Ann UFieldWildcard dom_aTrP stage_aTrQ) (Ann UFieldWildcard dom_aTrP stage_aTrQ)
fieldPatternName :: forall dom_aTrP stage_aTrQ. Partial (Ann UPatternField dom_aTrP stage_aTrQ) (Ann UPatternField dom_aTrP stage_aTrQ) (Ann UName dom_aTrP stage_aTrQ) (Ann UName dom_aTrP stage_aTrQ)
fieldPattern :: forall dom_aTrP stage_aTrQ. Partial (Ann UPatternField dom_aTrP stage_aTrQ) (Ann UPatternField dom_aTrP stage_aTrQ) (Ann UPattern dom_aTrP stage_aTrQ) (Ann UPattern dom_aTrP stage_aTrQ)
spliceId :: forall dom_a15ef stage_a15eg. Partial (Ann USplice dom_a15ef stage_a15eg) (Ann USplice dom_a15ef stage_a15eg) (Ann UName dom_a15ef stage_a15eg) (Ann UName dom_a15ef stage_a15eg)
spliceExpr :: forall dom_a15ef stage_a15eg. Partial (Ann USplice dom_a15ef stage_a15eg) (Ann USplice dom_a15ef stage_a15eg) (Ann UExpr dom_a15ef stage_a15eg) (Ann UExpr dom_a15ef stage_a15eg)
qqExprName :: forall dom_a15ed stage_a15ee. Lens (Ann UQuasiQuote dom_a15ed stage_a15ee) (Ann UQuasiQuote dom_a15ed stage_a15ee) (Ann UName dom_a15ed stage_a15ee) (Ann UName dom_a15ed stage_a15ee)
qqExprBody :: forall dom_a15ed stage_a15ee. Lens (Ann UQuasiQuote dom_a15ed stage_a15ee) (Ann UQuasiQuote dom_a15ed stage_a15ee) (Ann QQString dom_a15ed stage_a15ee) (Ann QQString dom_a15ed stage_a15ee)
qqString :: forall dom_a15eb stage_a15ec. Lens (Ann QQString dom_a15eb stage_a15ec) (Ann QQString dom_a15eb stage_a15ec) String String
bracketType :: forall dom_a15e9 stage_a15ea. Partial (Ann UBracket dom_a15e9 stage_a15ea) (Ann UBracket dom_a15e9 stage_a15ea) (Ann UType dom_a15e9 stage_a15ea) (Ann UType dom_a15e9 stage_a15ea)
bracketPattern :: forall dom_a15e9 stage_a15ea. Partial (Ann UBracket dom_a15e9 stage_a15ea) (Ann UBracket dom_a15e9 stage_a15ea) (Ann UPattern dom_a15e9 stage_a15ea) (Ann UPattern dom_a15e9 stage_a15ea)
bracketExpr :: forall dom_a15e9 stage_a15ea. Partial (Ann UBracket dom_a15e9 stage_a15ea) (Ann UBracket dom_a15e9 stage_a15ea) (Ann UExpr dom_a15e9 stage_a15ea) (Ann UExpr dom_a15e9 stage_a15ea)
bracketDecl :: forall dom_a15e9 stage_a15ea. Partial (Ann UBracket dom_a15e9 stage_a15ea) (Ann UBracket dom_a15e9 stage_a15ea) (AnnListG UDecl dom_a15e9 stage_a15ea) (AnnListG UDecl dom_a15e9 stage_a15ea)
stringLitValue :: forall dom_a9yZ stage_a9z0. Partial (Ann ULiteral dom_a9yZ stage_a9z0) (Ann ULiteral dom_a9yZ stage_a9z0) String String
intLitValue :: forall dom_a9yZ stage_a9z0. Partial (Ann ULiteral dom_a9yZ stage_a9z0) (Ann ULiteral dom_a9yZ stage_a9z0) Integer Integer
fracLitValue :: forall dom_a9yZ stage_a9z0. Partial (Ann ULiteral dom_a9yZ stage_a9z0) (Ann ULiteral dom_a9yZ stage_a9z0) Rational Rational
floatLitValue :: forall dom_a9yZ stage_a9z0. Partial (Ann ULiteral dom_a9yZ stage_a9z0) (Ann ULiteral dom_a9yZ stage_a9z0) Rational Rational
charLitValue :: forall dom_a9yZ stage_a9z0. Partial (Ann ULiteral dom_a9yZ stage_a9z0) (Ann ULiteral dom_a9yZ stage_a9z0) Char Char
promotedStringValue :: forall t_aRug dom_aRuh stage_aRui. Partial (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) String String
promotedIntValue :: forall t_aRug dom_aRuh stage_aRui. Partial (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) Integer Integer
promotedElements :: forall t_aRug dom_aRuh stage_aRui t'_a2oEx. Partial (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) (AnnListG t_aRug dom_aRuh stage_aRui) (AnnListG t_aRug dom_aRuh stage_aRui)
promotedConName :: forall t_aRug dom_aRuh stage_aRui. Partial (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) (Ann (UPromoted t_aRug) dom_aRuh stage_aRui) (Ann UName dom_aRuh stage_aRui) (Ann UName dom_aRuh stage_aRui)
operatorName :: forall dom_aR48 stage_aR49 dom'_a2oOz stage'_a2oOA. Lens (Ann UOperator dom_aR48 stage_aR49) (Ann UOperator dom_aR48 stage_aR49) (Ann UQualifiedName dom_aR48 stage_aR49) (Ann UQualifiedName dom_aR48 stage_aR49)
simpleName :: forall dom_aR46 stage_aR47 dom'_a2oQ3 stage'_a2oQ4. Lens (Ann UName dom_aR46 stage_aR47) (Ann UName dom_aR46 stage_aR47) (Ann UQualifiedName dom_aR46 stage_aR47) (Ann UQualifiedName dom_aR46 stage_aR47)
unqualifiedName :: forall dom_aR44 stage_aR45. Lens (Ann UQualifiedName dom_aR44 stage_aR45) (Ann UQualifiedName dom_aR44 stage_aR45) (Ann UNamePart dom_aR44 stage_aR45) (Ann UNamePart dom_aR44 stage_aR45)
qualifiers :: forall dom_aR44 stage_aR45. Lens (Ann UQualifiedName dom_aR44 stage_aR45) (Ann UQualifiedName dom_aR44 stage_aR45) (AnnListG UNamePart dom_aR44 stage_aR45) (AnnListG UNamePart dom_aR44 stage_aR45)
simpleNameStr :: forall dom_aR42 stage_aR43. Lens (Ann UNamePart dom_aR42 stage_aR43) (Ann UNamePart dom_aR42 stage_aR43) String String
stringNodeStr :: forall dom_aR40 stage_aR41. Lens (Ann UStringNode dom_aR40 stage_aR41) (Ann UStringNode dom_aR40 stage_aR41) String String


-- | Helper functions for using the AST.
module Language.Haskell.Tools.AST.Helpers

-- | Does the import declaration import only the explicitly listed
--   elements?
importIsExact :: Ann UImportDecl dom stage -> Bool

-- | Does the import declaration import all elements that are not excluded
--   explicitly?
importIsHiding :: Ann UImportDecl dom stage -> Bool

-- | Accesses the name of a function or value binding
bindingName :: Simple Traversal (Ann UValueBind dom stage) (Ann UQualifiedName dom stage)

-- | Accesses that name of a declaration through the declaration head.
declHeadNames :: Simple Traversal (Ann UDeclHead dom stage) (Ann UQualifiedName dom stage)

-- | A reference to access type arguments to a type constructor call that
--   may be universally qualified or parenthesized.
typeParams :: Simple Traversal (Ann UType dom stage) (Ann UType dom stage)
valBindPats :: Simple Traversal (Ann UValueBind dom stage) (Ann UPattern dom stage)

-- | Access the semantic information of an AST node.
semantics :: Simple Lens (Ann elem dom stage) (SemanticInfo dom elem)

-- | Get all nodes that contain a given source range
nodesContaining :: (HasRange (inner dom stage), Biplate (node dom stage) (inner dom stage)) => RealSrcSpan -> Simple Traversal (node dom stage) (inner dom stage)

-- | Return true if the node contains a given range
isInside :: HasRange (inner dom stage) => RealSrcSpan -> inner dom stage -> Bool

-- | Get all nodes that are contained in a given source range
nodesContained :: (HasRange (inner dom stage), Biplate (node dom stage) (inner dom stage)) => RealSrcSpan -> Simple Traversal (node dom stage) (inner dom stage)

-- | Return true if the node contains a given range
isContained :: HasRange (inner dom stage) => RealSrcSpan -> inner dom stage -> Bool

-- | Get the nodes that have exactly the given range
nodesWithRange :: (Biplate (Ann node dom stage) (Ann inner dom stage), SourceInfo stage) => RealSrcSpan -> Simple Traversal (Ann node dom stage) (Ann inner dom stage)

-- | Get the shortest source range that contains the given
getNodeContaining :: (Biplate (Ann node dom stage) (Ann inner dom stage), SourceInfo stage, HasRange (Ann inner dom stage)) => RealSrcSpan -> Ann node dom stage -> Maybe (Ann inner dom stage)

-- | Compares two source spans based on their lengths. Can only used for
--   NESTED spans.
compareRangeLength :: SrcSpan -> SrcSpan -> Ordering

-- | A class to access the names of named elements. Have to locate where
--   does the AST element store its name. The returned name will be the one
--   that was marked isDefining.
class NamedElement elem
elementName :: NamedElement elem => Simple Traversal (Ann elem dom st) (Ann UQualifiedName dom st)
inScope :: Name -> Scope -> Bool
instance Language.Haskell.Tools.AST.Helpers.NamedElement Language.Haskell.Tools.AST.Representation.Decls.UDecl
instance Language.Haskell.Tools.AST.Helpers.NamedElement Language.Haskell.Tools.AST.Representation.Binds.ULocalBind


-- | A custom AST representation for Haskell tools. Different layers of the
--   AST are recursive, to separate them into modules we introduced source
--   imports.
module Language.Haskell.Tools.AST

-- | The representation of a haskell module, that is a separate compilation
--   unit. It may or may not have a header.
data UModule dom stage
UModule :: AnnListG UFilePragma dom stage -> AnnMaybeG UModuleHead dom stage -> AnnListG UImportDecl dom stage -> AnnListG UDecl dom stage -> UModule dom stage
[_filePragmas] :: UModule dom stage -> AnnListG UFilePragma dom stage
[_modHead] :: UModule dom stage -> AnnMaybeG UModuleHead dom stage
[_modImports] :: UModule dom stage -> AnnListG UImportDecl dom stage
[_modDecl] :: UModule dom stage -> AnnListG UDecl dom stage

-- | Module declaration with name and (optional) exports
data UModuleHead dom stage
UModuleHead :: Ann UModuleName dom stage -> AnnMaybeG UModulePragma dom stage -> AnnMaybeG UExportSpecs dom stage -> UModuleHead dom stage
[_mhName] :: UModuleHead dom stage -> Ann UModuleName dom stage
[_mhPragma] :: UModuleHead dom stage -> AnnMaybeG UModulePragma dom stage
[_mhExports] :: UModuleHead dom stage -> AnnMaybeG UExportSpecs dom stage

-- | A list of export specifications surrounded by parentheses
data UExportSpecs dom stage
UExportSpecs :: AnnListG UExportSpec dom stage -> UExportSpecs dom stage
[_espExports] :: UExportSpecs dom stage -> AnnListG UExportSpec dom stage

-- | Export specifier
data UExportSpec dom stage

-- | Export a name and related names
UDeclExport :: Ann UIESpec dom stage -> UExportSpec dom stage
[_exportDecl] :: UExportSpec dom stage -> Ann UIESpec dom stage

-- | The export of an imported module (<tt> module A </tt>)
UModuleExport :: Ann UModuleName dom stage -> UExportSpec dom stage
[_exportModuleName] :: UExportSpec dom stage -> Ann UModuleName dom stage

-- | Marks a name to be imported or exported with related names
--   (subspecifier)
data UIESpec dom stage
UIESpec :: AnnMaybeG UImportModifier dom stage -> Ann UName dom stage -> AnnMaybeG USubSpec dom stage -> UIESpec dom stage
[_ieModifier] :: UIESpec dom stage -> AnnMaybeG UImportModifier dom stage
[_ieName] :: UIESpec dom stage -> Ann UName dom stage
[_ieSubspec] :: UIESpec dom stage -> AnnMaybeG USubSpec dom stage

-- | Specifies the imported element
data UImportModifier dom stage

-- | <tt>pattern</tt>: modifier for importing pattern synonyms
UImportPattern :: UImportModifier dom stage

-- | <tt>type</tt>: modifier for importing types
UImportType :: UImportModifier dom stage

-- | Marks how related names will be imported or exported with a given name
data USubSpec dom stage

-- | <tt>(..)</tt>: a class exported with all of its methods, or a datatype
--   exported with all of its constructors.
USubSpecAll :: USubSpec dom stage

-- | <tt>(a,b,c)</tt>: a class exported with some of its methods, or a
--   datatype exported with some of its constructors.
USubSpecList :: AnnListG UName dom stage -> USubSpec dom stage
[_essList] :: USubSpec dom stage -> AnnListG UName dom stage

-- | Pragmas that must be used before defining the module
data UFilePragma dom stage

-- | <tt>LANGUAGE</tt> pragma, listing the enabled language extensions in
--   that file
ULanguagePragma :: AnnListG ULanguageExtension dom stage -> UFilePragma dom stage
[_lpPragmas] :: UFilePragma dom stage -> AnnListG ULanguageExtension dom stage

-- | <tt>OPTIONS</tt> pragma, possibly qualified with a tool, e.g.
--   OPTIONS_GHC
UOptionsPragma :: Ann UStringNode dom stage -> UFilePragma dom stage
[_opStr] :: UFilePragma dom stage -> Ann UStringNode dom stage

-- | Pragmas that must be used after the module head
data UModulePragma dom stage

-- | A warning pragma attached to the module
UModuleWarningPragma :: AnnListG UStringNode dom stage -> UModulePragma dom stage
[_modWarningStr] :: UModulePragma dom stage -> AnnListG UStringNode dom stage

-- | A deprecated pragma attached to the module
UModuleDeprecatedPragma :: AnnListG UStringNode dom stage -> UModulePragma dom stage
[_modDeprecatedPragma] :: UModulePragma dom stage -> AnnListG UStringNode dom stage

-- | The name of the enabled language extension, for example (<tt>
--   LambdaCase </tt>)
data ULanguageExtension dom stage
ULanguageExtension :: String -> ULanguageExtension dom stage
[_langExt] :: ULanguageExtension dom stage -> String

-- | An import declaration: <tt>import Module.Name</tt>
data UImportDecl dom stage
UImportDecl :: AnnMaybeG UImportSource dom stage -> AnnMaybeG UImportQualified dom stage -> AnnMaybeG UImportSafe dom stage -> AnnMaybeG UStringNode dom stage -> Ann UModuleName dom stage -> AnnMaybeG UImportRenaming dom stage -> AnnMaybeG UImportSpec dom stage -> UImportDecl dom stage
[_importSource] :: UImportDecl dom stage -> AnnMaybeG UImportSource dom stage
[_importQualified] :: UImportDecl dom stage -> AnnMaybeG UImportQualified dom stage
[_importSafe] :: UImportDecl dom stage -> AnnMaybeG UImportSafe dom stage
[_importPkg] :: UImportDecl dom stage -> AnnMaybeG UStringNode dom stage
[_importModule] :: UImportDecl dom stage -> Ann UModuleName dom stage
[_importAs] :: UImportDecl dom stage -> AnnMaybeG UImportRenaming dom stage
[_importSpec] :: UImportDecl dom stage -> AnnMaybeG UImportSpec dom stage

-- | Restriction on the imported names
data UImportSpec dom stage

-- | Restrict the import definition to ONLY import the listed names
UImportSpecList :: AnnListG UIESpec dom stage -> UImportSpec dom stage
[_importSpecList] :: UImportSpec dom stage -> AnnListG UIESpec dom stage

-- | Restrict the import definition to DONT import the listed names
UImportSpecHiding :: AnnListG UIESpec dom stage -> UImportSpec dom stage
[_importSpecHiding] :: UImportSpec dom stage -> AnnListG UIESpec dom stage

-- | Marks the import as qualified: <tt>qualified</tt>
data UImportQualified dom stage
UImportQualified :: UImportQualified dom stage

-- | Marks the import as source: <tt>{--}</tt>
data UImportSource dom stage
UImportSource :: UImportSource dom stage

-- | Marks the import as safe: <tt>safe</tt>
data UImportSafe dom stage
UImportSafe :: UImportSafe dom stage

-- | Marks an imported name to belong to the type namespace: <tt>type</tt>
data UTypeNamespace dom stage
UTypeNamespace :: UTypeNamespace dom stage

-- | Renaming imports (<tt> as A </tt>)
data UImportRenaming dom stage
UImportRenaming :: Ann UModuleName dom stage -> UImportRenaming dom stage
[_importRename] :: UImportRenaming dom stage -> Ann UModuleName dom stage

-- | The name of a module
data UModuleName dom stage
UModuleName :: String -> UModuleName dom stage
[_moduleNameString] :: UModuleName dom stage -> String

-- | The <tt>type</tt> keyword used to qualify that the type and not the
--   constructor of the same name is referred
data TypeKeyword dom stage
TypeKeyword :: TypeKeyword dom stage

-- | A template haskell splice
data USplice dom stage

-- | A simple name splice: <tt>$generateX</tt>
UIdSplice :: Ann UName dom stage -> USplice dom stage
[_spliceId] :: USplice dom stage -> Ann UName dom stage

-- | A splice with parentheses: <tt>$(generate input)</tt>
UParenSplice :: Ann UExpr dom stage -> USplice dom stage
[_spliceExpr] :: USplice dom stage -> Ann UExpr dom stage

-- | Template haskell quasi-quotation: <tt>[quoter|str]</tt>
data UQuasiQuote dom stage
UQuasiQuote :: Ann UName dom stage -> Ann QQString dom stage -> UQuasiQuote dom stage
[_qqExprName] :: UQuasiQuote dom stage -> Ann UName dom stage
[_qqExprBody] :: UQuasiQuote dom stage -> Ann QQString dom stage

-- | Template Haskell Quasi-quotation content
data QQString dom stage
QQString :: String -> QQString dom stage
[_qqString] :: QQString dom stage -> String

-- | Template Haskell bracket expressions
data UBracket dom stage

-- | Expression bracket (<tt> [| x + y |] </tt>)
UExprBracket :: Ann UExpr dom stage -> UBracket dom stage
[_bracketExpr] :: UBracket dom stage -> Ann UExpr dom stage

-- | Pattern bracket (<tt> [p| Point x y |] </tt>)
UPatternBracket :: Ann UPattern dom stage -> UBracket dom stage
[_bracketPattern] :: UBracket dom stage -> Ann UPattern dom stage

-- | Type bracket (<tt> [t| (Int,Int) |] </tt>)
UTypeBracket :: Ann UType dom stage -> UBracket dom stage
[_bracketType] :: UBracket dom stage -> Ann UType dom stage

-- | Declaration bracket (<tt> [d| f :: Int -&gt; Int; f x = x*x |] </tt>)
UDeclsBracket :: AnnListG UDecl dom stage -> UBracket dom stage
[_bracketDecl] :: UBracket dom stage -> AnnListG UDecl dom stage

-- | Haskell declarationw
data UDecl dom stage

-- | A type synonym ( <tt>type String = [Char]</tt> )
UTypeDecl :: Ann UDeclHead dom stage -> Ann UType dom stage -> UDecl dom stage
[_declHead] :: UDecl dom stage -> Ann UDeclHead dom stage
[_declType] :: UDecl dom stage -> Ann UType dom stage

-- | A type family declaration ( <tt>type family F x</tt> )
UTypeFamilyDecl :: Ann UTypeFamily dom stage -> UDecl dom stage
[_declTypeFamily] :: UDecl dom stage -> Ann UTypeFamily dom stage

-- | A closed type family declaration
UClosedTypeFamilyDecl :: Ann UDeclHead dom stage -> AnnMaybeG UTypeFamilySpec dom stage -> AnnListG UTypeEqn dom stage -> UDecl dom stage
[_declHead] :: UDecl dom stage -> Ann UDeclHead dom stage
[_declSpec] :: UDecl dom stage -> AnnMaybeG UTypeFamilySpec dom stage

-- | cannot be empty
[_declDecl] :: UDecl dom stage -> AnnListG UTypeEqn dom stage

-- | A data or newtype declaration. Empty data type declarations without
--   where keyword are always belong to DataDecl.
UDataDecl :: Ann UDataOrNewtypeKeyword dom stage -> AnnMaybeG UContext dom stage -> Ann UDeclHead dom stage -> AnnListG UConDecl dom stage -> AnnListG UDeriving dom stage -> UDecl dom stage
[_declNewtype] :: UDecl dom stage -> Ann UDataOrNewtypeKeyword dom stage
[_declCtx] :: UDecl dom stage -> AnnMaybeG UContext dom stage
[_declHead] :: UDecl dom stage -> Ann UDeclHead dom stage
[_declCons] :: UDecl dom stage -> AnnListG UConDecl dom stage
[_declDeriving] :: UDecl dom stage -> AnnListG UDeriving dom stage

-- | A GADT-style data or newtype declaration.
UGDataDecl :: Ann UDataOrNewtypeKeyword dom stage -> AnnMaybeG UContext dom stage -> Ann UDeclHead dom stage -> AnnMaybeG UKindConstraint dom stage -> AnnListG UGadtConDecl dom stage -> AnnListG UDeriving dom stage -> UDecl dom stage
[_declNewtype] :: UDecl dom stage -> Ann UDataOrNewtypeKeyword dom stage
[_declCtx] :: UDecl dom stage -> AnnMaybeG UContext dom stage
[_declHead] :: UDecl dom stage -> Ann UDeclHead dom stage
[_declKind] :: UDecl dom stage -> AnnMaybeG UKindConstraint dom stage
[_declGadt] :: UDecl dom stage -> AnnListG UGadtConDecl dom stage
[_declDeriving] :: UDecl dom stage -> AnnListG UDeriving dom stage

-- | Type family instance declaration (<tt> type instance Fam T = AssignedT
--   </tt>)
UTypeInstDecl :: Ann UInstanceRule dom stage -> Ann UType dom stage -> UDecl dom stage
[_declInstance] :: UDecl dom stage -> Ann UInstanceRule dom stage
[_declAssignedType] :: UDecl dom stage -> Ann UType dom stage

-- | Data instance declaration (<tt> data instance Fam T = Con1 | Con2
--   </tt>)
UDataInstDecl :: Ann UDataOrNewtypeKeyword dom stage -> Ann UInstanceRule dom stage -> AnnListG UConDecl dom stage -> AnnListG UDeriving dom stage -> UDecl dom stage
[_declNewtype] :: UDecl dom stage -> Ann UDataOrNewtypeKeyword dom stage
[_declInstance] :: UDecl dom stage -> Ann UInstanceRule dom stage
[_declCons] :: UDecl dom stage -> AnnListG UConDecl dom stage
[_declDeriving] :: UDecl dom stage -> AnnListG UDeriving dom stage

-- | GADT-style data instance declaration (<tt> data instance Fam T where
--   ... </tt>)
UGDataInstDecl :: Ann UDataOrNewtypeKeyword dom stage -> Ann UInstanceRule dom stage -> AnnMaybeG UKindConstraint dom stage -> AnnListG UGadtConDecl dom stage -> UDecl dom stage
[_declNewtype] :: UDecl dom stage -> Ann UDataOrNewtypeKeyword dom stage
[_declInstance] :: UDecl dom stage -> Ann UInstanceRule dom stage
[_declKind] :: UDecl dom stage -> AnnMaybeG UKindConstraint dom stage
[_declGadt] :: UDecl dom stage -> AnnListG UGadtConDecl dom stage

-- | Type class declaration (<tt> class X a [where f = ...] </tt>)
UClassDecl :: AnnMaybeG UContext dom stage -> Ann UDeclHead dom stage -> AnnMaybeG UFunDeps dom stage -> AnnMaybeG UClassBody dom stage -> UDecl dom stage
[_declCtx] :: UDecl dom stage -> AnnMaybeG UContext dom stage
[_declHead] :: UDecl dom stage -> Ann UDeclHead dom stage
[_declFunDeps] :: UDecl dom stage -> AnnMaybeG UFunDeps dom stage
[_declBody] :: UDecl dom stage -> AnnMaybeG UClassBody dom stage

-- | Instance declaration (<tt> instance X T [where f = ...] </tt>)
UInstDecl :: AnnMaybeG UOverlapPragma dom stage -> Ann UInstanceRule dom stage -> AnnMaybeG UInstBody dom stage -> UDecl dom stage
[_declOverlap] :: UDecl dom stage -> AnnMaybeG UOverlapPragma dom stage
[_declInstRule] :: UDecl dom stage -> Ann UInstanceRule dom stage
[_declInstDecl] :: UDecl dom stage -> AnnMaybeG UInstBody dom stage

-- | Pattern synonyms (<tt> pattern Arrow t1 t2 = App "-&gt;" [t1, t2]
--   </tt>)
UPatternSynonymDecl :: Ann UPatternSynonym dom stage -> UDecl dom stage
[_declPatSyn] :: UDecl dom stage -> Ann UPatternSynonym dom stage

-- | Standalone deriving declaration (<tt> deriving instance X T </tt>)
UDerivDecl :: AnnMaybeG UDeriveStrategy dom stage -> AnnMaybeG UOverlapPragma dom stage -> Ann UInstanceRule dom stage -> UDecl dom stage
[_declDerivStrat] :: UDecl dom stage -> AnnMaybeG UDeriveStrategy dom stage
[_declOverlap] :: UDecl dom stage -> AnnMaybeG UOverlapPragma dom stage
[_declInstRule] :: UDecl dom stage -> Ann UInstanceRule dom stage

-- | Fixity declaration (<tt> infixl 5 +, - </tt>)
UFixityDecl :: Ann UFixitySignature dom stage -> UDecl dom stage
[_declFixity] :: UDecl dom stage -> Ann UFixitySignature dom stage

-- | Default types (<tt> default (T1, T2) </tt>)
UDefaultDecl :: AnnListG UType dom stage -> UDecl dom stage
[_declTypes] :: UDecl dom stage -> AnnListG UType dom stage

-- | Type signature declaration (<tt> f :: Int -&gt; Int </tt>)
UTypeSigDecl :: Ann UTypeSignature dom stage -> UDecl dom stage
[_declTypeSig] :: UDecl dom stage -> Ann UTypeSignature dom stage

-- | Pattern type signature declaration (<tt> pattern Succ :: Int -&gt; Int
--   </tt>)
UPatTypeSigDecl :: Ann UPatternTypeSignature dom stage -> UDecl dom stage
[_declPatTypeSig] :: UDecl dom stage -> Ann UPatternTypeSignature dom stage

-- | Function or value binding (<tt> f x = 12 </tt>)
UValueBinding :: Ann UValueBind dom stage -> UDecl dom stage
[_declValBind] :: UDecl dom stage -> Ann UValueBind dom stage

-- | Foreign import (<tt> foreign import _foo :: Int -&gt; IO Int </tt>)
UForeignImport :: Ann UCallConv dom stage -> AnnMaybeG USafety dom stage -> Ann UName dom stage -> Ann UType dom stage -> UDecl dom stage
[_declCallConv] :: UDecl dom stage -> Ann UCallConv dom stage
[_declSafety] :: UDecl dom stage -> AnnMaybeG USafety dom stage
[_declName] :: UDecl dom stage -> Ann UName dom stage
[_declForeignType] :: UDecl dom stage -> Ann UType dom stage

-- | Foreign export (<tt> foreign export ccall _foo :: Int -&gt; IO Int
--   </tt>)
UForeignExport :: Ann UCallConv dom stage -> Ann UName dom stage -> Ann UType dom stage -> UDecl dom stage
[_declCallConv] :: UDecl dom stage -> Ann UCallConv dom stage
[_declName] :: UDecl dom stage -> Ann UName dom stage
[_declForeignType] :: UDecl dom stage -> Ann UType dom stage

-- | Top-level pragmas
UPragmaDecl :: Ann UTopLevelPragma dom stage -> UDecl dom stage
[_declPragma] :: UDecl dom stage -> Ann UTopLevelPragma dom stage

-- | Role annotations (<tt> type role Ptr representational </tt>)
URoleDecl :: Ann UQualifiedName dom stage -> AnnListG URole dom stage -> UDecl dom stage
[_declRoleType] :: UDecl dom stage -> Ann UQualifiedName dom stage
[_declRoles] :: UDecl dom stage -> AnnListG URole dom stage

-- | A Template Haskell splice declaration (<tt> $(generateDecls) </tt>)
USpliceDecl :: Ann USplice dom stage -> UDecl dom stage
[_declSplice] :: UDecl dom stage -> Ann USplice dom stage
data UDeclHead dom stage

-- | Type or class name
UDeclHead :: Ann UName dom stage -> UDeclHead dom stage
[_dhName] :: UDeclHead dom stage -> Ann UName dom stage

-- | Parenthesized type
UDHParen :: Ann UDeclHead dom stage -> UDeclHead dom stage
[_dhBody] :: UDeclHead dom stage -> Ann UDeclHead dom stage

-- | Type application
UDHApp :: Ann UDeclHead dom stage -> Ann UTyVar dom stage -> UDeclHead dom stage
[_dhAppFun] :: UDeclHead dom stage -> Ann UDeclHead dom stage
[_dhAppOperand] :: UDeclHead dom stage -> Ann UTyVar dom stage

-- | Infix application of the type/class name to the left operand
UDHInfix :: Ann UTyVar dom stage -> Ann UOperator dom stage -> Ann UTyVar dom stage -> UDeclHead dom stage
[_dhLeft] :: UDeclHead dom stage -> Ann UTyVar dom stage
[_dhOperator] :: UDeclHead dom stage -> Ann UOperator dom stage
[_dhRight] :: UDeclHead dom stage -> Ann UTyVar dom stage

-- | The list of declarations that can appear in a typeclass
data UClassBody dom stage
UClassBody :: AnnListG UClassElement dom stage -> UClassBody dom stage
[_cbElements] :: UClassBody dom stage -> AnnListG UClassElement dom stage

-- | Members of a class declaration
data UClassElement dom stage

-- | Signature: <tt> f :: A -&gt; B </tt>
UClsSig :: Ann UTypeSignature dom stage -> UClassElement dom stage
[_ceTypeSig] :: UClassElement dom stage -> Ann UTypeSignature dom stage

-- | Fixity signature in class: <tt> infixl 1 &gt;&gt;- </tt>
UClsFixity :: Ann UFixitySignature dom stage -> UClassElement dom stage
[_clsFixity] :: UClassElement dom stage -> Ann UFixitySignature dom stage

-- | Default binding: <tt> f x = "aaa" </tt>
UClsDef :: Ann UValueBind dom stage -> UClassElement dom stage
[_ceBind] :: UClassElement dom stage -> Ann UValueBind dom stage

-- | Declaration of an associated type synonym: <tt> type T x :: * </tt>
UClsTypeFam :: Ann UTypeFamily dom stage -> UClassElement dom stage
[_ceTypeFam] :: UClassElement dom stage -> Ann UTypeFamily dom stage

-- | Default choice for type synonym: <tt> type T x = TE </tt> or <tt> type
--   instance T x = TE </tt>
UClsTypeDef :: Ann UDeclHead dom stage -> Ann UType dom stage -> UClassElement dom stage
[_ceHead] :: UClassElement dom stage -> Ann UDeclHead dom stage
[_ceKind] :: UClassElement dom stage -> Ann UType dom stage

-- | Default signature (by using <tt>DefaultSignatures</tt>): <tt> default
--   _enum :: (Generic a, GEnum (Rep a)) =&gt; [a] </tt>
UClsDefSig :: Ann UName dom stage -> Ann UType dom stage -> UClassElement dom stage
[_ceName] :: UClassElement dom stage -> Ann UName dom stage
[_ceType] :: UClassElement dom stage -> Ann UType dom stage

-- | Minimal pragma: <tt> {--} </tt>
UClsMinimal :: Ann UMinimalFormula dom stage -> UClassElement dom stage
[_pragmaFormula] :: UClassElement dom stage -> Ann UMinimalFormula dom stage

-- | Inline-like pragma in class definition not supported yet (GHC 8.0.1) |
--   UClsPatSig { _cePatSig :: Ann UPatternTypeSignature dom stage } -- ^
--   Pattern signature in a class declaration (by using
--   <tt>PatternSynonyms</tt>)
UClsInline :: Ann UInlinePragma dom stage -> UClassElement dom stage
[_clsInline] :: UClassElement dom stage -> Ann UInlinePragma dom stage

-- | The instance declaration rule, which is, roughly, the part of the
--   instance declaration before the where keyword.
data UInstanceRule dom stage

-- | Instance head as an instance rule (<tt> X a =&gt; Y a </tt>)
UInstanceRule :: AnnMaybeG (AnnListG UTyVar) dom stage -> AnnMaybeG UContext dom stage -> Ann UInstanceHead dom stage -> UInstanceRule dom stage
[_irVars] :: UInstanceRule dom stage -> AnnMaybeG (AnnListG UTyVar) dom stage
[_irCtx] :: UInstanceRule dom stage -> AnnMaybeG UContext dom stage
[_irHead] :: UInstanceRule dom stage -> Ann UInstanceHead dom stage

-- | The specification of the class instance declaration
data UInstanceHead dom stage

-- | Type or class name
UInstanceHeadCon :: Ann UName dom stage -> UInstanceHead dom stage
[_ihConName] :: UInstanceHead dom stage -> Ann UName dom stage

-- | Infix application of the type/class name to the left operand
UInstanceHeadInfix :: Ann UType dom stage -> Ann UOperator dom stage -> UInstanceHead dom stage
[_ihLeftOp] :: UInstanceHead dom stage -> Ann UType dom stage
[_ihOperator] :: UInstanceHead dom stage -> Ann UOperator dom stage

-- | Parenthesized instance head
UInstanceHeadParen :: Ann UInstanceHead dom stage -> UInstanceHead dom stage
[_ihHead] :: UInstanceHead dom stage -> Ann UInstanceHead dom stage

-- | Application to one more type
UInstanceHeadApp :: Ann UInstanceHead dom stage -> Ann UType dom stage -> UInstanceHead dom stage
[_ihFun] :: UInstanceHead dom stage -> Ann UInstanceHead dom stage
[_ihType] :: UInstanceHead dom stage -> Ann UType dom stage

-- | Instance body is the implementation of the class functions (<tt> where
--   a x = 1; b x = 2 </tt>)
data UInstBody dom stage
UInstBody :: AnnListG UInstBodyDecl dom stage -> UInstBody dom stage
[_instBodyDecls] :: UInstBody dom stage -> AnnListG UInstBodyDecl dom stage

-- | Declarations inside an instance declaration.
data UInstBodyDecl dom stage

-- | A normal value binding (<tt> f x = 12 </tt>)
UInstBodyNormalDecl :: Ann UValueBind dom stage -> UInstBodyDecl dom stage
[_instBodyDeclFunbind] :: UInstBodyDecl dom stage -> Ann UValueBind dom stage

-- | Type signature in instance definition with <tt>InstanceSigs</tt>
UInstBodyTypeSig :: Ann UTypeSignature dom stage -> UInstBodyDecl dom stage
[_instBodyTypeSig] :: UInstBodyDecl dom stage -> Ann UTypeSignature dom stage

-- | An associated type definition (<tt> type A X = B </tt>)
UInstBodyTypeDecl :: Ann UTypeEqn dom stage -> UInstBodyDecl dom stage
[_instBodyTypeEqn] :: UInstBodyDecl dom stage -> Ann UTypeEqn dom stage

-- | An associated data type implementation (<tt> data A X = C1 | C2 </tt>)
UInstBodyDataDecl :: Ann UDataOrNewtypeKeyword dom stage -> Ann UInstanceRule dom stage -> AnnListG UConDecl dom stage -> AnnListG UDeriving dom stage -> UInstBodyDecl dom stage
[_instBodyDataNew] :: UInstBodyDecl dom stage -> Ann UDataOrNewtypeKeyword dom stage
[_instBodyLhsType] :: UInstBodyDecl dom stage -> Ann UInstanceRule dom stage
[_instBodyDataCons] :: UInstBodyDecl dom stage -> AnnListG UConDecl dom stage
[_instBodyDerivings] :: UInstBodyDecl dom stage -> AnnListG UDeriving dom stage

-- | An associated data type implemented using GADT style
UInstBodyGadtDataDecl :: Ann UDataOrNewtypeKeyword dom stage -> Ann UInstanceRule dom stage -> AnnMaybeG UKindConstraint dom stage -> AnnListG UGadtConDecl dom stage -> AnnListG UDeriving dom stage -> UInstBodyDecl dom stage
[_instBodyDataNew] :: UInstBodyDecl dom stage -> Ann UDataOrNewtypeKeyword dom stage
[_instBodyLhsType] :: UInstBodyDecl dom stage -> Ann UInstanceRule dom stage
[_instBodyDataKind] :: UInstBodyDecl dom stage -> AnnMaybeG UKindConstraint dom stage
[_instBodyGadtCons] :: UInstBodyDecl dom stage -> AnnListG UGadtConDecl dom stage
[_instBodyDerivings] :: UInstBodyDecl dom stage -> AnnListG UDeriving dom stage

-- | Specialize instance pragma (no phase selection is allowed)
USpecializeInstance :: Ann UType dom stage -> UInstBodyDecl dom stage
[_specializeInstanceType] :: UInstBodyDecl dom stage -> Ann UType dom stage

-- | Inline-like pragma in a class instance
UInlineInstance :: Ann UInlinePragma dom stage -> UInstBodyDecl dom stage
[_instanceInline] :: UInstBodyDecl dom stage -> Ann UInlinePragma dom stage

-- | Specialize pragma not supported yet | UInstBodyPatSyn {
--   _instBodyPatSyn :: Ann UPatternSynonym dom stage } -- ^ A pattern
--   synonym in a class instance
UInstanceSpecialize :: Ann USpecializePragma dom stage -> UInstBodyDecl dom stage
[_specializeInstance] :: UInstBodyDecl dom stage -> Ann USpecializePragma dom stage

-- | Overlap pragmas. Can be applied to class declarations and class
--   instance declarations.
data UOverlapPragma dom stage

-- | <tt>OVERLAP</tt> pragma
UEnableOverlap :: UOverlapPragma dom stage

-- | <tt>NO_OVERLAP</tt> pragma
UDisableOverlap :: UOverlapPragma dom stage

-- | <tt>OVERLAPPABLE</tt> pragma
UOverlappable :: UOverlapPragma dom stage

-- | <tt>OVERLAPPING</tt> pragma
UOverlapping :: UOverlapPragma dom stage

-- | <tt>OVERLAPS</tt> pragma
UOverlaps :: UOverlapPragma dom stage

-- | <tt>INCOHERENT</tt> pragma
UIncoherentOverlap :: UOverlapPragma dom stage

-- | Open type and data families
data UTypeFamily dom stage

-- | Type family declaration (<tt> type family A a :: * -&gt; * </tt>)
UTypeFamily :: Ann UDeclHead dom stage -> AnnMaybeG UTypeFamilySpec dom stage -> UTypeFamily dom stage
[_tfHead] :: UTypeFamily dom stage -> Ann UDeclHead dom stage
[_tfSpec] :: UTypeFamily dom stage -> AnnMaybeG UTypeFamilySpec dom stage

-- | Data family declaration (<tt> data family A a :: * -&gt; * </tt>)
UDataFamily :: Ann UDeclHead dom stage -> AnnMaybeG UKindConstraint dom stage -> UTypeFamily dom stage
[_tfHead] :: UTypeFamily dom stage -> Ann UDeclHead dom stage
[_tfKind] :: UTypeFamily dom stage -> AnnMaybeG UKindConstraint dom stage

-- | Type family specification with kinds specification and injectivity.
data UTypeFamilySpec dom stage

-- | Specifies the kind of a type family (<tt> :: * -&gt; * </tt>)
UTypeFamilyKind :: Ann UKindConstraint dom stage -> UTypeFamilySpec dom stage
[_tfSpecKind] :: UTypeFamilySpec dom stage -> Ann UKindConstraint dom stage

-- | Specifies the kind of a type family (<tt> = t :: * -&gt; * </tt>)
UTypeFamilyTyVar :: Ann UTyVar dom stage -> UTypeFamilySpec dom stage
[_tfTypeVar] :: UTypeFamilySpec dom stage -> Ann UTyVar dom stage

-- | Specifies the injectivity of a type family (<tt> = r | r -&gt; a
--   </tt>)
UTypeFamilyInjectivity :: Ann UInjectivityAnn dom stage -> UTypeFamilySpec dom stage
[_tfInjectivity] :: UTypeFamilySpec dom stage -> Ann UInjectivityAnn dom stage

-- | Injectivity annotation for type families (<tt> = r | r -&gt; a </tt>)
data UInjectivityAnn dom stage
UInjectivityAnn :: Ann UTyVar dom stage -> AnnListG UName dom stage -> UInjectivityAnn dom stage
[_injAnnRes] :: UInjectivityAnn dom stage -> Ann UTyVar dom stage
[_injAnnDeps] :: UInjectivityAnn dom stage -> AnnListG UName dom stage

-- | Type equations as found in closed type families (<tt> T A = S </tt>)
data UTypeEqn dom stage
UTypeEqn :: Ann UType dom stage -> Ann UType dom stage -> UTypeEqn dom stage
[_teLhs] :: UTypeEqn dom stage -> Ann UType dom stage
[_teRhs] :: UTypeEqn dom stage -> Ann UType dom stage

-- | GADT constructor declaration (<tt> D1 :: { val :: Int } -&gt; T String
--   </tt>)
data UGadtConDecl dom stage
UGadtConDecl :: AnnListG UName dom stage -> AnnListG UTyVar dom stage -> AnnMaybeG UContext dom stage -> Ann UGadtConType dom stage -> UGadtConDecl dom stage
[_gadtConNames] :: UGadtConDecl dom stage -> AnnListG UName dom stage
[_gadtConTypeArgs] :: UGadtConDecl dom stage -> AnnListG UTyVar dom stage
[_gadtConTypeCtx] :: UGadtConDecl dom stage -> AnnMaybeG UContext dom stage
[_gadtConType] :: UGadtConDecl dom stage -> Ann UGadtConType dom stage

-- | The <tt>data</tt> or the <tt>newtype</tt> keyword to define ADTs.
data UDataOrNewtypeKeyword dom stage
UDataKeyword :: UDataOrNewtypeKeyword dom stage
UNewtypeKeyword :: UDataOrNewtypeKeyword dom stage

-- | Type of GADT constructors (can be record types: <tt>{ val :: Int
--   }</tt>)
data UGadtConType dom stage
UGadtNormalType :: Ann UType dom stage -> UGadtConType dom stage
[_gadtConNormalType] :: UGadtConType dom stage -> Ann UType dom stage
UGadtRecordType :: AnnListG UFieldDecl dom stage -> Ann UType dom stage -> UGadtConType dom stage
[_gadtConRecordFields] :: UGadtConType dom stage -> AnnListG UFieldDecl dom stage
[_gadtConResultType] :: UGadtConType dom stage -> Ann UType dom stage

-- | A list of functional dependencies: <tt> | a -&gt; b, c -&gt; d </tt>
--   separated by commas
data UFunDeps dom stage
UFunDeps :: AnnListG UFunDep dom stage -> UFunDeps dom stage
[_funDeps] :: UFunDeps dom stage -> AnnListG UFunDep dom stage

-- | A functional dependency, given on the form <tt>l1 ... ln -&gt; r1 ...
--   rn</tt>
data UFunDep dom stage
UFunDep :: AnnListG UName dom stage -> AnnListG UName dom stage -> UFunDep dom stage
[_funDepLhs] :: UFunDep dom stage -> AnnListG UName dom stage
[_funDepRhs] :: UFunDep dom stage -> AnnListG UName dom stage

-- | A constructor declaration for a datatype
data UConDecl dom stage

-- | Ordinary data constructor (<tt> C t1 t2 </tt>)
UConDecl :: AnnListG UTyVar dom stage -> AnnMaybeG UContext dom stage -> Ann UName dom stage -> AnnListG UType dom stage -> UConDecl dom stage
[_conTypeArgs] :: UConDecl dom stage -> AnnListG UTyVar dom stage
[_conTypeCtx] :: UConDecl dom stage -> AnnMaybeG UContext dom stage
[_conDeclName] :: UConDecl dom stage -> Ann UName dom stage
[_conDeclArgs] :: UConDecl dom stage -> AnnListG UType dom stage

-- | Record data constructor (<tt> C { _n1 :: t1, _n2 :: t2 } </tt>)
URecordDecl :: AnnListG UTyVar dom stage -> AnnMaybeG UContext dom stage -> Ann UName dom stage -> AnnListG UFieldDecl dom stage -> UConDecl dom stage
[_conTypeArgs] :: UConDecl dom stage -> AnnListG UTyVar dom stage
[_conTypeCtx] :: UConDecl dom stage -> AnnMaybeG UContext dom stage
[_conDeclName] :: UConDecl dom stage -> Ann UName dom stage
[_conDeclFields] :: UConDecl dom stage -> AnnListG UFieldDecl dom stage

-- | Infix data constructor (<tt> t1 :+: t2 </tt>)
UInfixConDecl :: AnnListG UTyVar dom stage -> AnnMaybeG UContext dom stage -> Ann UType dom stage -> Ann UOperator dom stage -> Ann UType dom stage -> UConDecl dom stage
[_conTypeArgs] :: UConDecl dom stage -> AnnListG UTyVar dom stage
[_conTypeCtx] :: UConDecl dom stage -> AnnMaybeG UContext dom stage
[_conDeclLhs] :: UConDecl dom stage -> Ann UType dom stage
[_conDeclOp] :: UConDecl dom stage -> Ann UOperator dom stage
[_conDeclRhs] :: UConDecl dom stage -> Ann UType dom stage

-- | Field declaration (<tt> fld :: Int </tt>)
data UFieldDecl dom stage
UFieldDecl :: AnnListG UName dom stage -> Ann UType dom stage -> UFieldDecl dom stage
[_fieldNames] :: UFieldDecl dom stage -> AnnListG UName dom stage
[_fieldType] :: UFieldDecl dom stage -> Ann UType dom stage

-- | A deriving clause following a data type declaration. (<tt> deriving
--   Show </tt> or <tt> deriving (Show, Eq) </tt>)
data UDeriving dom stage
UDerivingOne :: AnnMaybeG UDeriveStrategy dom stage -> Ann UInstanceHead dom stage -> UDeriving dom stage
[_deriveStrategy] :: UDeriving dom stage -> AnnMaybeG UDeriveStrategy dom stage
[_oneDerived] :: UDeriving dom stage -> Ann UInstanceHead dom stage
UDerivings :: AnnMaybeG UDeriveStrategy dom stage -> AnnListG UInstanceHead dom stage -> UDeriving dom stage
[_deriveStrategy] :: UDeriving dom stage -> AnnMaybeG UDeriveStrategy dom stage
[_allDerived] :: UDeriving dom stage -> AnnListG UInstanceHead dom stage
data UDeriveStrategy dom stage
UStockStrategy :: UDeriveStrategy dom stage
UAnyClassStrategy :: UDeriveStrategy dom stage
UNewtypeStrategy :: UDeriveStrategy dom stage

-- | Pattern type signature declaration (<tt> pattern Succ :: Int -&gt; Int
--   </tt>)
data UPatternTypeSignature dom stage
UPatternTypeSignature :: AnnListG UName dom stage -> Ann UType dom stage -> UPatternTypeSignature dom stage
[_patSigName] :: UPatternTypeSignature dom stage -> AnnListG UName dom stage
[_patSigType] :: UPatternTypeSignature dom stage -> Ann UType dom stage

-- | Pattern synonyms: <tt> pattern Arrow t1 t2 = App "-&gt;" [t1, t2]
--   </tt>
data UPatternSynonym dom stage
UPatternSynonym :: Ann UPatSynLhs dom stage -> Ann UPatSynRhs dom stage -> UPatternSynonym dom stage
[_patLhs] :: UPatternSynonym dom stage -> Ann UPatSynLhs dom stage
[_patRhs] :: UPatternSynonym dom stage -> Ann UPatSynRhs dom stage

-- | Left hand side of a pattern synonym
data UPatSynLhs dom stage

-- | A left hand side with a constructor name and arguments (<tt> Arrow t1
--   t2 </tt>)
UNormalPatSyn :: Ann UName dom stage -> AnnListG UName dom stage -> UPatSynLhs dom stage
[_patName] :: UPatSynLhs dom stage -> Ann UName dom stage
[_patArgs] :: UPatSynLhs dom stage -> AnnListG UName dom stage

-- | An infix pattern synonym left-hand side (<tt> t1 :+: t2 </tt>)
UInfixPatSyn :: Ann UName dom stage -> Ann UOperator dom stage -> Ann UName dom stage -> UPatSynLhs dom stage
[_patSynLhs] :: UPatSynLhs dom stage -> Ann UName dom stage
[_patSynOp] :: UPatSynLhs dom stage -> Ann UOperator dom stage
[_patSynRhs] :: UPatSynLhs dom stage -> Ann UName dom stage

-- | A record-style pattern synonym left-hand side (<tt> Arrow { arrowFrom,
--   arrowTo } </tt>)
URecordPatSyn :: Ann UName dom stage -> AnnListG UName dom stage -> UPatSynLhs dom stage
[_patName] :: UPatSynLhs dom stage -> Ann UName dom stage
[_patArgs] :: UPatSynLhs dom stage -> AnnListG UName dom stage

-- | Right-hand side of pattern synonym
data UPatSynRhs dom stage

-- | <tt> pattern Int = App <a>Int</a> [] </tt> or <tt> pattern Int &lt;-
--   App <a>Int</a> [] where Int = App <a>Int</a> [] </tt>
UBidirectionalPatSyn :: Ann UPattern dom stage -> AnnMaybeG UPatSynWhere dom stage -> UPatSynRhs dom stage
[_patRhsPat] :: UPatSynRhs dom stage -> Ann UPattern dom stage
[_patRhsOpposite] :: UPatSynRhs dom stage -> AnnMaybeG UPatSynWhere dom stage

-- | <pre>
--   pattern Int &lt;- App <a>Int</a> []
--   </pre>
UOneDirectionalPatSyn :: Ann UPattern dom stage -> UPatSynRhs dom stage
[_patRhsPat] :: UPatSynRhs dom stage -> Ann UPattern dom stage

-- | Where clause of pattern synonym (explicit expression direction)
data UPatSynWhere dom stage
UPatSynWhere :: AnnListG UMatch dom stage -> UPatSynWhere dom stage
[_patOpposite] :: UPatSynWhere dom stage -> AnnListG UMatch dom stage

-- | Call conventions of foreign functions
data UCallConv dom stage
UStdCall :: UCallConv dom stage
UCCall :: UCallConv dom stage
UCPlusPlus :: UCallConv dom stage
UDotNet :: UCallConv dom stage
UJvm :: UCallConv dom stage
UJs :: UCallConv dom stage
UJavaScript :: UCallConv dom stage
UCApi :: UCallConv dom stage

-- | Safety annotations for foreign calls
data USafety dom stage
USafe :: USafety dom stage
UThreadSafe :: USafety dom stage
UUnsafe :: USafety dom stage
UInterruptible :: USafety dom stage

-- | Role annotations for types
data URole dom stage
UNominal :: URole dom stage
URepresentational :: URole dom stage
UPhantom :: URole dom stage

-- | Top level pragmas
data UTopLevelPragma dom stage

-- | A pragma that introduces source rewrite rules (<tt> {--} </tt>)
URulePragma :: AnnListG URule dom stage -> UTopLevelPragma dom stage
[_pragmaRule] :: UTopLevelPragma dom stage -> AnnListG URule dom stage

-- | A pragma that marks definitions as deprecated (<tt> {-# DEPRECATED f
--   "f will be replaced by g" </tt>)
UDeprPragma :: AnnListG UName dom stage -> AnnListG UStringNode dom stage -> UTopLevelPragma dom stage
[_pragmaObjects] :: UTopLevelPragma dom stage -> AnnListG UName dom stage
[_deprMessage] :: UTopLevelPragma dom stage -> AnnListG UStringNode dom stage

-- | A pragma that marks definitions as deprecated (<tt> {-# WARNING
--   unsafePerformIO "you should know what you are doing" </tt>)
UWarningPragma :: AnnListG UName dom stage -> AnnListG UStringNode dom stage -> UTopLevelPragma dom stage
[_pragmaObjects] :: UTopLevelPragma dom stage -> AnnListG UName dom stage
[_warnMessage] :: UTopLevelPragma dom stage -> AnnListG UStringNode dom stage

-- | A pragma that annotates a definition with an arbitrary value (<tt> {-#
--   ANN f 42 </tt>) TODO: extract pragmas that appear both in top-level
--   and in instances (inline, inlinable, noinline)
UAnnPragma :: Ann UAnnotationSubject dom stage -> Ann UExpr dom stage -> UTopLevelPragma dom stage
[_annotationSubject] :: UTopLevelPragma dom stage -> Ann UAnnotationSubject dom stage
[_annotateExpr] :: UTopLevelPragma dom stage -> Ann UExpr dom stage
UInlinePragmaDecl :: Ann UInlinePragma dom stage -> UTopLevelPragma dom stage
[_pragmaInline] :: UTopLevelPragma dom stage -> Ann UInlinePragma dom stage

-- | A pragma for maintaining line numbers in generated sources (<tt> {--}
--   </tt>)
ULinePragma :: Ann LineNumber dom stage -> AnnMaybeG UStringNode dom stage -> UTopLevelPragma dom stage
[_pragmaLineNum] :: UTopLevelPragma dom stage -> Ann LineNumber dom stage
[_pragmaFileName] :: UTopLevelPragma dom stage -> AnnMaybeG UStringNode dom stage
USpecializeDecl :: Ann USpecializePragma dom stage -> UTopLevelPragma dom stage
[_specializePragma] :: UTopLevelPragma dom stage -> Ann USpecializePragma dom stage

-- | The COMPLETE pragma is used to inform the pattern match checker that a
--   certain set of patterns is complete (<tt> {--} </tt>).
UCompletePragma :: AnnListG UName dom stage -> AnnMaybeG UName dom stage -> UTopLevelPragma dom stage
[_pragmaObjects] :: UTopLevelPragma dom stage -> AnnListG UName dom stage
[_pragmaSignature] :: UTopLevelPragma dom stage -> AnnMaybeG UName dom stage
data USpecializePragma dom stage

-- | A pragma that tells the compiler that a polymorph function should be
--   optimized for a given type (<tt> {--} </tt>)
USpecializePragma :: AnnMaybeG UPhaseControl dom stage -> Ann UName dom stage -> AnnListG UType dom stage -> USpecializePragma dom stage
[_pragmaPhase] :: USpecializePragma dom stage -> AnnMaybeG UPhaseControl dom stage
[_specializeDef] :: USpecializePragma dom stage -> Ann UName dom stage
[_specializeType] :: USpecializePragma dom stage -> AnnListG UType dom stage

-- | A rewrite rule (<tt> "map/map" forall f g xs. map f (map g xs) = map
--   (f.g) xs </tt>)
data URule dom stage
URule :: Ann UStringNode dom stage -> AnnMaybeG UPhaseControl dom stage -> AnnListG URuleVar dom stage -> Ann UExpr dom stage -> Ann UExpr dom stage -> URule dom stage

-- | User name of the rule
[_ruleName] :: URule dom stage -> Ann UStringNode dom stage

-- | The compilation phases in which the rule can be applied
[_rulePhase] :: URule dom stage -> AnnMaybeG UPhaseControl dom stage

-- | Variables bound in the rule
[_ruleBounded] :: URule dom stage -> AnnListG URuleVar dom stage

-- | The transformed expression
[_ruleLhs] :: URule dom stage -> Ann UExpr dom stage

-- | The resulting expression
[_ruleRhs] :: URule dom stage -> Ann UExpr dom stage

-- | A variable for a rewrite rule. With or without type signature.
data URuleVar dom stage

-- | A simple rule variable
URuleVar :: Ann UName dom stage -> URuleVar dom stage
[_ruleVarName] :: URuleVar dom stage -> Ann UName dom stage

-- | A rule variable with signature
USigRuleVar :: Ann UName dom stage -> Ann UType dom stage -> URuleVar dom stage
[_ruleVarName] :: URuleVar dom stage -> Ann UName dom stage
[_ruleVarType] :: URuleVar dom stage -> Ann UType dom stage

-- | Annotation allows you to connect an expression to any declaration.
data UAnnotationSubject dom stage

-- | The definition with the given name is annotated
UNameAnnotation :: Ann UName dom stage -> UAnnotationSubject dom stage
[_annotateName] :: UAnnotationSubject dom stage -> Ann UName dom stage

-- | A type with the given name is annotated
UTypeAnnotation :: Ann UName dom stage -> UAnnotationSubject dom stage
[_annotateName] :: UAnnotationSubject dom stage -> Ann UName dom stage

-- | The whole module is annotated
UModuleAnnotation :: UAnnotationSubject dom stage

-- | Formulas of minimal annotations declaring which functions should be
--   defined.
data UMinimalFormula dom stage
UMinimalName :: Ann UName dom stage -> UMinimalFormula dom stage
[_minimalName] :: UMinimalFormula dom stage -> Ann UName dom stage
UMinimalParen :: Ann UMinimalFormula dom stage -> UMinimalFormula dom stage
[_minimalInner] :: UMinimalFormula dom stage -> Ann UMinimalFormula dom stage

-- | One of the minimal formulas are needed (<tt> min1 | min2 </tt>)
UMinimalOr :: AnnListG UMinimalFormula dom stage -> UMinimalFormula dom stage
[_minimalOrs] :: UMinimalFormula dom stage -> AnnListG UMinimalFormula dom stage

-- | Both of the minimal formulas are needed (<tt> min1 , min2 </tt>)
UMinimalAnd :: AnnListG UMinimalFormula dom stage -> UMinimalFormula dom stage
[_minimalAnds] :: UMinimalFormula dom stage -> AnnListG UMinimalFormula dom stage

-- | A line number for a line pragma.
data LineNumber dom stage
LineNumber :: Int -> LineNumber dom stage
[_lineNumber] :: LineNumber dom stage -> Int

-- | Value binding for top-level and local bindings
data UValueBind dom stage

-- | Non-function binding (<tt> v = "12" </tt>) TODO: use one name for a
--   function instead of names in each match
USimpleBind :: Ann UPattern dom stage -> Ann URhs dom stage -> AnnMaybeG ULocalBinds dom stage -> UValueBind dom stage
[_valBindPat] :: UValueBind dom stage -> Ann UPattern dom stage
[_valBindRhs] :: UValueBind dom stage -> Ann URhs dom stage
[_valBindLocals] :: UValueBind dom stage -> AnnMaybeG ULocalBinds dom stage

-- | Function binding (<tt> f 0 = 1; f x = x </tt>). All matches must have
--   the same name.
UFunBind :: AnnListG UMatch dom stage -> UValueBind dom stage
[_funBindMatches] :: UValueBind dom stage -> AnnListG UMatch dom stage

-- | Clause of function binding
data UMatch dom stage
UMatch :: Ann UMatchLhs dom stage -> Ann URhs dom stage -> AnnMaybeG ULocalBinds dom stage -> UMatch dom stage
[_matchLhs] :: UMatch dom stage -> Ann UMatchLhs dom stage
[_matchRhs] :: UMatch dom stage -> Ann URhs dom stage
[_matchBinds] :: UMatch dom stage -> AnnMaybeG ULocalBinds dom stage

-- | Something on the left side of the match
data UMatchLhs dom stage

-- | A match lhs with the function name and parameter names (<tt> f a b
--   </tt>)
UNormalLhs :: Ann UName dom stage -> AnnListG UPattern dom stage -> UMatchLhs dom stage
[_matchLhsName] :: UMatchLhs dom stage -> Ann UName dom stage
[_matchLhsArgs] :: UMatchLhs dom stage -> AnnListG UPattern dom stage

-- | An infix match lhs for an operator (<tt> a + b </tt>)
UInfixLhs :: Ann UPattern dom stage -> Ann UOperator dom stage -> Ann UPattern dom stage -> AnnListG UPattern dom stage -> UMatchLhs dom stage
[_matchLhsLhs] :: UMatchLhs dom stage -> Ann UPattern dom stage
[_matchLhsOperator] :: UMatchLhs dom stage -> Ann UOperator dom stage
[_matchLhsRhs] :: UMatchLhs dom stage -> Ann UPattern dom stage
[_matchLhsArgs] :: UMatchLhs dom stage -> AnnListG UPattern dom stage

-- | Local bindings attached to a declaration (<tt> where x = 42 </tt>)
data ULocalBinds dom stage
ULocalBinds :: AnnListG ULocalBind dom stage -> ULocalBinds dom stage
[_localBinds] :: ULocalBinds dom stage -> AnnListG ULocalBind dom stage

-- | Bindings that are enabled in local blocks (where or let).
data ULocalBind dom stage

-- | A local binding for a value
ULocalValBind :: Ann UValueBind dom stage -> ULocalBind dom stage
[_localVal] :: ULocalBind dom stage -> Ann UValueBind dom stage

-- | A local type signature
ULocalSignature :: Ann UTypeSignature dom stage -> ULocalBind dom stage
[_localSig] :: ULocalBind dom stage -> Ann UTypeSignature dom stage

-- | A local fixity declaration
ULocalFixity :: Ann UFixitySignature dom stage -> ULocalBind dom stage
[_localFixity] :: ULocalBind dom stage -> Ann UFixitySignature dom stage

-- | A local inline pragma
ULocalInline :: Ann UInlinePragma dom stage -> ULocalBind dom stage
[_localInline] :: ULocalBind dom stage -> Ann UInlinePragma dom stage

-- | A type signature (<tt> f :: Int -&gt; Int </tt>)
data UTypeSignature dom stage
UTypeSignature :: AnnListG UName dom stage -> Ann UType dom stage -> UTypeSignature dom stage
[_tsName] :: UTypeSignature dom stage -> AnnListG UName dom stage
[_tsType] :: UTypeSignature dom stage -> Ann UType dom stage

-- | A fixity signature (<tt> infixl 5 +, - </tt>).
data UFixitySignature dom stage
UFixitySignature :: Ann Assoc dom stage -> AnnMaybeG Precedence dom stage -> AnnListG UOperator dom stage -> UFixitySignature dom stage
[_fixityAssoc] :: UFixitySignature dom stage -> Ann Assoc dom stage
[_fixityPrecedence] :: UFixitySignature dom stage -> AnnMaybeG Precedence dom stage
[_fixityOperators] :: UFixitySignature dom stage -> AnnListG UOperator dom stage

-- | Associativity of an operator.
data Assoc dom stage

-- | non-associative operator (declared with <tt>infix</tt>)
AssocNone :: Assoc dom stage

-- | left-associative operator (declared with <tt>infixl</tt>)
AssocLeft :: Assoc dom stage

-- | right-associative operator (declared with <tt>infixr</tt>)
AssocRight :: Assoc dom stage

-- | Numeric precedence of an operator
data Precedence dom stage
Precedence :: Int -> Precedence dom stage
[_precedenceValue] :: Precedence dom stage -> Int

-- | Right hand side of a value binding (possible with guards): (<tt> = 3
--   </tt> or <tt> | x == 1 = 3; | otherwise = 4 </tt>)
data URhs dom stage

-- | An unguarded right-hand-side (<tt> = 3 </tt>)
UUnguardedRhs :: Ann UExpr dom stage -> URhs dom stage
[_rhsExpr] :: URhs dom stage -> Ann UExpr dom stage

-- | An unguarded right-hand-side (<tt> | x == 1 = 3; | otherwise = 4
--   </tt>)
UGuardedRhss :: AnnListG UGuardedRhs dom stage -> URhs dom stage
[_rhsGuards] :: URhs dom stage -> AnnListG UGuardedRhs dom stage

-- | A guarded right-hand side of a value binding (<tt> | x &gt; 3 = 2
--   </tt>)
data UGuardedRhs dom stage
UGuardedRhs :: AnnListG URhsGuard dom stage -> Ann UExpr dom stage -> UGuardedRhs dom stage

-- | Cannot be empty.
[_guardStmts] :: UGuardedRhs dom stage -> AnnListG URhsGuard dom stage
[_guardExpr] :: UGuardedRhs dom stage -> Ann UExpr dom stage

-- | Guards for value bindings and pattern matches (<tt> Just v <a>x, v</a>
--   1 </tt>)
data URhsGuard dom stage

-- | A bind statement in a pattern guard (<tt> Just v &lt;- x </tt>)
UGuardBind :: Ann UPattern dom stage -> Ann UExpr dom stage -> URhsGuard dom stage
[_guardPat] :: URhsGuard dom stage -> Ann UPattern dom stage
[_guardRhs] :: URhsGuard dom stage -> Ann UExpr dom stage

-- | A let statement in a pattern guard (<tt> let x = 3 </tt>)
UGuardLet :: AnnListG ULocalBind dom stage -> URhsGuard dom stage
[_guardBinds] :: URhsGuard dom stage -> AnnListG ULocalBind dom stage

-- | An expression to check for a pattern guard
UGuardCheck :: Ann UExpr dom stage -> URhsGuard dom stage
[_guardCheck] :: URhsGuard dom stage -> Ann UExpr dom stage

-- | Pragmas that control how the definitions will be inlined
data UInlinePragma dom stage

-- | A pragma that marks a function for inlining to the compiler (<tt> {--}
--   </tt>)
UInlinePragma :: AnnMaybeG UConlikeAnnot dom stage -> AnnMaybeG UPhaseControl dom stage -> Ann UName dom stage -> UInlinePragma dom stage
[_inlineConlike] :: UInlinePragma dom stage -> AnnMaybeG UConlikeAnnot dom stage
[_inlinePhase] :: UInlinePragma dom stage -> AnnMaybeG UPhaseControl dom stage
[_inlineDef] :: UInlinePragma dom stage -> Ann UName dom stage

-- | A pragma that forbids a function from being inlined by the compiler
--   (<tt> {--} </tt>)
UNoInlinePragma :: Ann UName dom stage -> UInlinePragma dom stage
[_noInlineDef] :: UInlinePragma dom stage -> Ann UName dom stage

-- | A pragma that marks a function that it may be inlined by the compiler
--   (<tt> {--} </tt>)
UInlinablePragma :: AnnMaybeG UPhaseControl dom stage -> Ann UName dom stage -> UInlinePragma dom stage
[_inlinePhase] :: UInlinePragma dom stage -> AnnMaybeG UPhaseControl dom stage
[_inlinableDef] :: UInlinePragma dom stage -> Ann UName dom stage

-- | A <tt>CONLIKE</tt> modifier for an <tt>INLINE</tt> pragma.
data UConlikeAnnot dom stage
UConlikeAnnot :: UConlikeAnnot dom stage

-- | Controls the activation of a rewrite rule (<tt> [1] </tt>)
data UPhaseControl dom stage
UPhaseControl :: AnnMaybeG PhaseInvert dom stage -> AnnMaybeG PhaseNumber dom stage -> UPhaseControl dom stage
[_phaseUntil] :: UPhaseControl dom stage -> AnnMaybeG PhaseInvert dom stage
[_phaseNumber] :: UPhaseControl dom stage -> AnnMaybeG PhaseNumber dom stage

-- | Phase number for rewrite rules
data PhaseNumber dom stage
PhaseNumber :: Integer -> PhaseNumber dom stage
[_phaseNum] :: PhaseNumber dom stage -> Integer

-- | A tilde that marks the inversion of the phase number
data PhaseInvert dom stage
PhaseInvert :: PhaseInvert dom stage

-- | Haskell expressions
data UExpr dom stage

-- | A variable or a data constructor (<tt> a </tt>)
UVar :: Ann UName dom stage -> UExpr dom stage
[_exprName] :: UExpr dom stage -> Ann UName dom stage

-- | Literal expression (<tt> 42 </tt>)
ULit :: Ann ULiteral dom stage -> UExpr dom stage
[_exprLit] :: UExpr dom stage -> Ann ULiteral dom stage

-- | An infix operator application (<tt> a + b </tt>)
UInfixApp :: Ann UExpr dom stage -> Ann UOperator dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprLhs] :: UExpr dom stage -> Ann UExpr dom stage
[_exprOperator] :: UExpr dom stage -> Ann UOperator dom stage
[_exprRhs] :: UExpr dom stage -> Ann UExpr dom stage

-- | Prefix operator application (<tt> -x </tt>)
UPrefixApp :: Ann UOperator dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprOperator] :: UExpr dom stage -> Ann UOperator dom stage
[_exprRhs] :: UExpr dom stage -> Ann UExpr dom stage

-- | Function application (<tt> f 4 </tt>)
UApp :: Ann UExpr dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprFun] :: UExpr dom stage -> Ann UExpr dom stage
[_exprArg] :: UExpr dom stage -> Ann UExpr dom stage

-- | Lambda expression (<tt> a b -&gt; a + b </tt>)
ULambda :: AnnListG UPattern dom stage -> Ann UExpr dom stage -> UExpr dom stage

-- | at least one
[_exprBindings] :: UExpr dom stage -> AnnListG UPattern dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage

-- | Local binding (<tt> let x = 2; y = 3 in e x y </tt>)
ULet :: AnnListG ULocalBind dom stage -> Ann UExpr dom stage -> UExpr dom stage

-- | nonempty
[_exprFunBind] :: UExpr dom stage -> AnnListG ULocalBind dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage

-- | If expression (<tt> if a then b else c </tt>)
UIf :: Ann UExpr dom stage -> Ann UExpr dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprCond] :: UExpr dom stage -> Ann UExpr dom stage
[_exprThen] :: UExpr dom stage -> Ann UExpr dom stage
[_exprElse] :: UExpr dom stage -> Ann UExpr dom stage

-- | Multi way if expressions with <tt>MultiWayIf</tt> extension (<tt> if |
--   guard1 -&gt; expr1; guard2 -&gt; expr2 </tt>)
UMultiIf :: AnnListG UGuardedCaseRhs dom stage -> UExpr dom stage
[_exprIfAlts] :: UExpr dom stage -> AnnListG UGuardedCaseRhs dom stage

-- | Pattern matching expression (<tt> case expr of pat1 -&gt; expr1; pat2
--   -&gt; expr2 </tt>)
UCase :: Ann UExpr dom stage -> AnnListG UAlt dom stage -> UExpr dom stage
[_exprCase] :: UExpr dom stage -> Ann UExpr dom stage
[_exprAlts] :: UExpr dom stage -> AnnListG UAlt dom stage

-- | Do-notation expressions (<tt> do x &lt;- act1; act2 </tt>)
UDo :: Ann UDoKind dom stage -> AnnListG UStmt dom stage -> UExpr dom stage
[_doKind] :: UExpr dom stage -> Ann UDoKind dom stage
[_exprStmts] :: UExpr dom stage -> AnnListG UStmt dom stage

-- | Tuple expression (<tt> (e1, e2, e3) </tt>)
UTuple :: AnnListG UExpr dom stage -> UExpr dom stage
[_tupleElems] :: UExpr dom stage -> AnnListG UExpr dom stage

-- | Unboxed tuple expression (<tt> () </tt>)
UUnboxedTuple :: AnnListG UExpr dom stage -> UExpr dom stage
[_tupleElems] :: UExpr dom stage -> AnnListG UExpr dom stage

-- | Tuple section, enabled with <tt>TupleSections</tt> (<tt> (a,,b)
--   </tt>). One of the elements must be missing.
UTupleSection :: AnnListG UTupSecElem dom stage -> UExpr dom stage
[_tupleSectionElems] :: UExpr dom stage -> AnnListG UTupSecElem dom stage

-- | Unboxed tuple section enabled with <tt>TupleSections</tt> (<tt> ()
--   </tt>). One of the elements must be missing.
UUnboxedTupSec :: AnnListG UTupSecElem dom stage -> UExpr dom stage
[_tupleSectionElems] :: UExpr dom stage -> AnnListG UTupSecElem dom stage

-- | List expression: <tt>[1,2,3]</tt>
UList :: AnnListG UExpr dom stage -> UExpr dom stage
[_listElems] :: UExpr dom stage -> AnnListG UExpr dom stage

-- | Parallel array expression: <tt>[: 1,2,3 :]</tt>
UParArray :: AnnListG UExpr dom stage -> UExpr dom stage
[_listElems] :: UExpr dom stage -> AnnListG UExpr dom stage

-- | Parenthesized expression: <tt>( a + b )</tt>
UParen :: Ann UExpr dom stage -> UExpr dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage

-- | Left operator section: <tt>(1+)</tt>
ULeftSection :: Ann UExpr dom stage -> Ann UOperator dom stage -> UExpr dom stage
[_exprLhs] :: UExpr dom stage -> Ann UExpr dom stage
[_exprOperator] :: UExpr dom stage -> Ann UOperator dom stage

-- | Right operator section: <tt>(+1)</tt>
URightSection :: Ann UOperator dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprOperator] :: UExpr dom stage -> Ann UOperator dom stage
[_exprRhs] :: UExpr dom stage -> Ann UExpr dom stage

-- | Record value construction: <tt>Point { x = 3, y = -2 }</tt>
URecCon :: Ann UName dom stage -> AnnListG UFieldUpdate dom stage -> UExpr dom stage
[_exprRecName] :: UExpr dom stage -> Ann UName dom stage
[_exprRecFields] :: UExpr dom stage -> AnnListG UFieldUpdate dom stage

-- | Record value update: <tt>p1 { x = 3, y = -2 }</tt>
URecUpdate :: Ann UExpr dom stage -> AnnListG UFieldUpdate dom stage -> UExpr dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage
[_exprRecFields] :: UExpr dom stage -> AnnListG UFieldUpdate dom stage

-- | Enumeration expression (<tt> [1,3..10] </tt>)
UEnum :: Ann UExpr dom stage -> AnnMaybeG UExpr dom stage -> AnnMaybeG UExpr dom stage -> UExpr dom stage
[_enumFrom] :: UExpr dom stage -> Ann UExpr dom stage
[_enumThen] :: UExpr dom stage -> AnnMaybeG UExpr dom stage
[_enumTo] :: UExpr dom stage -> AnnMaybeG UExpr dom stage

-- | Parallel array enumeration (<tt> [: 1,3 .. 10 :] </tt>)
UParArrayEnum :: Ann UExpr dom stage -> AnnMaybeG UExpr dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_enumFrom] :: UExpr dom stage -> Ann UExpr dom stage
[_enumThen] :: UExpr dom stage -> AnnMaybeG UExpr dom stage
[_enumToFix] :: UExpr dom stage -> Ann UExpr dom stage

-- | List comprehension (<tt> [ (x, y) | x &lt;- xs | y &lt;- ys ] </tt>)
UListComp :: Ann UExpr dom stage -> AnnListG UListCompBody dom stage -> UExpr dom stage
[_compExpr] :: UExpr dom stage -> Ann UExpr dom stage

-- | Can only have 1 element without <tt>ParallelListComp</tt>
[_compBody] :: UExpr dom stage -> AnnListG UListCompBody dom stage

-- | Parallel array comprehensions <tt> [: (x, y) | x &lt;- xs , y &lt;- ys
--   :] </tt> enabled by <tt>ParallelArrays</tt>
UParArrayComp :: Ann UExpr dom stage -> AnnListG UListCompBody dom stage -> UExpr dom stage
[_compExpr] :: UExpr dom stage -> Ann UExpr dom stage

-- | Can only have 1 element without <tt>ParallelListComp</tt>
[_compBody] :: UExpr dom stage -> AnnListG UListCompBody dom stage

-- | Explicit type signature (<tt> x :: Int </tt>)
UTypeSig :: Ann UExpr dom stage -> Ann UType dom stage -> UExpr dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage
[_exprSig] :: UExpr dom stage -> Ann UType dom stage

-- | Explicit type application (<tt> show @Integer (read "5") </tt>)
UExplTypeApp :: Ann UExpr dom stage -> Ann UType dom stage -> UExpr dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage
[_exprType] :: UExpr dom stage -> Ann UType dom stage

-- | <tt>'x</tt> for template haskell reifying of expressions
UVarQuote :: Ann UName dom stage -> UExpr dom stage
[_quotedName] :: UExpr dom stage -> Ann UName dom stage

-- | <tt>''T</tt> for template haskell reifying of types
UTypeQuote :: Ann UName dom stage -> UExpr dom stage
[_quotedName] :: UExpr dom stage -> Ann UName dom stage

-- | Template haskell bracket expression
UBracketExpr :: Ann UBracket dom stage -> UExpr dom stage
[_exprBracket] :: UExpr dom stage -> Ann UBracket dom stage

-- | Template haskell splice expression, for example: <tt>$(gen a)</tt> or
--   <tt>$x</tt>
USplice :: Ann USplice dom stage -> UExpr dom stage
[_exprSplice] :: UExpr dom stage -> Ann USplice dom stage

-- | Template haskell quasi-quotation: <tt>[$quoter|str]</tt>
UQuasiQuoteExpr :: Ann UQuasiQuote dom stage -> UExpr dom stage
[_exprQQ] :: UExpr dom stage -> Ann UQuasiQuote dom stage
UExprPragma :: Ann UExprPragma dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprPragma] :: UExpr dom stage -> Ann UExprPragma dom stage
[_innerExpr] :: UExpr dom stage -> Ann UExpr dom stage

-- | Arrow definition: <tt>proc a -&gt; f -&lt; a+1</tt>
UProc :: Ann UPattern dom stage -> Ann UCmd dom stage -> UExpr dom stage
[_procPattern] :: UExpr dom stage -> Ann UPattern dom stage
[_procExpr] :: UExpr dom stage -> Ann UCmd dom stage

-- | Arrow application: <tt>f -&lt; a+1</tt>
UArrowApp :: Ann UExpr dom stage -> Ann UArrowAppl dom stage -> Ann UExpr dom stage -> UExpr dom stage
[_exprLhs] :: UExpr dom stage -> Ann UExpr dom stage
[_arrowAppl] :: UExpr dom stage -> Ann UArrowAppl dom stage
[_exprRhs] :: UExpr dom stage -> Ann UExpr dom stage

-- | Lambda case ( <tt>case 0 -&gt; 1; 1 -&gt; 2</tt> )
ULamCase :: AnnListG UAlt dom stage -> UExpr dom stage
[_exprAlts] :: UExpr dom stage -> AnnListG UAlt dom stage

-- | Static pointer expression (<tt> static e </tt>). The inner expression
--   must be closed (cannot have variables bound outside)
UStaticPtr :: Ann UExpr dom stage -> UExpr dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage

-- | Unboxed sum expression (<tt> () </tt>).
UUnboxedSum :: AnnListG UUnboxedSumPlaceHolder dom stage -> Ann UExpr dom stage -> AnnListG UUnboxedSumPlaceHolder dom stage -> UExpr dom stage
[_exprSumPlaceholdersBefore] :: UExpr dom stage -> AnnListG UUnboxedSumPlaceHolder dom stage
[_exprInner] :: UExpr dom stage -> Ann UExpr dom stage
[_exprSumPlaceholdersAfter] :: UExpr dom stage -> AnnListG UUnboxedSumPlaceHolder dom stage

-- | A hole in the program <tt>_</tt>, similar to undefined but gives type
--   information. XML expressions omitted
UHole :: UExpr dom stage

-- | Field update expressions
data UFieldUpdate dom stage

-- | Update of a field (<tt> x = 1 </tt>)
UNormalFieldUpdate :: Ann UName dom stage -> Ann UExpr dom stage -> UFieldUpdate dom stage
[_fieldName] :: UFieldUpdate dom stage -> Ann UName dom stage
[_fieldValue] :: UFieldUpdate dom stage -> Ann UExpr dom stage

-- | Update the field to the value of the same name (<tt> x </tt>)
UFieldPun :: Ann UName dom stage -> UFieldUpdate dom stage
[_fieldUpdateName] :: UFieldUpdate dom stage -> Ann UName dom stage

-- | Update the fields of the bounded names to their values (<tt> ..
--   </tt>). Must be the last initializer. Cannot be used in a record
--   update expression.
UFieldWildcard :: Ann UFieldWildcard dom stage -> UFieldUpdate dom stage
[_fieldWildcard] :: UFieldUpdate dom stage -> Ann UFieldWildcard dom stage

-- | Marker for a field wildcard. Only needed to attach semantic
--   information in a type-safe way.
data UFieldWildcard dom stage
FldWildcard :: UFieldWildcard dom stage

-- | An element of a tuple section that can be an expression or missing
--   (indicating a value from a parameter)
data UTupSecElem dom stage

-- | An existing element in a tuple section
Present :: Ann UExpr dom stage -> UTupSecElem dom stage
[_tupSecExpr] :: UTupSecElem dom stage -> Ann UExpr dom stage

-- | A missing element in a tuple section
Missing :: UTupSecElem dom stage

-- | Clause of case expression (<tt> Just x -&gt; x + 1 </tt>)
data UAlt' expr dom stage
UAlt :: Ann UPattern dom stage -> Ann (UCaseRhs' expr) dom stage -> AnnMaybeG ULocalBinds dom stage -> UAlt' expr dom stage
[_altPattern] :: UAlt' expr dom stage -> Ann UPattern dom stage
[_altRhs] :: UAlt' expr dom stage -> Ann (UCaseRhs' expr) dom stage
[_altBinds] :: UAlt' expr dom stage -> AnnMaybeG ULocalBinds dom stage
type UAlt = UAlt' UExpr
type UCmdAlt = UAlt' UCmd

-- | Right hand side of a match (possible with guards): (<tt> -&gt; 3 </tt>
--   or <tt> | x == 1 -&gt; 3; | otherwise -&gt; 4 </tt>)
data UCaseRhs' expr dom stage

-- | Unguarded right-hand side a pattern match (<tt> -&gt; 3 </tt>)
UUnguardedCaseRhs :: Ann expr dom stage -> UCaseRhs' expr dom stage
[_rhsCaseExpr] :: UCaseRhs' expr dom stage -> Ann expr dom stage

-- | Guarded right-hand sides of a pattern match (<tt> | x == 1 -&gt; 3; |
--   otherwise -&gt; 4 </tt>)
UGuardedCaseRhss :: AnnListG (UGuardedCaseRhs' expr) dom stage -> UCaseRhs' expr dom stage
[_rhsCaseGuards] :: UCaseRhs' expr dom stage -> AnnListG (UGuardedCaseRhs' expr) dom stage
type UCaseRhs = UCaseRhs' UExpr
type UCmdCaseRhs = UCaseRhs' UCmd

-- | A guarded right-hand side of pattern matches binding (<tt> | x &gt; 3
--   -&gt; 2 </tt>)
data UGuardedCaseRhs' expr dom stage
UGuardedCaseRhs :: AnnListG URhsGuard dom stage -> Ann expr dom stage -> UGuardedCaseRhs' expr dom stage

-- | Cannot be empty.
[_caseGuardStmts] :: UGuardedCaseRhs' expr dom stage -> AnnListG URhsGuard dom stage
[_caseGuardExpr] :: UGuardedCaseRhs' expr dom stage -> Ann expr dom stage
type UGuardedCaseRhs = UGuardedCaseRhs' UExpr
type UCmdGuardedCaseRhs = UGuardedCaseRhs' UCmd

-- | Pragmas that can be applied to expressions
data UExprPragma dom stage

-- | A <tt>CORE</tt> pragma for adding notes to expressions.
UCorePragma :: Ann UStringNode dom stage -> UExprPragma dom stage
[_pragmaStr] :: UExprPragma dom stage -> Ann UStringNode dom stage

-- | An <tt>SCC</tt> pragma for defining cost centers for profiling
USccPragma :: Ann UStringNode dom stage -> UExprPragma dom stage
[_pragmaStr] :: UExprPragma dom stage -> Ann UStringNode dom stage

-- | A pragma that describes if an expression was generated from a code
--   fragment by an external tool (<tt> {--} </tt>)
UGeneratedPragma :: Ann USourceRange dom stage -> UExprPragma dom stage
[_pragmaSrcRange] :: UExprPragma dom stage -> Ann USourceRange dom stage

-- | In-AST source ranges (for generated pragmas)
data USourceRange dom stage
USourceRange :: Ann UStringNode dom stage -> Ann Number dom stage -> Ann Number dom stage -> Ann Number dom stage -> Ann Number dom stage -> USourceRange dom stage
[_srFileName] :: USourceRange dom stage -> Ann UStringNode dom stage
[_srFromLine] :: USourceRange dom stage -> Ann Number dom stage
[_srFromCol] :: USourceRange dom stage -> Ann Number dom stage
[_srToLine] :: USourceRange dom stage -> Ann Number dom stage
[_srToCol] :: USourceRange dom stage -> Ann Number dom stage
data Number dom stage
Number :: Integer -> Number dom stage
[_numberInteger] :: Number dom stage -> Integer
data UCmd dom stage

-- | An arrow application command (<tt> f -&lt; x + 1 </tt>)
UArrowAppCmd :: Ann UExpr dom stage -> Ann UArrowAppl dom stage -> Ann UExpr dom stage -> UCmd dom stage
[_cmdLhs] :: UCmd dom stage -> Ann UExpr dom stage
[_cmdArrowOp] :: UCmd dom stage -> Ann UArrowAppl dom stage
[_cmdRhs] :: UCmd dom stage -> Ann UExpr dom stage

-- | A form command (<tt> (|untilA (increment -&lt; x+y) (within 0.5 -&lt;
--   x)|) </tt>)
UArrowFormCmd :: Ann UExpr dom stage -> AnnListG UCmd dom stage -> UCmd dom stage
[_cmdExpr] :: UCmd dom stage -> Ann UExpr dom stage
[_cmdInnerCmds] :: UCmd dom stage -> AnnListG UCmd dom stage

-- | A function application command
UAppCmd :: Ann UCmd dom stage -> Ann UExpr dom stage -> UCmd dom stage
[_cmdInnerCmd] :: UCmd dom stage -> Ann UCmd dom stage
[_cmdApplied] :: UCmd dom stage -> Ann UExpr dom stage

-- | An infix command application
UInfixCmd :: Ann UCmd dom stage -> Ann UName dom stage -> Ann UCmd dom stage -> UCmd dom stage
[_cmdLeftCmd] :: UCmd dom stage -> Ann UCmd dom stage
[_cmdOperator] :: UCmd dom stage -> Ann UName dom stage
[_cmdRightCmd] :: UCmd dom stage -> Ann UCmd dom stage

-- | A lambda command
ULambdaCmd :: AnnListG UPattern dom stage -> Ann UCmd dom stage -> UCmd dom stage

-- | at least one
[_cmdBindings] :: UCmd dom stage -> AnnListG UPattern dom stage
[_cmdInner] :: UCmd dom stage -> Ann UCmd dom stage

-- | A parenthesized command
UParenCmd :: Ann UCmd dom stage -> UCmd dom stage
[_cmdInner] :: UCmd dom stage -> Ann UCmd dom stage

-- | A pattern match command
UCaseCmd :: Ann UExpr dom stage -> AnnListG UCmdAlt dom stage -> UCmd dom stage
[_cmdExpr] :: UCmd dom stage -> Ann UExpr dom stage
[_cmdAlts] :: UCmd dom stage -> AnnListG UCmdAlt dom stage

-- | An if command (<tt> if f x y then g -&lt; x+1 else h -&lt; y+2 </tt>)
UIfCmd :: Ann UExpr dom stage -> Ann UCmd dom stage -> Ann UCmd dom stage -> UCmd dom stage
[_cmdExpr] :: UCmd dom stage -> Ann UExpr dom stage
[_cmdThen] :: UCmd dom stage -> Ann UCmd dom stage
[_cmdElse] :: UCmd dom stage -> Ann UCmd dom stage

-- | A local binding command (<tt> let z = x+y </tt>)
ULetCmd :: AnnListG ULocalBind dom stage -> Ann UCmd dom stage -> UCmd dom stage

-- | nonempty
[_cmdBinds] :: UCmd dom stage -> AnnListG ULocalBind dom stage
[_cmdInner] :: UCmd dom stage -> Ann UCmd dom stage

-- | A do-notation in a command
UDoCmd :: AnnListG UCmdStmt dom stage -> UCmd dom stage
[_cmdStmts] :: UCmd dom stage -> AnnListG UCmdStmt dom stage
data UArrowAppl dom stage

-- | Left arrow application: <tt>-&lt;</tt>
ULeftAppl :: UArrowAppl dom stage

-- | Right arrow application: <tt>&gt;-</tt>
URightAppl :: UArrowAppl dom stage

-- | Left arrow high application: <tt>-&lt;&lt;</tt>
ULeftHighApp :: UArrowAppl dom stage

-- | Right arrow high application: <tt>&gt;&gt;-</tt>
URightHighApp :: UArrowAppl dom stage
data UUnboxedSumPlaceHolder dom stage
UUnboxedSumPlaceHolder :: UUnboxedSumPlaceHolder dom stage

-- | Normal monadic statements
data UStmt' expr dom stage

-- | Binding statement (<tt> x &lt;- action </tt>)
UBindStmt :: Ann UPattern dom stage -> Ann expr dom stage -> UStmt' expr dom stage
[_stmtPattern] :: UStmt' expr dom stage -> Ann UPattern dom stage
[_stmtExpr] :: UStmt' expr dom stage -> Ann expr dom stage

-- | Non-binding statement (<tt> action </tt>)
UExprStmt :: Ann expr dom stage -> UStmt' expr dom stage
[_stmtExpr] :: UStmt' expr dom stage -> Ann expr dom stage

-- | Let statement (<tt> let x = 3; y = 4 </tt>)
ULetStmt :: AnnListG ULocalBind dom stage -> UStmt' expr dom stage
[_stmtBinds] :: UStmt' expr dom stage -> AnnListG ULocalBind dom stage

-- | A recursive binding statement with (<tt> rec b &lt;- f a c; c &lt;- f
--   b a </tt>)
URecStmt :: AnnListG (UStmt' expr) dom stage -> UStmt' expr dom stage
[_cmdStmtBinds] :: UStmt' expr dom stage -> AnnListG (UStmt' expr) dom stage
type UStmt = UStmt' UExpr
type UCmdStmt = UStmt' UCmd

-- | Body of a list comprehension: (<tt> | x &lt;- [1..10] </tt>)
data UListCompBody dom stage
UListCompBody :: AnnListG UCompStmt dom stage -> UListCompBody dom stage
[_compStmts] :: UListCompBody dom stage -> AnnListG UCompStmt dom stage

-- | List comprehension statement
data UCompStmt dom stage

-- | Normal monadic statement of a list comprehension
UCompStmt :: Ann UStmt dom stage -> UCompStmt dom stage
[_compStmt] :: UCompStmt dom stage -> Ann UStmt dom stage

-- | Then statements by <tt>TransformListComp</tt> (<tt> then sortWith by
--   (x + y) </tt>)
UThenStmt :: Ann UExpr dom stage -> AnnMaybeG UExpr dom stage -> UCompStmt dom stage
[_thenExpr] :: UCompStmt dom stage -> Ann UExpr dom stage
[_byExpr] :: UCompStmt dom stage -> AnnMaybeG UExpr dom stage

-- | Grouping statements by <tt>TransformListComp</tt> (<tt> then group by
--   (x + y) using groupWith </tt>) Note: either byExpr or usingExpr must
--   have a value
UGroupStmt :: AnnMaybeG UExpr dom stage -> AnnMaybeG UExpr dom stage -> UCompStmt dom stage
[_byExpr] :: UCompStmt dom stage -> AnnMaybeG UExpr dom stage
[_usingExpr] :: UCompStmt dom stage -> AnnMaybeG UExpr dom stage

-- | Keywords <tt>do</tt> or <tt>mdo</tt> to start a do-block
data UDoKind dom stage
UDoKeyword :: UDoKind dom stage
UMDoKeyword :: UDoKind dom stage

-- | Representation of patterns for pattern bindings
data UPattern dom stage

-- | Pattern name binding
UVarPat :: Ann UName dom stage -> UPattern dom stage
[_patternName] :: UPattern dom stage -> Ann UName dom stage

-- | Literal pattern
ULitPat :: Ann ULiteral dom stage -> UPattern dom stage
[_patternLiteral] :: UPattern dom stage -> Ann ULiteral dom stage

-- | Infix constructor application pattern (<tt> a :+: b </tt>)
UInfixAppPat :: Ann UPattern dom stage -> Ann UOperator dom stage -> Ann UPattern dom stage -> UPattern dom stage
[_patternLhs] :: UPattern dom stage -> Ann UPattern dom stage
[_patternOperator] :: UPattern dom stage -> Ann UOperator dom stage
[_patternRhs] :: UPattern dom stage -> Ann UPattern dom stage

-- | Constructor application pattern (<tt> Point x y </tt>)
UAppPat :: Ann UName dom stage -> AnnListG UPattern dom stage -> UPattern dom stage
[_patternName] :: UPattern dom stage -> Ann UName dom stage
[_patternArgs] :: UPattern dom stage -> AnnListG UPattern dom stage

-- | Tuple pattern (<tt> (x,y) </tt>)
UTuplePat :: AnnListG UPattern dom stage -> UPattern dom stage
[_patternElems] :: UPattern dom stage -> AnnListG UPattern dom stage

-- | Unboxed tuple pattern (<tt> () </tt>)
UUnboxTuplePat :: AnnListG UPattern dom stage -> UPattern dom stage
[_patternElems] :: UPattern dom stage -> AnnListG UPattern dom stage

-- | List pattern (<tt> [1,2,a,x] </tt>)
UListPat :: AnnListG UPattern dom stage -> UPattern dom stage
[_patternElems] :: UPattern dom stage -> AnnListG UPattern dom stage

-- | Parallel array pattern (<tt> [:1,2,a,x:] </tt>)
UParArrPat :: AnnListG UPattern dom stage -> UPattern dom stage
[_patternElems] :: UPattern dom stage -> AnnListG UPattern dom stage

-- | Parenthesised patterns
UParenPat :: Ann UPattern dom stage -> UPattern dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage

-- | Record pattern (<tt> Point { x = 3, y } </tt>)
URecPat :: Ann UName dom stage -> AnnListG UPatternField dom stage -> UPattern dom stage
[_patternName] :: UPattern dom stage -> Ann UName dom stage
[_patternFields] :: UPattern dom stage -> AnnListG UPatternField dom stage

-- | As-pattern (explicit name binding) (<tt> ls@(hd:_) </tt>)
UAsPat :: Ann UName dom stage -> Ann UPattern dom stage -> UPattern dom stage
[_patternName] :: UPattern dom stage -> Ann UName dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage

-- | Wildcard pattern: (<tt> _ </tt>)
UWildPat :: UPattern dom stage

-- | Irrefutable pattern (<tt> ~(x:_) </tt>)
UIrrefutablePat :: Ann UPattern dom stage -> UPattern dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage

-- | Bang pattern (<tt> !x </tt>)
UBangPat :: Ann UPattern dom stage -> UPattern dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage

-- | Pattern with explicit type signature (<tt> x :: Int </tt>)
UTypeSigPat :: Ann UPattern dom stage -> Ann UType dom stage -> UPattern dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage
[_patternType] :: UPattern dom stage -> Ann UType dom stage

-- | View pattern (<tt> f -&gt; Just 1 </tt>) regular list pattern omitted
--   xml patterns omitted
UViewPat :: Ann UExpr dom stage -> Ann UPattern dom stage -> UPattern dom stage
[_patternExpr] :: UPattern dom stage -> Ann UExpr dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage

-- | Splice patterns: <tt>$(generateX inp)</tt>
USplicePat :: Ann USplice dom stage -> UPattern dom stage
[_patternSplice] :: UPattern dom stage -> Ann USplice dom stage

-- | Quasi-quoted patterns: <tt>[| 1 + 2 |]</tt>
UQuasiQuotePat :: Ann UQuasiQuote dom stage -> UPattern dom stage
[_patQQ] :: UPattern dom stage -> Ann UQuasiQuote dom stage
UNPlusKPat :: Ann UName dom stage -> Ann ULiteral dom stage -> UPattern dom stage
[_patternName] :: UPattern dom stage -> Ann UName dom stage
[_patternLit] :: UPattern dom stage -> Ann ULiteral dom stage

-- | Unboxed sum pattern (<tt> () </tt>).
UUnboxedSumPat :: AnnListG UUnboxedSumPlaceHolder dom stage -> Ann UPattern dom stage -> AnnListG UUnboxedSumPlaceHolder dom stage -> UPattern dom stage
[_patternSumPlaceholdersBefore] :: UPattern dom stage -> AnnListG UUnboxedSumPlaceHolder dom stage
[_patternInner] :: UPattern dom stage -> Ann UPattern dom stage
[_patternSumPlaceholdersAfter] :: UPattern dom stage -> AnnListG UUnboxedSumPlaceHolder dom stage
data UPatternField dom stage

-- | Named field pattern (<tt> p = Point 3 2 </tt>)
UNormalFieldPattern :: Ann UName dom stage -> Ann UPattern dom stage -> UPatternField dom stage
[_fieldPatternName] :: UPatternField dom stage -> Ann UName dom stage
[_fieldPattern] :: UPatternField dom stage -> Ann UPattern dom stage

-- | Named field pun (<tt> p </tt>)
UFieldPunPattern :: Ann UName dom stage -> UPatternField dom stage
[_fieldPatternName] :: UPatternField dom stage -> Ann UName dom stage

-- | Wildcard field pattern (<tt> .. </tt>)
UFieldWildcardPattern :: Ann UFieldWildcard dom stage -> UPatternField dom stage
[_fieldPatternWildcard] :: UPatternField dom stage -> Ann UFieldWildcard dom stage

-- | Type variable declaration
data UTyVar dom stage
UTyVarDecl :: Ann UName dom stage -> AnnMaybeG UKindConstraint dom stage -> UTyVar dom stage
[_tyVarName] :: UTyVar dom stage -> Ann UName dom stage
[_tyVarKind] :: UTyVar dom stage -> AnnMaybeG UKindConstraint dom stage

-- | Haskell types
data UType dom stage

-- | Forall types (<tt> forall x y . type </tt>)
UTyForall :: AnnListG UTyVar dom stage -> Ann UType dom stage -> UType dom stage
[_typeBounded] :: UType dom stage -> AnnListG UTyVar dom stage
[_typeType] :: UType dom stage -> Ann UType dom stage

-- | Type with a context (<tt> forall x y . type </tt>)
UTyCtx :: Ann UContext dom stage -> Ann UType dom stage -> UType dom stage
[_typeCtx] :: UType dom stage -> Ann UContext dom stage
[_typeType] :: UType dom stage -> Ann UType dom stage

-- | Function types (<tt> a -&gt; b </tt>)
UTyFun :: Ann UType dom stage -> Ann UType dom stage -> UType dom stage
[_typeParam] :: UType dom stage -> Ann UType dom stage
[_typeResult] :: UType dom stage -> Ann UType dom stage

-- | Tuple types (<tt> (a,b) </tt>)
UTyTuple :: AnnListG UType dom stage -> UType dom stage
[_typeElements] :: UType dom stage -> AnnListG UType dom stage

-- | Unboxed tuple types (<tt> () </tt>)
UTyUnbTuple :: AnnListG UType dom stage -> UType dom stage
[_typeElements] :: UType dom stage -> AnnListG UType dom stage

-- | List type with special syntax (<tt> [a] </tt>)
UTyList :: Ann UType dom stage -> UType dom stage
[_typeElement] :: UType dom stage -> Ann UType dom stage

-- | Parallel array type (<tt> [:a:] </tt>)
UTyParArray :: Ann UType dom stage -> UType dom stage
[_typeElement] :: UType dom stage -> Ann UType dom stage

-- | Type application (<tt> F a </tt>)
UTyApp :: Ann UType dom stage -> Ann UType dom stage -> UType dom stage
[_typeCon] :: UType dom stage -> Ann UType dom stage
[_typeArg] :: UType dom stage -> Ann UType dom stage

-- | Type variable or constructor (<tt> a </tt>)
UTyVar :: Ann UName dom stage -> UType dom stage
[_typeName] :: UType dom stage -> Ann UName dom stage

-- | Type surrounded by parentheses (<tt> (T a) </tt>)
UTyParen :: Ann UType dom stage -> UType dom stage
[_typeInner] :: UType dom stage -> Ann UType dom stage

-- | Infix type constructor (<tt> (a &lt;: b) </tt>)
UTyInfix :: Ann UType dom stage -> Ann UOperator dom stage -> Ann UType dom stage -> UType dom stage
[_typeLeft] :: UType dom stage -> Ann UType dom stage
[_typeOperator] :: UType dom stage -> Ann UOperator dom stage
[_typeRight] :: UType dom stage -> Ann UType dom stage

-- | Type with explicit kind signature (<tt> a :: * </tt>)
UTyKinded :: Ann UType dom stage -> Ann UKind dom stage -> UType dom stage
[_typeInner] :: UType dom stage -> Ann UType dom stage
[_typeKind] :: UType dom stage -> Ann UKind dom stage
UTyPromoted :: Ann (UPromoted UType) dom stage -> UType dom stage
[_tpPromoted] :: UType dom stage -> Ann (UPromoted UType) dom stage

-- | A Template Haskell splice type (<tt> $(genType) </tt>).
UTySplice :: Ann USplice dom stage -> UType dom stage
[_tsSplice] :: UType dom stage -> Ann USplice dom stage

-- | A Template Haskell quasi-quote type (<tt> [quoter| ... ] </tt>).
UTyQuasiQuote :: Ann UQuasiQuote dom stage -> UType dom stage
[_typeQQ] :: UType dom stage -> Ann UQuasiQuote dom stage

-- | Strict type marked with <tt>!</tt>.
UTyBang :: Ann UType dom stage -> UType dom stage
[_typeInner] :: UType dom stage -> Ann UType dom stage

-- | Lazy type marked with <tt>~</tt>. (Should only be used if
--   <tt>Strict</tt> or <tt>StrictData</tt> language extension is used)
UTyLazy :: Ann UType dom stage -> UType dom stage
[_typeInner] :: UType dom stage -> Ann UType dom stage

-- | Strict type marked with UNPACK pragma. (Usually contains the bang
--   mark.)
UTyUnpack :: Ann UType dom stage -> UType dom stage
[_typeInner] :: UType dom stage -> Ann UType dom stage

-- | Strict type marked with NOUNPACK pragma. (Usually contains the bang
--   mark.)
UTyNoUnpack :: Ann UType dom stage -> UType dom stage
[_typeInner] :: UType dom stage -> Ann UType dom stage

-- | A wildcard type (<tt> _ </tt>) with <tt>-XPartialTypeSignatures</tt>
UTyWildcard :: UType dom stage

-- | A named wildcard type (<tt> _t </tt>) with
--   <tt>-XPartialTypeSignatures</tt>
UTyNamedWildc :: Ann UName dom stage -> UType dom stage
[_typeWildcardName] :: UType dom stage -> Ann UName dom stage

-- | An unboxed sum type (<tt> () </tt>)
UUnbSumType :: AnnListG UType dom stage -> UType dom stage
[_typeElements] :: UType dom stage -> AnnListG UType dom stage
data UContext dom stage

-- | Assertions with the fat arrow (<tt> C a =&gt; ... </tt>)
UContext :: Ann UAssertion dom stage -> UContext dom stage
[_contextAssertion] :: UContext dom stage -> Ann UAssertion dom stage

-- | A single assertion in the context
data UAssertion dom stage

-- | Class assertion (<tt>Cls x</tt>)
UClassAssert :: Ann UName dom stage -> AnnListG UType dom stage -> UAssertion dom stage
[_assertClsName] :: UAssertion dom stage -> Ann UName dom stage
[_assertTypes] :: UAssertion dom stage -> AnnListG UType dom stage

-- | Infix class assertion, also contains type equations (<tt> a ~ X y
--   </tt>)
UInfixAssert :: Ann UType dom stage -> Ann UOperator dom stage -> Ann UType dom stage -> UAssertion dom stage
[_assertLhs] :: UAssertion dom stage -> Ann UType dom stage
[_assertOp] :: UAssertion dom stage -> Ann UOperator dom stage
[_assertRhs] :: UAssertion dom stage -> Ann UType dom stage

-- | Assertion for implicit parameter binding (<tt> ?cmp :: a -&gt; a -&gt;
--   Bool </tt>)
UImplicitAssert :: Ann UName dom stage -> Ann UType dom stage -> UAssertion dom stage
[_assertImplVar] :: UAssertion dom stage -> Ann UName dom stage
[_assertImplType] :: UAssertion dom stage -> Ann UType dom stage

-- | Multiple assertions in one (<tt> (Ord a, Show a) </tt>)
UTupleAssert :: AnnListG UAssertion dom stage -> UAssertion dom stage
[_innerAsserts] :: UAssertion dom stage -> AnnListG UAssertion dom stage

-- | Wildcard assertion (<tt> _ </tt>), enabled by
--   <tt>PartialTypeSignatures</tt>
UWildcardAssert :: UAssertion dom stage

-- | Kind constraint (<tt> :: * -&gt; * </tt>)
data UKindConstraint dom stage
UKindConstraint :: Ann UKind dom stage -> UKindConstraint dom stage
[_kindConstr] :: UKindConstraint dom stage -> Ann UKind dom stage

-- | Haskell kinds
data UKind dom stage

-- | <tt>*</tt>, the kind of types
UStarKind :: UKind dom stage

-- | <tt>#</tt>, the kind of unboxed types
UUnboxKind :: UKind dom stage

-- | <tt>-&gt;</tt>, the kind of type constructor
UFunKind :: Ann UKind dom stage -> Ann UKind dom stage -> UKind dom stage
[_kindLeft] :: UKind dom stage -> Ann UKind dom stage
[_kindRight] :: UKind dom stage -> Ann UKind dom stage

-- | A parenthesised kind
UParenKind :: Ann UKind dom stage -> UKind dom stage
[_kindParen] :: UKind dom stage -> Ann UKind dom stage

-- | Kind variable (using <tt>PolyKinds</tt> extension)
UVarKind :: Ann UName dom stage -> UKind dom stage
[_kindVar] :: UKind dom stage -> Ann UName dom stage

-- | Kind application (<tt> k1 k2 </tt>)
UAppKind :: Ann UKind dom stage -> Ann UKind dom stage -> UKind dom stage
[_kindAppFun] :: UKind dom stage -> Ann UKind dom stage
[_kindAppArg] :: UKind dom stage -> Ann UKind dom stage

-- | Infix kind application (<tt> k1 ~&gt; k2 </tt>)
UInfixAppKind :: Ann UKind dom stage -> Ann UOperator dom stage -> Ann UKind dom stage -> UKind dom stage
[_kindLhs] :: UKind dom stage -> Ann UKind dom stage
[_kindAppOp] :: UKind dom stage -> Ann UOperator dom stage
[_kindRhs] :: UKind dom stage -> Ann UKind dom stage

-- | A list kind (<tt> [k] </tt>)
UListKind :: Ann UKind dom stage -> UKind dom stage
[_kindElem] :: UKind dom stage -> Ann UKind dom stage

-- | A tuple kind (<tt> (Symbol, *) </tt>)
UTupleKind :: AnnListG UKind dom stage -> UKind dom stage
[_kindElems] :: UKind dom stage -> AnnListG UKind dom stage

-- | A promoted kind (<tt> '(k1,k2,k3) </tt>)
UPromotedKind :: Ann (UPromoted UKind) dom stage -> UKind dom stage
[_kindPromoted] :: UKind dom stage -> Ann (UPromoted UKind) dom stage

-- | A type on the kind level with <tt>TypeInType</tt>
UTypeKind :: Ann UType dom stage -> UKind dom stage
[_kindType] :: UKind dom stage -> Ann UType dom stage
data UPromoted t dom stage

-- | Numeric value promoted to the kind level.
UPromotedInt :: Integer -> UPromoted t dom stage
[_promotedIntValue] :: UPromoted t dom stage -> Integer

-- | String value promoted to the kind level.
UPromotedString :: String -> UPromoted t dom stage
[_promotedStringValue] :: UPromoted t dom stage -> String

-- | A data constructor value promoted to the kind level.
UPromotedCon :: Ann UName dom stage -> UPromoted t dom stage
[_promotedConName] :: UPromoted t dom stage -> Ann UName dom stage

-- | A list of elements as a kind.
UPromotedList :: AnnListG t dom stage -> UPromoted t dom stage
[_promotedElements] :: UPromoted t dom stage -> AnnListG t dom stage

-- | A tuple of elements as a kind.
UPromotedTuple :: AnnListG t dom stage -> UPromoted t dom stage
[_promotedElements] :: UPromoted t dom stage -> AnnListG t dom stage

-- | Kind of the unit value <tt>()</tt>.
UPromotedUnit :: UPromoted t dom stage

-- | Haskell literals
data ULiteral dom stage

-- | Character literal: <tt><tt>c</tt></tt>
UCharLit :: Char -> ULiteral dom stage
[_charLitValue] :: ULiteral dom stage -> Char

-- | String literal: <tt>"abc"</tt>
UStringLit :: String -> ULiteral dom stage
[_stringLitValue] :: ULiteral dom stage -> String

-- | Integer literal: <tt>12</tt>
UIntLit :: Integer -> ULiteral dom stage
[_intLitValue] :: ULiteral dom stage -> Integer

-- | Fractional literal: <tt>3.14</tt>
UFracLit :: Rational -> ULiteral dom stage
[_fracLitValue] :: ULiteral dom stage -> Rational

-- | Primitive integer literal (of type <tt>Int#</tt>): <tt>32#</tt>
UPrimIntLit :: Integer -> ULiteral dom stage
[_intLitValue] :: ULiteral dom stage -> Integer

-- | Primitive word literal (of type <tt>Word#</tt>): <tt>32##</tt>
UPrimWordLit :: Integer -> ULiteral dom stage
[_intLitValue] :: ULiteral dom stage -> Integer

-- | Primitive float literal (of type <tt>Float#</tt>): <tt>3.14#</tt>
UPrimFloatLit :: Rational -> ULiteral dom stage
[_floatLitValue] :: ULiteral dom stage -> Rational

-- | Primitive double literal (of type <tt>Double#</tt>): <tt>3.14##</tt>
UPrimDoubleLit :: Rational -> ULiteral dom stage
[_floatLitValue] :: ULiteral dom stage -> Rational

-- | Primitive character literal (of type <tt>Char#</tt>):
--   <tt><tt>c</tt>#</tt>
UPrimCharLit :: Char -> ULiteral dom stage
[_charLitValue] :: ULiteral dom stage -> Char

-- | Primitive string literal (of type <tt>Addr#</tt>): <tt>"xxx"#</tt>
UPrimStringLit :: String -> ULiteral dom stage
[_stringLitValue] :: ULiteral dom stage -> String
data UOperator dom stage

-- | A normal name used as an operator with backticks: <tt> a <a>mod</a> b
--   </tt>
UBacktickOp :: Ann UQualifiedName dom stage -> UOperator dom stage
[_operatorName] :: UOperator dom stage -> Ann UQualifiedName dom stage

-- | A normal operator used as an operator.
UNormalOp :: Ann UQualifiedName dom stage -> UOperator dom stage
[_operatorName] :: UOperator dom stage -> Ann UQualifiedName dom stage
data UName dom stage

-- | Parenthesized name: <tt> foldl (+) 0 </tt>
UParenName :: Ann UQualifiedName dom stage -> UName dom stage
[_simpleName] :: UName dom stage -> Ann UQualifiedName dom stage

-- | A normal, non-operator name.
UNormalName :: Ann UQualifiedName dom stage -> UName dom stage
[_simpleName] :: UName dom stage -> Ann UQualifiedName dom stage

-- | Implicit name: <tt> ?var </tt>
UImplicitName :: Ann UQualifiedName dom stage -> UName dom stage
[_simpleName] :: UName dom stage -> Ann UQualifiedName dom stage

-- | Possible qualified names. Contains also implicit names. Linear
--   implicit parameter: <tt>%x</tt>. Non-linear implicit parameter:
--   <tt>?x</tt>.
data UQualifiedName dom stage
UQualifiedName :: AnnListG UNamePart dom stage -> Ann UNamePart dom stage -> UQualifiedName dom stage
[_qualifiers] :: UQualifiedName dom stage -> AnnListG UNamePart dom stage
[_unqualifiedName] :: UQualifiedName dom stage -> Ann UNamePart dom stage
nameFromList :: AnnListG UNamePart dom stage -> UQualifiedName dom stage

-- | Parts of a qualified name.
data UNamePart dom stage
UNamePart :: String -> UNamePart dom stage
[_simpleNameStr] :: UNamePart dom stage -> String

-- | Program elements formatted as string literals (import packages, pragma
--   texts)
data UStringNode dom stage
UStringNode :: String -> UStringNode dom stage
[_stringNodeStr] :: UStringNode dom stage -> String
