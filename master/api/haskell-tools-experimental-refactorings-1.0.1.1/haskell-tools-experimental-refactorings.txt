-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Refactoring Tool for Haskell
--   
--   Contains experimental refactorings implemented in the Haskell-tools
--   framework for tutorial purposes, or to be added later to the set of
--   mature refactorings.
@package haskell-tools-experimental-refactorings
@version 1.0.1.1

module Language.Haskell.Tools.Refactor.Builtin.DataToNewtype
dataToNewtype :: LocalRefactoring
tryItOut :: String -> IO ()

module Language.Haskell.Tools.Refactor.Builtin.DollarApp
dollarApp :: RealSrcSpan -> LocalRefactoring
tryItOut :: String -> String -> IO ()

module Language.Haskell.Tools.Refactor.Builtin.DollarApp1
tryItOut :: String -> String -> IO ()
dollarApp :: RealSrcSpan -> LocalRefactoring
replaceExpr :: Expr -> Expr

module Language.Haskell.Tools.Refactor.Builtin.DollarApp2
tryItOut :: String -> String -> IO ()
dollarApp :: RealSrcSpan -> LocalRefactoring
replaceExpr :: Expr -> LocalRefactor Expr
dollarName :: Name

module Language.Haskell.Tools.Refactor.Builtin.DollarApp3
tryItOut :: String -> String -> IO ()
type DollarMonad = StateT [SrcSpan] LocalRefactor
dollarApp :: RealSrcSpan -> LocalRefactoring
replaceExpr :: Expr -> [SrcSpan] -> DollarMonad Expr
parenExpr :: Expr -> DollarMonad Expr
parenDollar :: Bool -> Expr -> DollarMonad Expr
dollarName :: Name

module Language.Haskell.Tools.Refactor.Builtin.FindUnused
data UnusedState
UnusedState :: Set Name -> Set Name -> UnusedState
[_defined] :: UnusedState -> Set Name
[_used] :: UnusedState -> Set Name
initState :: UnusedState
used :: Lens UnusedState UnusedState (Set Name) (Set Name)
defined :: Lens UnusedState UnusedState (Set Name) (Set Name)
findUnusedRefactoring :: RefactoringChoice
findUnused :: ProjectRefactoring
recordName :: QualifiedName -> State UnusedState QualifiedName

module Language.Haskell.Tools.Refactor.Builtin.HelloRefactor
tryItOut :: String -> String -> IO ()
helloRefactor :: RealSrcSpan -> LocalRefactoring
helloExpr :: Expr -> Expr

module Language.Haskell.Tools.Refactor.Builtin.IfToGuards
ifToGuards :: RealSrcSpan -> LocalRefactoring
tryItOut :: String -> String -> IO ()
