-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Refactoring Tool for Haskell
--   
--   Contains a set of refactorings based on the Haskell-Tools framework to
--   easily transform a Haskell program. For the descriptions of the
--   implemented refactorings, see the homepage.
@package haskell-tools-builtin-refactorings
@version 1.0.0.0

module Language.Haskell.Tools.Refactor.Builtin.AutoCorrect
autoCorrect :: RealSrcSpan -> LocalRefactoring
tryItOut :: String -> String -> IO ()
autoCorrectRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap
data LogicalRelation a
LVar :: a -> LogicalRelation a
Not :: (LogicalRelation a) -> LogicalRelation a
(:&&:) :: LogicalRelation a -> LogicalRelation a -> LogicalRelation a
(:||:) :: LogicalRelation a -> LogicalRelation a -> LogicalRelation a
type ExtMap = Map (LogicalRelation Extension) [SrcSpan]
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance GHC.Generics.Generic (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance GHC.Base.Functor Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation
instance GHC.Show.Show a => GHC.Show.Show (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance Control.DeepSeq.NFData GHC.LanguageExtensions.Type.Extension

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad
type ExtMonad = ReaderT [Extension] (StateT ExtMap Ghc)
type CheckNode elem = elem -> ExtMonad elem
type CheckUNode uelem = Ann uelem IdDom SrcTemplateStage -> ExtMonad (Ann uelem IdDom SrcTemplateStage)
class Checkable node
check :: Checkable node => CheckNode node
addOccurence' :: (Ord k, HasRange a) => k -> a -> Map k [SrcSpan] -> Map k [SrcSpan]
addOccurence_ :: (MonadState ExtMap m, HasRange node) => Extension -> node -> m ()
addOccurence :: (MonadState ExtMap m, HasRange node) => Extension -> node -> m node
isTurnedOn :: Extension -> ExtMonad Bool
conditional :: (node -> ExtMonad node) -> Extension -> node -> ExtMonad node
conditionalNot :: (node -> ExtMonad node) -> Extension -> node -> ExtMonad node
conditionalAny :: (node -> ExtMonad node) -> [Extension] -> node -> ExtMonad node
conditionalAdd :: HasRange node => Extension -> node -> ExtMonad node
runExtMonadIO :: ExtMonad a -> IO a
runExtMonadGHC :: ExtMonad a -> Ghc a
instance GHC.Classes.Ord GHC.LanguageExtensions.Type.Extension
instance GHC.Read.Read GHC.LanguageExtensions.Type.Extension

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.Instances.AppSelector

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.Utils.SupportedExtensions
unregularExts :: String -> String
isSupported :: Extension -> Bool
fullyHandledExtensions :: [Extension]
syntacticExtensions :: [Extension]
derivingExtensions :: [Extension]

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.Utils.TypeLookup
chkSynonym :: CheckNode Type
lookupSynDefM :: Type -> MaybeT ExtMonad TyCon
lookupSynDef :: TyThing -> Maybe TyCon
tyconFromTyThing :: TyThing -> Maybe TyCon
tyconFromGHCType :: Type -> Maybe TyCon
isNewtype :: Type -> ExtMonad Bool
lookupType :: Type -> MaybeT ExtMonad TyThing
nameFromType :: Type -> Maybe Name
isNewtypeTyCon :: TyThing -> Bool
getSemName :: Name -> Maybe Name

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.Checkers

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.Instances.Checkable
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Decl
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Pattern
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Expr
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Type
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.PatternField
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.FieldUpdate
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.PatternSynonym
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.PatternSignature
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Literal
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.NamePart
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Kind
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Splice
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.QuasiQuote
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Bracket
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.FunDepList
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.ClassElement
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Stmt
instance Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad.Checkable Language.Haskell.Tools.Rewrite.ElementTypes.Cmd

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.TraverseAST
traverseModule :: CheckNode UnnamedModule

module Language.Haskell.Tools.Refactor.Builtin.ExtractBinding
extractBinding' :: RealSrcSpan -> String -> LocalRefactoring
tryItOut :: String -> String -> String -> IO ()
extractBindingRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.FloatOut
floatOut :: RealSrcSpan -> LocalRefactoring
floatOutRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.GenerateExports

-- | Creates an export list that imports standalone top-level definitions
--   with all of their contained definitions
generateExports :: LocalRefactoring
generateExportsRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.GenerateTypeSignature

-- | Perform the refactoring on either local or top-level definition
generateTypeSignature :: Simple Traversal Module DeclList -> Simple Traversal Module LocalBindList -> (forall d. (BindingElem d) => AnnList d -> Maybe ValueBind) -> LocalRefactoring
generateTypeSignature' :: RealSrcSpan -> LocalRefactoring
tryItOut :: String -> String -> IO ()
generateTypeSignatureRefactoring :: RefactoringChoice


-- | Defines the inline binding refactoring that removes a value binding
--   and replaces all occurences with an expression equivalent to the body
--   of the binding.
module Language.Haskell.Tools.Refactor.Builtin.InlineBinding
inlineBinding :: RealSrcSpan -> Refactoring
tryItOut :: String -> String -> IO ()
inlineBindingRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.OrganizeExtensions
organizeExtensionsRefactoring :: RefactoringChoice
projectOrganizeExtensionsRefactoring :: RefactoringChoice
projectOrganizeExtensions :: ProjectRefactoring
tryOut :: String -> String -> IO ()
organizeExtensions :: LocalRefactoring

-- | Reduces default extension list (keeps unsupported extensions)
reduceExtensions :: UnnamedModule -> Ghc [Extension]

-- | Collects extensions induced by the source code (with location info)
collectExtensions :: UnnamedModule -> Ghc ExtMap
collectExtensionsWith :: CheckNode UnnamedModule -> UnnamedModule -> Ghc ExtMap

-- | Collects default extension list, and expands each extension
expandDefaults :: UnnamedModule -> [Extension]

-- | Collects extensions enabled by default
collectDefaultExtensions :: UnnamedModule -> [Extension]
toExt :: String -> Extension

module Language.Haskell.Tools.Refactor.Builtin.OrganizeImports
organizeImports :: LocalRefactoring
projectOrganizeImports :: ProjectRefactoring
organizeImportsRefactoring :: RefactoringChoice
projectOrganizeImportsRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.RenameDefinition
renameDefinition :: Name -> [Name] -> String -> Refactoring
renameDefinition' :: RealSrcSpan -> String -> Refactoring
renameDefinitionRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin
builtinRefactorings :: [RefactoringChoice]
