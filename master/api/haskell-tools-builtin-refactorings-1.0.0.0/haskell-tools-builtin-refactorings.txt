-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Refactoring Tool for Haskell
--   
--   Contains a set of refactorings based on the Haskell-Tools framework to
--   easily transform a Haskell program. For the descriptions of the
--   implemented refactorings, see the homepage.
@package haskell-tools-builtin-refactorings
@version 1.0.0.0

module Language.Haskell.Tools.Refactor.Builtin.AutoCorrect
autoCorrect :: RealSrcSpan -> LocalRefactoring
tryItOut :: String -> String -> IO ()
autoCorrectRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap
data LogicalRelation a
LVar :: a -> LogicalRelation a
Not :: (LogicalRelation a) -> LogicalRelation a
(:&&:) :: LogicalRelation a -> LogicalRelation a -> LogicalRelation a
(:||:) :: LogicalRelation a -> LogicalRelation a -> LogicalRelation a
type ExtMap = Map (LogicalRelation Extension) [SrcSpan]
instance GHC.Classes.Ord a => GHC.Classes.Ord (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance GHC.Base.Functor Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation
instance GHC.Show.Show a => GHC.Show.Show (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMap.LogicalRelation a)

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.ExtMonad
type ExtMonad = ReaderT [Extension] (StateT ExtMap Ghc)
type CheckNode elem = elem -> ExtMonad elem
type CheckUNode uelem = Ann uelem IdDom SrcTemplateStage -> ExtMonad (Ann uelem IdDom SrcTemplateStage)
addOccurence' :: (Ord k, HasRange a) => k -> a -> Map k [SrcSpan] -> Map k [SrcSpan]
addOccurence_ :: (MonadState ExtMap m, HasRange node) => Extension -> node -> m ()
addOccurence :: (MonadState ExtMap m, HasRange node) => Extension -> node -> m node
isTurnedOn :: Extension -> ExtMonad Bool
conditional :: (node -> ExtMonad node) -> Extension -> node -> ExtMonad node
conditionalNot :: (node -> ExtMonad node) -> Extension -> node -> ExtMonad node
conditionalAny :: (node -> ExtMonad node) -> [Extension] -> node -> ExtMonad node
conditionalAdd :: HasRange node => Extension -> node -> ExtMonad node
runExtMonadIO :: ExtMonad a -> IO a
runExtMonadGHC :: ExtMonad a -> Ghc a
instance GHC.Classes.Ord GHC.LanguageExtensions.Type.Extension
instance GHC.Read.Read GHC.LanguageExtensions.Type.Extension

module Language.Haskell.Tools.Refactor.Builtin.ExtensionOrganizer.TraverseAST
chkDecl :: CheckNode Decl
chkPattern :: CheckNode Pattern
chkExpr :: CheckNode Expr
chkType :: CheckNode Type
chkPatternField :: CheckNode PatternField
chkFieldUpdate :: CheckNode FieldUpdate
chkPatternSynonym :: CheckNode PatternSynonym
chkPatternSignature :: CheckNode PatternSignature
chkLiteral :: CheckNode Literal
chkNamePart :: CheckNode NamePart
chkKind :: CheckNode Kind
traverseModule :: CheckNode UnnamedModule
traverseModuleHead :: CheckNode ModuleHead
traverseExportSpecs :: CheckNode ExportSpecs
traverseExportSpec :: CheckNode ExportSpec
traverseIESpec :: CheckNode IESpec
traverseSubSpec :: CheckNode SubSpec
traverseDecl :: CheckNode Decl
traverseTypeFamily :: CheckNode TypeFamily
traverseTypeFamilySpec :: CheckNode TypeFamilySpec
traverseInjectivityAnn :: CheckNode InjectivityAnn
traverseSafety :: CheckNode Safety
traverseRole :: CheckNode Role
traverseTopLevelPragma :: CheckNode TopLevelPragma
traverseSpecializePragma :: CheckUNode USpecializePragma
traverseAnnotationSubject :: CheckNode AnnotationSubject
traverseRule :: CheckNode Rule
traverseRuleVar :: CheckNode RuleVar
traversePatternSignature :: CheckNode PatternSignature
traverseOverlapPragma :: CheckNode OverlapPragma
traverseInstanceRule :: CheckNode InstanceRule
traverseInstanceHead :: CheckNode InstanceHead
traverseDeclHead :: CheckNode DeclHead
traverseGadtConDecl :: CheckNode GadtConDecl
traverseGadtConType :: CheckNode GadtConType
traverseFieldDecl :: CheckNode FieldDecl
traverseFunDeps :: CheckNode FunDeps
traverseFunDep :: CheckNode FunDep
traverseDeriving :: CheckNode Deriving
traverseConDecl :: CheckNode ConDecl
traverseCallConv :: CheckNode CallConv
traverseMinimalFormula :: CheckNode MinimalFormula
traverseInlinePragma :: CheckUNode UInlinePragma
traversePatternSynonym :: CheckNode PatternSynonym
traverseMatch :: CheckNode Match
traverseMatchLhs :: CheckNode MatchLhs
traverseRhs :: CheckNode Rhs
traverseGuardedRhs :: CheckNode GuardedRhs
traverseRhsGuard :: CheckNode RhsGuard
traverseLocalBinds :: CheckNode LocalBinds
traverseLocalBind :: CheckNode LocalBind
traverseInstBody :: CheckNode InstBody
traverseInstBodyDecl :: CheckNode InstBodyDecl
traverseTypeEqn :: CheckNode TypeEqn
traverseClassBody :: CheckNode ClassBody
traverseClassElem :: CheckNode ClassElement
traverseValueBind :: CheckNode ValueBind
traversePattern :: CheckNode Pattern
traversePatternField :: CheckNode PatternField
traverseExpr :: CheckNode Expr
type AltG uexpr dom = Ann (UAlt' uexpr) dom SrcTemplateStage
type StmtG uexpr dom = Ann (UStmt' uexpr) dom SrcTemplateStage
type CaseRhsG uexpr dom = Ann (UCaseRhs' uexpr) dom SrcTemplateStage
type GuardedCaseRhsG uexpr dom = Ann (UGuardedCaseRhs' uexpr) dom SrcTemplateStage
type PromotedG t dom = Ann (UPromoted t) dom SrcTemplateStage
traverseAlt :: CheckUNode uexpr -> CheckNode (AltG uexpr IdDom)
traverseCaseRhs :: CheckUNode uexpr -> CheckNode (CaseRhsG uexpr IdDom)
traverseGuardedCaseRhs :: CheckUNode uexpr -> CheckNode (GuardedCaseRhsG uexpr IdDom)
traverseStmt :: CheckUNode uexpr -> CheckNode (StmtG uexpr IdDom)
traversePromoted :: CheckUNode t -> CheckNode (PromotedG t IdDom)
traverseTupSecElem :: CheckNode TupSecElem
traverseFieldUpdate :: CheckNode FieldUpdate
traverseListCompBody :: CheckNode ListCompBody
traverseCompStmt :: CheckNode CompStmt
traverseCmd :: CheckNode Cmd
traverseSplice :: CheckNode Splice
traverseBracket :: CheckNode Bracket
traverseQuasiQuote :: CheckNode QuasiQuote
traverseType :: CheckNode Type
traverseTyVar :: CheckNode TyVar
traverseKindContraint :: CheckNode KindConstraint
traverseKind :: CheckNode Kind
traverseContext :: CheckNode Context
traverseAssertion :: CheckNode Assertion
traverseName :: CheckNode Name
traverseQualifiedName :: CheckNode QualifiedName
traverseNamePart :: CheckNode NamePart
traverseLiteral :: CheckNode Literal
traverseOperator :: CheckNode Operator
traverseTypeSignature :: CheckNode TypeSignature
traverseFixitySignature :: CheckNode FixitySignature

module Language.Haskell.Tools.Refactor.Builtin.ExtractBinding
extractBinding' :: RealSrcSpan -> String -> LocalRefactoring
tryItOut :: String -> String -> String -> IO ()
extractBindingRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.FloatOut
floatOut :: RealSrcSpan -> LocalRefactoring
floatOutRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.GenerateExports

-- | Creates an export list that imports standalone top-level definitions
--   with all of their contained definitions
generateExports :: LocalRefactoring
generateExportsRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.GenerateTypeSignature

-- | Perform the refactoring on either local or top-level definition
generateTypeSignature :: Simple Traversal Module DeclList -> Simple Traversal Module LocalBindList -> (forall d. (BindingElem d) => AnnList d -> Maybe ValueBind) -> LocalRefactoring
generateTypeSignature' :: RealSrcSpan -> LocalRefactoring
tryItOut :: String -> String -> IO ()
generateTypeSignatureRefactoring :: RefactoringChoice


-- | Defines the inline binding refactoring that removes a value binding
--   and replaces all occurences with an expression equivalent to the body
--   of the binding.
module Language.Haskell.Tools.Refactor.Builtin.InlineBinding
inlineBinding :: RealSrcSpan -> Refactoring
tryItOut :: String -> String -> IO ()
inlineBindingRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.OrganizeExtensions
organizeExtensionsRefactoring :: RefactoringChoice
projectOrganizeExtensionsRefactoring :: RefactoringChoice
projectOrganizeExtensions :: ProjectRefactoring
tryOut :: String -> String -> IO ()
organizeExtensions :: LocalRefactoring

-- | Reduces default extension list (keeps unsupported extensions)
reduceExtensions :: UnnamedModule -> Ghc [Extension]

-- | Collects extensions induced by the source code (with location info)
collectExtensions :: UnnamedModule -> Ghc ExtMap

-- | Collects default extension list, and expands each extension
expandDefaults :: UnnamedModule -> [Extension]

-- | Collects extensions enabled by default
collectDefaultExtensions :: UnnamedModule -> [Extension]
toExt :: String -> Extension

module Language.Haskell.Tools.Refactor.Builtin.OrganizeImports
organizeImports :: LocalRefactoring
projectOrganizeImports :: ProjectRefactoring
organizeImportsRefactoring :: RefactoringChoice
projectOrganizeImportsRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin.RenameDefinition
renameDefinition :: Name -> [Name] -> String -> Refactoring
renameDefinition' :: RealSrcSpan -> String -> Refactoring
renameDefinitionRefactoring :: RefactoringChoice

module Language.Haskell.Tools.Refactor.Builtin
builtinRefactorings :: [RefactoringChoice]
