-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Creating the Haskell-Tools AST from GHC's representations
--   
--   This package collects information from various representations of a
--   Haskell program in GHC. Basically GHC provides us with the parsed, the
--   renamed and the type checked representation of the program, if it was
--   type correct. Each version contains different information. For
--   example, the renamed AST contains the unique names of the definitions,
--   however, template haskell splices are already resolved and thus
--   missing from that version of the AST. To get the final representation
--   we perform a transformation on the parsed and renamed representation,
--   and then use the type checked one to look up the types of the names.
--   The whole transformation is defined in the <a>Modules</a> module.
--   Other modules define the functions that convert elements of the GHC
--   AST to our AST.
@package haskell-tools-backend-ghc
@version 1.1.0.2


-- | Utility functions defined on the GHC AST representation.
module Language.Haskell.Tools.BackendGHC.GHCUtils
class (OutputableBndrId name) => GHCName name
rdrName :: GHCName name => IdP name -> RdrName
getFromNameUsing :: (GHCName name, Applicative f) => (Name -> Ghc (f Id)) -> Name -> Ghc (f (IdP name))
getBindsAndSigs :: GHCName name => HsValBinds name -> ([LSig name], LHsBinds name)
nameFromId :: GHCName name => Id -> IdP name
fieldOccToId :: GHCName name => RdrName -> XCFieldOcc name -> IdP name
nameIfThereIs :: GHCName name => IdP name -> Maybe Name
occName :: forall n. GHCName n => IdP n -> OccName
getFieldOccName :: forall n. GHCName n => Located (FieldOcc n) -> Located (IdP n)
getFieldOccName' :: forall n. GHCName n => FieldOcc n -> IdP n

-- | Loading ids for top-level ghc names
getTopLevelId :: Name -> Ghc (Maybe Id)
hsGetNames' :: HsHasName a => a -> [Name]

-- | Get names from the GHC AST
class HsHasName a
hsGetNames :: HsHasName a => Maybe Name -> a -> [(Name, Maybe Name)]

-- | Get the original form of a name
rdrNameStr :: RdrName -> String
class FromGHCName n
fromGHCName :: FromGHCName n => Name -> n
mergeFixityDefs :: [Located (FixitySig n)] -> [Located (FixitySig n)]
getGroupRange :: HsGroup (GhcPass n) -> SrcSpan
getHsValRange :: HsValBinds (GhcPass n) -> SrcSpan
fromSrcText :: SourceText -> String
instance Language.Haskell.Tools.BackendGHC.GHCUtils.FromGHCName RdrName.RdrName
instance Language.Haskell.Tools.BackendGHC.GHCUtils.FromGHCName Name.Name
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName RdrName.RdrName
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName Name.Name
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName Var.Id
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName e => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName [e]
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName e => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (SrcLoc.Located e)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP (HsExtension.GhcPass n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsBinds.HsLocalBinds (HsExtension.GhcPass n))
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.HsDecl n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.InstDecl n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n), Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName r) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.FamEqn n p r)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.DataFamInstDecl n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.TyClGroup n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.TyClDecl n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.FamilyDecl n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.HsDataDefn n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.ConDecl n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.HsConDeclDetails n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsTypes.ConDeclField n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsTypes.FieldOcc n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName n, Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsBinds.Sig n)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.ForeignDecl n)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP (HsExtension.GhcPass n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsBinds.HsValBinds (HsExtension.GhcPass n))
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName n => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (Bag.Bag n)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsBinds.HsBind n)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExpr.ParStmtBlock l n)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsTypes.HsTyVarBndr n)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExpr.Match n b)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP (HsExtension.GhcPass n)) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExpr.StmtLR (HsExtension.GhcPass n) (HsExtension.GhcPass n) b)
instance Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP n) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsPat.Pat n)
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName (HsExtension.GhcPass n), Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsExtension.IdP (HsExtension.GhcPass n))) => Language.Haskell.Tools.BackendGHC.GHCUtils.HsHasName (HsDecls.HsGroup (HsExtension.GhcPass n))
instance Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName HsExtension.GhcPs
instance Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName HsExtension.GhcRn


-- | Functions that convert the basic elements of the GHC AST to
--   corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Names
trfOperator :: forall n r. TransformName n r => Located (IdP n) -> Trf (Ann UOperator (Dom r) RangeStage)
trfOperator' :: forall n r. TransformName n r => IdP n -> Trf (UOperator (Dom r) RangeStage)
trfName :: forall n r. TransformName n r => Located (IdP n) -> Trf (Ann UName (Dom r) RangeStage)
trfName' :: forall n r. TransformName n r => IdP n -> Trf (UName (Dom r) RangeStage)
trfAmbiguousFieldName :: TransformName n r => Located (AmbiguousFieldOcc n) -> Trf (Ann UName (Dom r) RangeStage)
trfAmbiguousFieldName' :: forall n r. TransformName n r => SrcSpan -> AmbiguousFieldOcc n -> Trf (Ann UName (Dom r) RangeStage)
trfAmbiguousOperator' :: forall n r. TransformName n r => SrcSpan -> AmbiguousFieldOcc n -> Trf (Ann UOperator (Dom r) RangeStage)
type CorrectPass n = (Data (HsLit n), Outputable (HsLit n), Data (HsType n), Outputable (HsType n), Data (Pat n), Outputable (Pat n), Data (HsExpr n), Outputable (HsExpr n), Data (Stmt n (LHsExpr n)), Outputable (Stmt n (LHsExpr n)), Data (Stmt n (LHsCmd n)), Outputable (Stmt n (LHsCmd n)), Data (HsCmd n), Outputable (HsCmd n), Data (Sig n), Outputable (Sig n), Data (HsLocalBinds n), Outputable (HsLocalBinds n), Data (HsBind n), Outputable (HsBind n), Data (IdP n), Outputable (IdP n), Data (ConDecl n), Outputable (ConDecl n), Data (HsDecl n), Outputable (HsDecl n), Data (HsSplice n), Outputable (HsSplice n))
type ConvOk n = (XSigPat n ~ HsWildCardBndrs n (HsImplicitBndrs n (LHsType n)), XExprWithTySig n ~ LHsSigWcType n, XAppTypeE n ~ LHsWcType n, NameOrRdrName (IdP n) ~ IdP n)
class (ConvOk n, Eq n, CorrectPass n, GHCName n, FromGHCName (IdP n), HasOccName (IdP n)) => TransformableName n
correctNameString :: TransformableName n => IdP n -> Trf String
transformSplice :: TransformableName n => HsSplice GhcPs -> Trf (HsSplice n)

-- | This class allows us to use the same transformation code for multiple
--   variants of the GHC AST. GHC UName annotated with <tt>name</tt> can be
--   transformed to our representation with semantic annotations of
--   <tt>res</tt>.
class (TransformableName name, HsHasName (IdP name), FromGHCName (IdP res), Eq (IdP name), GHCName res, NameOrRdrName (IdP name) ~ (IdP name), XUnambiguous name ~ XCFieldOcc name) => TransformName name res

-- | Demote a given name
transformName :: TransformName name res => IdP name -> IdP res
trfNameText :: String -> Trf (Ann UName (Dom r) RangeStage)
trfImplicitName :: HsIPName -> Trf (Ann UName (Dom r) RangeStage)
isOperatorStr :: String -> Bool
trfQualifiedName :: forall n r. TransformName n r => Bool -> Located (IdP n) -> Trf (Ann UQualifiedName (Dom r) RangeStage)
trfQualifiedNameFocus :: forall n r. TransformName n r => Bool -> IdP n -> Trf (Ann UQualifiedName (Dom r) RangeStage)
trfQualifiedName' :: forall n r. TransformName n r => IdP n -> Trf (UQualifiedName (Dom r) RangeStage)
trfOperatorStr :: Bool -> String -> Trf (AnnListG UNamePart (Dom r) RangeStage)

-- | Creates a qualified name from a name string
trfNameStr :: Bool -> String -> Trf (AnnListG UNamePart (Dom r) RangeStage)
trfNameStr' :: String -> SrcLoc -> [Ann UNamePart (Dom r) RangeStage]
trfFastString :: Located FastString -> Trf (Ann UStringNode (Dom r) RangeStage)
instance Language.Haskell.Tools.BackendGHC.Names.TransformName HsExtension.GhcPs HsExtension.GhcPs
instance (Language.Haskell.Tools.BackendGHC.GHCUtils.FromGHCName (HsExtension.IdP res), Language.Haskell.Tools.BackendGHC.GHCUtils.GHCName res) => Language.Haskell.Tools.BackendGHC.Names.TransformName HsExtension.GhcRn res
instance Language.Haskell.Tools.BackendGHC.Names.TransformableName HsExtension.GhcPs
instance Language.Haskell.Tools.BackendGHC.Names.TransformableName HsExtension.GhcRn


-- | Functions that convert the literals of the GHC AST to corresponding
--   elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Literals
trfLiteral' :: TransformName n r => HsLit n -> Trf (ULiteral (Dom r) RangeStage)
monoLiteralType :: HsLit n -> Type
trfOverloadedLit :: OverLitVal -> Trf (ULiteral (Dom r) RangeStage)


-- | Functions that convert the pattern-related elements of the GHC AST to
--   corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Patterns
trfPattern :: forall n r p. (TransformName n r, n ~ GhcPass p) => Located (Pat n) -> Trf (Ann UPattern (Dom r) RangeStage)

-- | Locations for right-associative infix patterns are incorrect in GHC
--   AST
correctPatternLoc :: Located (Pat n) -> Located (Pat n)
trfPattern' :: forall n r p. (TransformName n r, n ~ GhcPass p) => Pat n -> Trf (UPattern (Dom r) RangeStage)
trfPatternField' :: forall n r p. (TransformName n r, n ~ GhcPass p) => HsRecField n (LPat n) -> Trf (UPatternField (Dom r) RangeStage)


-- | Functions that convert the statement-related elements of the GHC AST
--   to corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Stmts
trfDoStmt :: (TransformName n r, n ~ GhcPass p) => Located (Stmt n (LHsExpr n)) -> Trf (Ann UStmt (Dom r) RangeStage)
trfDoStmt' :: (TransformName n r, n ~ GhcPass p) => Stmt n (Located (HsExpr n)) -> Trf (UStmt' UExpr (Dom r) RangeStage)
gTrfDoStmt' :: (TransformName n r, Data (ge n), Outputable (ge n), n ~ GhcPass p, Data (Stmt n (Located (ge n)))) => (Located (ge n) -> Trf (Ann ae (Dom r) RangeStage)) -> Stmt n (Located (ge n)) -> Trf (UStmt' ae (Dom r) RangeStage)
trfListCompStmts :: (TransformName n r, n ~ GhcPass p) => [Located (Stmt n (LHsExpr n))] -> Trf (AnnListG UListCompBody (Dom r) RangeStage)
trfListCompStmt :: (TransformName n r, n ~ GhcPass p) => Located (Stmt n (LHsExpr n)) -> Trf [Ann UCompStmt (Dom r) RangeStage]
extractActualStmt :: (TransformName n r, n ~ GhcPass p) => Stmt n (LHsExpr n) -> Trf (Ann UCompStmt (Dom r) RangeStage)
getNormalStmts :: [Located (Stmt n (LHsExpr n))] -> [Located (Stmt n (LHsExpr n))]
getLastStmt :: [Located (Stmt n (LHsExpr n))] -> Located (HsExpr n)


-- | Functions that convert the kind-related elements of the GHC AST to
--   corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Kinds
trfKindSig :: (TransformName n r, Outputable (HsType n), Data (HsType n), n ~ GhcPass p) => Maybe (LHsKind n) -> Trf (AnnMaybeG UKindConstraint (Dom r) RangeStage)
trfKindSig' :: (TransformName n r, Outputable (HsType n), Data (HsType n), n ~ GhcPass p) => Located (HsKind n) -> Trf (Ann UKindConstraint (Dom r) RangeStage)
trfKind :: (TransformName n r, Outputable (HsType n), Data (HsType n), n ~ GhcPass p) => Located (HsKind n) -> Trf (Ann UKind (Dom r) RangeStage)
trfKind' :: forall n r p. (TransformName n r, Outputable (HsType n), Data (HsType n), n ~ GhcPass p) => HsKind n -> Trf (UKind (Dom r) RangeStage)
trfPromoted' :: forall n r a. (TransformName n r, HasNoSemanticInfo (Dom r) a, Outputable (HsType n), Data (HsType n)) => (HsType n -> Trf (a (Dom r) RangeStage)) -> HsType n -> Trf (UPromoted a (Dom r) RangeStage)


-- | Functions that convert the type-related elements of the GHC AST to
--   corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Types
trfType :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsType n) -> Trf (Ann UType (Dom r) RangeStage)
trfType' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => HsType n -> Trf (UType (Dom r) RangeStage)
trfBindings :: (TransformName n r, n ~ GhcPass p, HasCallStack) => [Located (HsTyVarBndr n)] -> Trf (AnnListG UTyVar (Dom r) RangeStage)
trfTyVar :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsTyVarBndr n) -> Trf (Ann UTyVar (Dom r) RangeStage)
trfTyVar' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => HsTyVarBndr n -> Trf (UTyVar (Dom r) RangeStage)
trfCtx :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Trf SrcLoc -> Located (HsContext n) -> Trf (AnnMaybeG UContext (Dom r) RangeStage)
trfAssertion :: (TransformName n r, n ~ GhcPass p, HasCallStack) => LHsType n -> Trf (Ann UAssertion (Dom r) RangeStage)
trfAssertion' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => HsType n -> Trf (UAssertion (Dom r) RangeStage)


-- | Functions that convert the expression-related elements of the GHC AST
--   to corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Exprs
trfExpr :: forall n r p. (TransformName n r, n ~ GhcPass p) => Located (HsExpr n) -> Trf (Ann UExpr (Dom r) RangeStage)
createScopeInfo :: Trf ScopeInfo
trfExpr' :: forall n r p. (TransformName n r, n ~ GhcPass p) => HsExpr n -> Trf (UExpr (Dom r) RangeStage)
trfFieldInits :: (TransformName n r, n ~ GhcPass p) => HsRecFields n (LHsExpr n) -> Trf (AnnListG UFieldUpdate (Dom r) RangeStage)
trfFieldInit :: forall n r p. (TransformName n r, n ~ GhcPass p) => Located (HsRecField n (LHsExpr n)) -> Trf (Ann UFieldUpdate (Dom r) RangeStage)
trfFieldUpdate :: (TransformName n r, n ~ GhcPass p) => HsRecField' (AmbiguousFieldOcc n) (LHsExpr n) -> Trf (UFieldUpdate (Dom r) RangeStage)
trfAlt :: (TransformName n r, n ~ GhcPass p) => Located (Match n (LHsExpr n)) -> Trf (Ann UAlt (Dom r) RangeStage)
trfAlt' :: (TransformName n r, n ~ GhcPass p) => Match n (LHsExpr n) -> Trf (UAlt (Dom r) RangeStage)
gTrfAlt' :: (TransformName n r, n ~ GhcPass p) => (Located (ge n) -> Trf (Ann ae (Dom r) RangeStage)) -> Match n (Located (ge n)) -> Trf (UAlt' ae (Dom r) RangeStage)
trfCaseRhss :: (TransformName n r, n ~ GhcPass p) => [Located (GRHS n (LHsExpr n))] -> Trf (Ann UCaseRhs (Dom r) RangeStage)
gTrfCaseRhss :: (TransformName n r, n ~ GhcPass p) => (Located (ge n) -> Trf (Ann ae (Dom r) RangeStage)) -> [Located (GRHS n (Located (ge n)))] -> Trf (Ann (UCaseRhs' ae) (Dom r) RangeStage)
trfGuardedCaseRhs :: (TransformName n r, n ~ GhcPass p) => Located (GRHS n (LHsExpr n)) -> Trf (Ann UGuardedCaseRhs (Dom r) RangeStage)
trfGuardedCaseRhs' :: (TransformName n r, n ~ GhcPass p) => GRHS n (LHsExpr n) -> Trf (UGuardedCaseRhs (Dom r) RangeStage)
gTrfGuardedCaseRhs' :: (TransformName n r, n ~ GhcPass p) => (Located (ge n) -> Trf (Ann ae (Dom r) RangeStage)) -> GRHS n (Located (ge n)) -> Trf (UGuardedCaseRhs' ae (Dom r) RangeStage)
trfCmdTop :: (TransformName n r, n ~ GhcPass p) => Located (HsCmdTop n) -> Trf (Ann UCmd (Dom r) RangeStage)
trfCmd :: (TransformName n r, n ~ GhcPass p) => Located (HsCmd n) -> Trf (Ann UCmd (Dom r) RangeStage)
trfCmd' :: (TransformName n r, n ~ GhcPass p) => HsCmd n -> Trf (UCmd (Dom r) RangeStage)
trfText' :: StringLiteral -> Trf (UStringNode (Dom r) RangeStage)
trfSourceRange :: (StringLiteral, (Int, Int), (Int, Int)) -> Trf (Ann USourceRange (Dom r) RangeStage)


-- | Functions that convert the value and function definitions of the GHC
--   AST to corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Binds
trfBind :: (TransformName n r, n ~ GhcPass p) => Located (HsBind n) -> Trf (Ann UValueBind (Dom r) RangeStage)
trfBind' :: forall n r p. (TransformName n r, n ~ GhcPass p) => HsBind n -> Trf (UValueBind (Dom r) RangeStage)
trfMatch :: (TransformName n r, n ~ GhcPass p) => IdP n -> Located (Match n (LHsExpr n)) -> Trf (Ann UMatch (Dom r) RangeStage)
trfMatch' :: (TransformName n r, n ~ GhcPass p) => IdP n -> Match n (LHsExpr n) -> Trf (UMatch (Dom r) RangeStage)
trfMatchLhs :: forall n r p. (TransformName n r, n ~ GhcPass p) => IdP n -> HsMatchContext (NameOrRdrName (IdP n)) -> [LPat n] -> Trf (Ann UMatchLhs (Dom r) RangeStage)
trfRhss :: (TransformName n r, n ~ GhcPass p) => [Located (GRHS n (LHsExpr n))] -> Trf (Ann URhs (Dom r) RangeStage)
trfGuardedRhs :: (TransformName n r, n ~ GhcPass p) => Located (GRHS n (LHsExpr n)) -> Trf (Ann UGuardedRhs (Dom r) RangeStage)
trfRhsGuard :: (TransformName n r, n ~ GhcPass p) => Located (Stmt n (LHsExpr n)) -> Trf (Ann URhsGuard (Dom r) RangeStage)
trfRhsGuard' :: (TransformName n r, n ~ GhcPass p) => Stmt n (LHsExpr n) -> Trf (URhsGuard (Dom r) RangeStage)
trfWhereLocalBinds :: (TransformName n r, n ~ GhcPass p) => SrcSpan -> HsLocalBinds n -> Trf (AnnMaybeG ULocalBinds (Dom r) RangeStage)
getBindLocs :: n ~ GhcPass p => HsLocalBinds n -> SrcSpan
trfLocalBinds :: (TransformName n r, n ~ GhcPass p) => AnnKeywordId -> HsLocalBinds n -> Trf (AnnListG ULocalBind (Dom r) RangeStage)
trfIpBind :: (TransformName n r, n ~ GhcPass p) => Located (IPBind n) -> Trf (Ann ULocalBind (Dom r) RangeStage)
trfLocalSig :: forall n r p. (TransformName n r, n ~ GhcPass p) => Located (Sig n) -> Trf (Ann ULocalBind (Dom r) RangeStage)
trfTypeSig :: (TransformName n r, n ~ GhcPass p) => Located (Sig n) -> Trf (Ann UTypeSignature (Dom r) RangeStage)
trfTypeSig' :: forall n r p. (TransformName n r, n ~ GhcPass p) => Sig n -> Trf (UTypeSignature (Dom r) RangeStage)
trfFixitySig :: forall n r. TransformName n r => FixitySig n -> Trf (UFixitySignature (Dom r) RangeStage)
trfInlinePragma :: forall n r. TransformName n r => Located (IdP n) -> InlinePragma -> Trf (Ann UInlinePragma (Dom r) RangeStage)
trfPhase :: Trf SrcLoc -> Activation -> Trf (AnnMaybeG UPhaseControl (Dom r) RangeStage)
trfPhaseNum :: PhaseNum -> Trf (Ann PhaseNumber (Dom r) RangeStage)
trfConlike :: [SrcSpan] -> RuleMatchInfo -> Trf (AnnMaybeG UConlikeAnnot (Dom r) RangeStage)


-- | Functions that convert the declarations of the GHC AST to
--   corresponding elements in the Haskell-tools AST representation
module Language.Haskell.Tools.BackendGHC.Decls
trfDecls :: (TransformName n r, n ~ GhcPass p, HasCallStack) => [LHsDecl n] -> Trf (AnnListG UDecl (Dom r) RangeStage)
trfDeclsGroup :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => HsGroup n -> Trf (AnnListG UDecl (Dom r) RangeStage)
trfDecl :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsDecl n) -> Trf (Ann UDecl (Dom r) RangeStage)
trfGADT :: (TransformName n r, n ~ GhcPass p, HasCallStack) => NewOrData -> Located (IdP n) -> LHsQTyVars n -> Located (HsContext n) -> Maybe (Located (HsKind n)) -> [Located (ConDecl n)] -> Located [LHsDerivingClause n] -> AnnKeywordId -> Trf SrcLoc -> Trf (UDecl (Dom r) RangeStage)
trfDataDef :: (TransformName n r, n ~ GhcPass p, HasCallStack) => NewOrData -> Located (IdP n) -> LHsQTyVars n -> Located (HsContext n) -> [Located (ConDecl n)] -> Located [LHsDerivingClause n] -> AnnKeywordId -> Trf SrcLoc -> Trf (UDecl (Dom r) RangeStage)
trfVal :: (TransformName n r, n ~ GhcPass p, HasCallStack) => HsBindLR n n -> Trf (UDecl (Dom r) RangeStage)
trfSig :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Sig n -> Trf (UDecl (Dom r) RangeStage)
trfSpecializePragma :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (IdP n) -> [Located (HsType n)] -> Activation -> Trf (Ann USpecializePragma (Dom r) RangeStage)
trfConDecl :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (ConDecl n) -> Trf (Ann UConDecl (Dom r) RangeStage)
trfConDecl' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => ConDecl n -> Trf (UConDecl (Dom r) RangeStage)
trfConCtx :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Maybe (LHsContext n) -> Trf (AnnMaybeG UContext (Dom r) RangeStage)
trfGADTConDecl :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (ConDecl n) -> Trf (Ann UGadtConDecl (Dom r) RangeStage)
trfGADTConDecl' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => ConDecl n -> Trf (UGadtConDecl (Dom r) RangeStage)
trfGadtConType :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsType n) -> Trf (Ann UGadtConType (Dom r) RangeStage)
trfFieldDecl :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (ConDeclField n) -> Trf (Ann UFieldDecl (Dom r) RangeStage)
trfFieldDecl' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => ConDeclField n -> Trf (UFieldDecl (Dom r) RangeStage)
trfDerivings :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsDerivingClause n) -> Trf (Ann UDeriving (Dom r) RangeStage)
trfDerivingStrategy :: (TransformName n r, HasCallStack) => Maybe (Located (DerivStrategy n)) -> Trf (AnnMaybeG UDeriveStrategy (Dom r) RangeStage)
trfInstanceRule :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsType n) -> Trf (Ann UInstanceRule (Dom r) RangeStage)
trfInstanceRule' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => HsType n -> Trf (UInstanceRule (Dom r) RangeStage)
instanceHead :: HasCallStack => Trf (Ann UInstanceHead (Dom r) RangeStage) -> Trf (UInstanceRule (Dom r) RangeStage)
makeInstanceRuleTyVars :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (IdP n) -> [LHsType n] -> Trf (Ann UInstanceRule (Dom r) RangeStage)
trfInstanceHead :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (HsType n) -> Trf (Ann UInstanceHead (Dom r) RangeStage)
trfInstanceHead' :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => HsType n -> Trf (UInstanceHead (Dom r) RangeStage)
trfTypeEqs :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Maybe [Located (TyFamInstEqn n)] -> Trf (AnnListG UTypeEqn (Dom r) RangeStage)
trfTypeEq :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (FamEqn n (HsTyPats n) (LHsType n)) -> Trf (Ann UTypeEqn (Dom r) RangeStage)
trfFunDeps :: forall n r. (TransformName n r, HasCallStack) => [Located (FunDep (Located (IdP n)))] -> Trf (AnnMaybeG UFunDeps (Dom r) RangeStage)
trfFunDep' :: forall n r. (TransformName n r, HasCallStack) => FunDep (Located (IdP n)) -> Trf (UFunDep (Dom r) RangeStage)
createDeclHead :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (IdP n) -> LHsQTyVars n -> Trf (Ann UDeclHead (Dom r) RangeStage)
wrapDeclHead :: (TransformName n r, n ~ GhcPass p, HasCallStack) => [LHsTyVarBndr n] -> Trf (Ann UDeclHead (Dom r) RangeStage) -> Trf (Ann UDeclHead (Dom r) RangeStage)

-- | Get the parentheses directly before and after (for parenthesized
--   application)
addParenLocs :: SrcSpan -> Trf SrcSpan
createClassBody :: (TransformName n r, n ~ GhcPass p, HasCallStack) => [LSig n] -> LHsBinds n -> [LFamilyDecl n] -> [LTyFamDefltEqn n] -> Trf (AnnMaybeG UClassBody (Dom r) RangeStage)
trfClassElemSig :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (Sig n) -> Trf (Ann UClassElement (Dom r) RangeStage)
trfTypeFam :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (FamilyDecl n) -> Trf (Ann UTypeFamily (Dom r) RangeStage)
trfTypeFam' :: (TransformName n r, n ~ GhcPass p, HasCallStack) => FamilyDecl n -> Trf (UTypeFamily (Dom r) RangeStage)
trfTypeFamDef :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (TyFamDefltEqn n) -> Trf (Ann UClassElement (Dom r) RangeStage)
trfInstBody :: (TransformName n r, n ~ GhcPass p, HasCallStack) => LHsBinds n -> [LSig n] -> [LTyFamInstDecl n] -> [LDataFamInstDecl n] -> Trf (AnnMaybeG UInstBody (Dom r) RangeStage)
trfClassInstSig :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (Sig n) -> Trf (Ann UInstBodyDecl (Dom r) RangeStage)
trfInstTypeFam :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (TyFamInstDecl n) -> Trf (Ann UInstBodyDecl (Dom r) RangeStage)
trfInstDataFam :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (DataFamInstDecl n) -> Trf (Ann UInstBodyDecl (Dom r) RangeStage)
trfPatternSynonym :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => PatSynBind n n -> Trf (UPatternSynonym (Dom r) RangeStage)
trfFamilyKind :: (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (FamilyResultSig n) -> Trf (AnnMaybeG UKindConstraint (Dom r) RangeStage)
trfFamilyResultSig :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (FamilyResultSig n) -> Maybe (LInjectivityAnn n) -> Trf (AnnMaybeG UTypeFamilySpec (Dom r) RangeStage)
trfAnnotationSubject :: forall n r. (TransformName n r, HasCallStack) => SourceText -> AnnProvenance (IdP n) -> SrcLoc -> Trf (Ann UAnnotationSubject (Dom r) RangeStage)
trfDataKeyword :: NewOrData -> Trf (Ann UDataOrNewtypeKeyword (Dom r) RangeStage)
trfCallConv :: Located CCallConv -> Trf (Ann UCallConv (Dom r) RangeStage)
trfCallConv' :: CCallConv -> Trf (UCallConv (Dom r) RangeStage)
trfSafety :: SrcSpan -> Located Safety -> Trf (AnnMaybeG USafety (Dom r) RangeStage)
trfOverlap :: Located OverlapMode -> Trf (Ann UOverlapPragma (Dom r) RangeStage)
trfRole :: Located (Maybe Role) -> Trf (Ann URole (Dom r) RangeStage)
trfRewriteRule :: (TransformName n r, n ~ GhcPass p) => Located (RuleDecl n) -> Trf (Ann URule (Dom r) RangeStage)
trfRuleBndr :: forall n r p. (TransformName n r, n ~ GhcPass p, HasCallStack) => Located (RuleBndr n) -> Trf (Ann URuleVar (Dom r) RangeStage)
trfMinimalFormula :: forall n r. (TransformName n r, HasCallStack) => Located (BooleanFormula (Located (IdP n))) -> Trf (Ann UMinimalFormula (Dom r) RangeStage)
trfMinimalFormula' :: forall n r. (TransformName n r, HasCallStack) => BooleanFormula (Located (IdP n)) -> Trf (UMinimalFormula (Dom r) RangeStage)


-- | Functions that convert the Template-Haskell-related elements of the
--   GHC AST to corresponding elements in the Haskell-tools AST
--   representation
module Language.Haskell.Tools.BackendGHC.TH
trfQuasiQuotation' :: forall n r. TransformName n r => HsSplice n -> Trf (UQuasiQuote (Dom r) RangeStage)
trfSplice :: (TransformName n r, n ~ GhcPass p) => HsSplice n -> Trf (Ann USplice (Dom r) RangeStage)
getSpliceLoc :: HsSplice a -> SrcSpan
trfSplice' :: (TransformName n r, n ~ GhcPass p) => HsSplice n -> Trf (USplice (Dom r) RangeStage)

-- | TODO: easier with splice decoration
trfSpliceExpr :: forall n r p. (TransformName n r, n ~ GhcPass p) => Located (HsExpr n) -> Trf (USplice (Dom r) RangeStage)
trfBracket' :: forall n r p. (TransformName n r, n ~ GhcPass p) => HsBracket n -> Trf (UBracket (Dom r) RangeStage)


-- | Functions that convert the module-related elements (modules, imports,
--   exports) of the GHC AST to corresponding elements in the Haskell-tools
--   AST representation Also contains the entry point of the transformation
--   that collects the information from different GHC AST representations.
module Language.Haskell.Tools.BackendGHC.Modules
trfModule :: ModSummary -> Located (HsModule GhcPs) -> Trf (Ann UModule (Dom GhcPs) RangeStage)

-- | Transformes the module in its typed state. Uses the results of
--   <a>trfModule</a> to extract program elements (splices for example)
--   that are not kept in the typed representation.
trfModuleRename :: ModSummary -> Ann UModule (Dom GhcPs) RangeStage -> RenamedSource -> Located (HsModule GhcPs) -> Trf (Ann UModule (Dom GhcRn) RangeStage)

-- | Extract the template haskell splices from the representation and adds
--   them to the transformation state.
loadSplices :: HsModule GhcPs -> Trf a -> Trf a
trfModuleHead :: TransformName n r => Maybe (Located ModuleName) -> SrcLoc -> Maybe (Located [LIE n]) -> Maybe (Located WarningTxt) -> Trf (AnnMaybeG UModuleHead (Dom r) RangeStage)
trfFilePragmas :: Trf (AnnListG UFilePragma (Dom r) RangeStage)
trfLanguagePragma :: Located String -> Trf (Ann UFilePragma (Dom r) RangeStage)
trfOptionsPragma :: Located String -> Trf (Ann UFilePragma (Dom r) RangeStage)
trfModulePragma :: SrcLoc -> Maybe (Located WarningTxt) -> Trf (AnnMaybeG UModulePragma (Dom r) RangeStage)
trfExportList :: TransformName n r => Trf SrcLoc -> Maybe (Located [LIE n]) -> Trf (AnnMaybeG UExportSpecs (Dom r) RangeStage)
trfExportList' :: TransformName n r => [LIE n] -> Trf (UExportSpecs (Dom r) RangeStage)
trfExport :: TransformName n r => LIE n -> Trf (Maybe (Ann UExportSpec (Dom r) RangeStage))
trfImports :: forall n r. TransformName n r => [LImportDecl n] -> Trf (AnnListG UImportDecl (Dom r) RangeStage)
trfImport :: TransformName n r => LImportDecl n -> Trf (Ann UImportDecl (Dom r) RangeStage)
trfImportSpecs :: TransformName n r => Maybe (Bool, Located [LIE n]) -> Trf (AnnMaybeG UImportSpec (Dom r) RangeStage)
trfIESpec :: TransformName n r => LIE n -> Trf (Maybe (Ann UIESpec (Dom r) RangeStage))
trfIESpec' :: forall n r. TransformName n r => IE n -> Trf (Maybe (UIESpec (Dom r) RangeStage))
getWrappedName :: Located (IEWrappedName n) -> Located n
trfImportModifier :: Trf (AnnMaybeG UImportModifier (Dom r) RangeStage)
trfModuleName :: Located ModuleName -> Trf (Ann UModuleName (Dom r) RangeStage)
trfModuleName' :: ModuleName -> Trf (UModuleName (Dom r) RangeStage)


-- | The FromGHC module provides a way to transform the GHC AST into our
--   AST. This transformation is done in the Ghc monad. The conversion can
--   be performed from the Parsed and the Renamed GHC AST. If the renamed
--   AST is given, additional semantic information is looked up while
--   traversing the AST.
module Language.Haskell.Tools.BackendGHC
trfModule :: ModSummary -> Located (HsModule GhcPs) -> Trf (Ann UModule (Dom GhcPs) RangeStage)

-- | Transformes the module in its typed state. Uses the results of
--   <a>trfModule</a> to extract program elements (splices for example)
--   that are not kept in the typed representation.
trfModuleRename :: ModSummary -> Ann UModule (Dom GhcPs) RangeStage -> RenamedSource -> Located (HsModule GhcPs) -> Trf (Ann UModule (Dom GhcRn) RangeStage)
addTypeInfos :: LHsBinds GhcTc -> Ann UModule (Dom GhcRn) RangeStage -> Ghc (Ann UModule IdDom RangeStage)

-- | Performs the transformation given the tokens of the source file
runTrf :: Map ApiAnnKey [SrcSpan] -> Map String [Located String] -> Trf a -> Ghc a
data SpliceInsertionProblem
SpliceInsertionProblem :: SrcSpan -> String -> SpliceInsertionProblem
data ConvertionProblem
ConvertionProblem :: CallStack -> SrcSpan -> String -> ConvertionProblem
UnrootedConvertionProblem :: String -> ConvertionProblem
